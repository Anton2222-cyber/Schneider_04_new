***********************************************************************
*
*	CODE GENERATION LISTING FOR: 0.1
*	COMPILER VERSION: 6.0.0.52
*
***********************************************************************

**************************************************
	List function block: TON
**************************************************

FUNCTION_BLOCK TON

	{ DE:"<HTML>The TON block produces a delayed output Q of the input IN. The delay time is expressed in milliseconds on the PT input.</br></br>
<img src= tonscheme.png>
<ul>
<li>if IN is FALSE Q is false</li>
<li>Q becomes TRUE as IN remains TRUE for PT milliseconds</li>
<li>Q remains TRUE until IN remains TRUE</li>
</ul>" }

        VAR_INPUT
IN : BOOL;	{ DE:"Timer input source" }
PT : UDINT;	{ DE:"Preset time value (ms)" }
	END_VAR

        VAR_OUTPUT
Q : BOOL;	{ DE:"Timer output" }
ET : UDINT;	{ DE:"Timer current value (ms)" }
	END_VAR

        VAR_EXTERNAL
	{G:"System_Timers"}
sysTimer AT %MD0.0 : UDINT;	{ DE:"System timer [ms]" }
	END_VAR

        VAR
timStart : UDINT;	{ DE:"Time value at start of counting" }
	END_VAR

END_FUNCTION_BLOCK

05D442F0  55                            push ebp
05D442F1  8B EB                         mov ebp, ebx
05D442F3  57                            push edi

#0		{SRC:TON}
#1		
#2			(*	Check if in counting	*)
#3		
#4			LD		IN
(*) UNDEF
05D442F4  33 C0                         xor eax, eax
05D442F6  8A 45 04                      mov al, 4[ebp]

#5			JMPCN	lReset
(-) BOOL
05D442F9  84 C0                         test al, al
05D442FB  90 74 61 90 90 90             je 05D4435FH

#6		
#7			(*	Check if Q is TRUE *)
#8			LD		Q
(*) UNDEF
05D44301  33 C0                         xor eax, eax
05D44303  8A 45 09                      mov al, 9[ebp]

#9			RETC
#10			
(-) BOOL
05D44306  84 C0                         test al, al
05D44308  90 75 6A 90 90 90             jne 05D44375H

#11			(*	Check if already in counting *)
#12			LD		timStart
(*) UNDEF
05D4430E  8B 45 00                      mov eax, [ebp]

#13			EQ		0
(*) UDINT
05D44311  3D 00 00 00 00                cmp eax, 0
05D44316  0F 94 C0                      sete al
05D44319  25 FF 00 00 00                and eax, 0FFh

#14			JMPCN	lUpdate
(-) BOOL
05D4431E  84 C0                         test al, al
05D44320  90 74 0C 90 90 90             je 05D4432FH

#15		
#16			(*	Start of counting *)
#17			LD		sysTimer
(*) UNDEF
05D44326  8B 05 CC CC CC CC             mov eax, [CCCCCCCCH] ; %M0+0

#18			ST		timStart
(*) UDINT
05D4432C  89 45 00                      mov [ebp], eax

#19			
#20		lUpdate:
#21		
#22			(*	Update timer and check if time elapsed *)
#23			LD		sysTimer
(*) UNDEF
05D4432F  8B 05 CC CC CC CC             mov eax, [CCCCCCCCH] ; %M0+0

#24			SUB		timStart
(*) UDINT
05D44335  2B 45 00                      sub eax, [ebp]

#25			ST		ET
(*) UDINT
05D44338  89 45 0A                      mov 10[ebp], eax

#26			GE		PT
(*) UDINT
05D4433B  3B 45 05                      cmp eax, [ebp+5]
05D4433E  0F 93 C0                      setae al
05D44341  25 FF 00 00 00                and eax, 0FFh

#27			ST		Q
(*) BOOL
05D44346  84 C0                         test al, al
05D44348  0F 95 45 09                   setne 9[ebp]

#28			RETCN
#29		
(-) BOOL
05D4434C  84 C0                         test al, al
05D4434E  90 74 24 90 90 90             je 05D44375H

#30			(*	Limit actual time value *)
#31			LD		PT
(*) UNDEF
05D44354  8B 45 05                      mov eax, 5[ebp]

#32			ST		ET
(*) UDINT
05D44357  89 45 0A                      mov 10[ebp], eax

#33			RET
#34		
(-) UDINT
05D4435A  EB 19 90 90 90                jmp 05D44375H

#35		lReset:
#36		
#37			(*	Reset status *)
#38			LD		0
(*) UNDEF
05D4435F  B8 00 00 00 00                mov eax, 00H

#39			ST		ET
(*) USINT
05D44364  89 45 0A                      mov 10[ebp], eax

#40			ST		timStart
(*) UDINT
05D44367  89 45 00                      mov [ebp], eax

#41			LD		FALSE
(*) UNDEF
05D4436A  B8 00 00 00 00                mov eax, 00H

#42			ST		Q
(*) BOOL
05D4436F  84 C0                         test al, al
05D44371  0F 95 45 09                   setne 9[ebp]

05D44375  5F                            pop edi
05D44376  5D                            pop ebp

05D44377  C3                            ret


Frame allocation (hex):

	0000       : VAR timStart
	0004 bit  0: VAR IN
	0005       : VAR PT
	0009 bit  0: VAR Q
	000A       : VAR ET

END_FUNCTION_BLOCK
**************************************************
	List program: main
**************************************************

PROGRAM main

END_PROGRAM

05D44380  55                            push ebp
05D44381  8B EC                         mov ebp, esp
05D44383  60                            pushad

#0		{SRC:main}
#1		(*$WAITSWITCH$*)
#2		
#3			(* cnt := cnt + 1; *)
#4			LD		cnt	{LNXT:2|2|-1}
(*) UNDEF
05D44384  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+250

#5			ADD		1	{LNXT:2|2|-1}
(*) INT
05D4438B  05 01 00 00 00                add eax, 1

#6			ST		cnt	{LNXT:2|2|-1}
(*) INT
05D44390  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+250

05D44397  61                            popad
05D44398  5D                            pop ebp

05D44399  C3                            ret

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
05D4439A  55                            push ebp
05D4439B  8B EC                         mov ebp, esp

05D4439D  8B E5                         mov esp, ebp
05D4439F  5D                            pop ebp

05D443A0  C3                            ret


*** OUTPUT:
05D443A1  55                            push ebp
05D443A2  8B EC                         mov ebp, esp

05D443A4  8B E5                         mov esp, ebp
05D443A6  5D                            pop ebp

05D443A7  C3                            ret



**************************************************
	Task Background init code
**************************************************

05D443A8  55                            push ebp
05D443A9  8B EC                         mov ebp, esp

05D443AB  8B E5                         mov esp, ebp
05D443AD  5D                            pop ebp

05D443AE  C3                            ret

**************************************************
	List program: InitParDB
**************************************************

PROGRAM InitParDB

        VAR
warningsKiller : USINT;
dummyCrc32 : UDINT;
	END_VAR

END_PROGRAM

05D443C0  55                            push ebp
05D443C1  8B EC                         mov ebp, esp
05D443C3  60                            pushad

#0		{SRC:InitParDB}
#1		(*$WAITSWITCH$*)
#2		
#3			(* dummyCrc32 := 3957411524; *)
#4			MOVE		3957411524,dummyCrc32	{LNXT:3|5|-1}
(*) UDINT
05D443C4  B8 C4 4E E1 EB                mov eax, EBE14EC4H
05D443C9  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+12

#5		
#6			(* warningsKiller := sysDBase_SetExtTable( ADR( $$ParDB ), $$ParDBLength ); *)
#7			ADR		$$ParDB	{LNXT:5|3|-1}
(*) UDINT
05D443CF  B8 CC CC CC CC                mov eax, CCCCCCCCH ; $$CODE$$+240

#8			sysDBase_SetExtTable		$$ParDBLength	{LNXT:5|3|-1}
(*) @USINT
05D443D4  68 0D 00 00 00                push 13
05D443D9  8B C8                         mov ecx, eax
05D443DB  51                            push ecx
05D443DC  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; sysDBase_SetExtTable
05D443E1  FF D1                         call ecx
05D443E3  81 C4 08 00 00 00             add esp, 8

#9			ST		warningsKiller	{LNXT:5|3|-1}
(*) USINT
05D443E9  88 05 CC CC CC CC             mov [CCCCCCCCH], al ; $$DATA$$+16

05D443EF  61                            popad
05D443F0  5D                            pop ebp

05D443F1  C3                            ret

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
05D443F2  C3                            ret


*** OUTPUT:
05D443F3  C3                            ret



**************************************************
	Task Serv init code
**************************************************

05D443F4  55                            push ebp
05D443F5  8B EC                         mov ebp, esp

05D443F7  8B E5                         mov esp, ebp
05D443F9  5D                            pop ebp

05D443FA  C3                            ret

**************************************************
	List program: LVL
**************************************************

PROGRAM LVL

        VAR
Fault_A : BOOL := FALSE;
Fault_B : BOOL := FALSE;
Fault_C : BOOL := FALSE;
RotationMode : BOOL := FALSE;	{ DE:"Локальна змінна ротація 0-вимкнена" }
Rotationnumber : INT := 1;	{ DE:"Номер в ротації" }
FastRunMode : BOOL := FALSE;	{ DE:"Локальна змінна Прогонка 0-вимкнена" }
PriorityMotor : INT := 1;	{ DE:"Priority 0 = Motor_A, 1 = Motor_B, 2 = Motor_C" }
RunTime_START : TIME;	{ DE:"Час роботи двигуна A" }
TM_WAIT : INT;	{ DE:"Час затримки перевірки запуску двигуна" }
ErrorTimer_A : TON;
ErrorTimer_B : TON;
ErrorTimer_C : TON;
CurrentMotor : INT := 1;
ErrorCode : INT := 0;
Max_Level_3 : INT := 150;	{ DE:"Рівень запуску 1 насоса" }
Max_Level_2 : INT := 120;	{ DE:"Рівень запуску 1 насоса" }
Max_Level_1 : INT := 80;	{ DE:"Рівень запуску 1 насоса" }
Min_Level : INT := 30;	{ DE:"Рівень зупинки насоса" }
PumpIntervalTimer_1 : TON;	{ DE:"інтервал для запуску прогонки" }
PumpRunTimer_1 : TON;	{ DE:"Час прогонки" }
TestRunActive_1 : BOOL := FALSE;	{ DE:"Тригер готовності прогонки" }
TestRunRunning_1 : BOOL := FALSE;	{ DE:"Прогонка виконується" }
PumpIntervalTimer_2 : TON;	{ DE:"інтервал для запуску прогонки" }
PumpRunTimer_2 : TON;	{ DE:"Час прогонки" }
TestRunActive_2 : BOOL := FALSE;	{ DE:"Тригер готовності прогонки" }
TestRunRunning_2 : BOOL := FALSE;	{ DE:"Прогонка виконується" }
PumpIntervalTimer_3 : TON;	{ DE:"інтервал для запуску прогонки" }
PumpRunTimer_3 : TON;	{ DE:"Час прогонки" }
TestRunActive_3 : BOOL := FALSE;	{ DE:"Тригер готовності прогонки" }
TestRunRunning_3 : BOOL := FALSE;	{ DE:"Прогонка виконується" }
CurrentPump : INT := 1;
	END_VAR

END_PROGRAM

05D44410  55                            push ebp
05D44411  8B EC                         mov ebp, esp
05D44413  60                            pushad

#0		{SRC:LVL}
#1		(*$WAITSWITCH$*)
#2		
#3			(* TM_WAIT:=3000; *)
#4			MOVE		3000,TM_WAIT	{LNXT:4|9|-1}
(*) UDINT
05D44414  B8 B8 0B 00 00                mov eax, 0BB8H
05D44419  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+18

#5		
#6		
#7			(* IF Rotation <> RotationMode *)
#8			LD		Rotation	{LNXT:9|-1|-1}
(*) UNDEF
05D44420  33 C0                         xor eax, eax
05D44422  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %M110+16

#9			NE		RotationMode	{LNXT:9|-1|-1}
(*) BOOL
05D44428  33 C9                         xor ecx, ecx
05D4442A  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+17
05D44430  33 C1                         xor eax, ecx

#10			JMPCN	$label0	{LNXT:9|10|16}
(-) BOOL
05D44432  84 C0                         test al, al
05D44434  90 74 14 90 90 90             je 05D4444BH

#11		
#12			(* THEN *)
#13		
#14				(* RotationMode := Rotation; *)
#15				MOVE		Rotation,RotationMode	{LNXT:10|16|-1}
(*) BOOL
05D4443A  33 C0                         xor eax, eax
05D4443C  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %M110+16
05D44442  84 C0                         test al, al
05D44444  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+17

#16		
#17		$label0:
#18			(* END_IF *)
#19		
#20		
#21			(* IF RotationMode = FALSE *)
#22			LD		RotationMode	{LNXT:16|-1|-1}
(*) UNDEF
05D4444B  33 C0                         xor eax, eax
05D4444D  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+17

#23			EQ		FALSE	{LNXT:16|-1|-1}
(*) BOOL
05D44453  35 01 00 00 00                xor eax, 00000001H

#24			JMPCN	$label1	{LNXT:16|17|24}
(-) BOOL
05D44458  84 C0                         test al, al
05D4445A  90 74 11 90 90 90             je 05D4446EH

#25		
#26			(* THEN *)
#27		
#28				(* PriorityMotor := Priority; *)
#29				MOVE		Priority,PriorityMotor	{LNXT:17|24|-1}
(*) BOOL
05D44460  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M110+12
05D44467  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+20

#30		
#31		$label1:
#32			(* END_IF *)
#33		
#34		
#35			(* IF FastRun <> FastRunMode *)
#36			LD		FastRun	{LNXT:24|-1|-1}
(*) UNDEF
05D4446E  33 C0                         xor eax, eax
05D44470  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %M110+18

#37			NE		FastRunMode	{LNXT:24|-1|-1}
(*) BOOL
05D44476  33 C9                         xor ecx, ecx
05D44478  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+22
05D4447E  33 C1                         xor eax, ecx

#38			JMPCN	$label2	{LNXT:24|25|32}
(-) BOOL
05D44480  84 C0                         test al, al
05D44482  90 74 14 90 90 90             je 05D44499H

#39		
#40			(* THEN *)
#41		
#42				(* FastRunMode := FastRun; *)
#43				MOVE		FastRun,FastRunMode	{LNXT:25|32|-1}
(*) BOOL
05D44488  33 C0                         xor eax, eax
05D4448A  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %M110+18
05D44490  84 C0                         test al, al
05D44492  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+22

#44		
#45		$label2:
#46			(* END_IF *)
#47		
#48		
#49			(* IF Tank_Level >= Max_Level_1 and RotationMode *)
#50			LD		Tank_Level	{LNXT:32|-1|-1}
(*) UNDEF
05D44499  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+24

#51			GE		Max_Level_1	{LNXT:32|-1|-1}
(*) INT
05D444A0  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; $$DATA$$+26
05D444A7  3B C1                         cmp eax, ecx
05D444A9  0F 9D C0                      setge al
05D444AC  25 FF 00 00 00                and eax, 0FFh

#52			AND		RotationMode	{LNXT:32|-1|-1}
(*) BOOL
05D444B1  33 C9                         xor ecx, ecx
05D444B3  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+17
05D444B9  23 C1                         and eax, ecx

#53			JMPCN	$label3	{LNXT:32|35|70}
(-) BOOL
05D444BB  84 C0                         test al, al
05D444BD  0F 84 3A 02 00 00             je 05D446FDH

#54		
#55			(* THEN *)
#56		
#57		
#58				(* CASE Rotationnumber OF *)
#59		
#60				(* 0: *)
#61				LD		Rotationnumber	{LNXT:35|-1|-1}
(*) UNDEF
05D444C3  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+28

#62				EQ		0	{LNXT:35|-1|-1}
(*) INT
05D444CA  3D 00 00 00 00                cmp eax, 0
05D444CF  0F 94 C0                      sete al
05D444D2  25 FF 00 00 00                and eax, 0FFh

#63				JMPC		$label5	{LNXT:35|36|40}
(-) BOOL
05D444D7  84 C0                         test al, al
05D444D9  90 75 40 90 90 90             jne 05D4451CH

#64		
#65				(* 1: *)
#66				LD		Rotationnumber	{LNXT:40|-1|-1}
(*) UNDEF
05D444DF  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+28

#67				EQ		1	{LNXT:40|-1|-1}
(*) INT
05D444E6  3D 01 00 00 00                cmp eax, 1
05D444EB  0F 94 C0                      sete al
05D444EE  25 FF 00 00 00                and eax, 0FFh

#68				JMPC		$label6	{LNXT:40|41|45}
(-) BOOL
05D444F3  84 C0                         test al, al
05D444F5  0F 85 96 00 00 00             jne 05D44591H

#69		
#70				(* 2: *)
#71				LD		Rotationnumber	{LNXT:45|-1|-1}
(*) UNDEF
05D444FB  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+28

#72				EQ		2	{LNXT:45|-1|-1}
(*) INT
05D44502  3D 02 00 00 00                cmp eax, 2
05D44507  0F 94 C0                      sete al
05D4450A  25 FF 00 00 00                and eax, 0FFh

#73				JMPC		$label7	{LNXT:45|46|53}
(-) BOOL
05D4450F  84 C0                         test al, al
05D44511  0F 85 EF 00 00 00             jne 05D44606H

#74				JMP		$label4	{LNXT:45|46|53}
(-) BOOL
05D44517  E9 5A 01 00 00                jmp 05D44676H

#75		
#76				(* Istruzioni di ciascun CASE: *)
#77		
#78		$label5:
#79		
#80					(* IF Fault_A AND Avto_A AND NOT Motor_B AND NOT Motor_C *)
#81					LD		Motor_C	{LNXT:36|-1|-1}
(*) UNDEF
05D4451C  33 C0                         xor eax, eax
05D4451E  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+2

#82					NOT	{LNXT:36|-1|-1}
(*) BOOL
05D44524  84 C0                         test al, al
05D44526  0F 94 C0                      sete al

#83					AND(		Motor_B	{LNXT:36|-1|-1}
(*) BOOL
05D44529  50                            push eax
05D4452A  33 C0                         xor eax, eax
05D4452C  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+1

#84					NOT	{LNXT:36|-1|-1}
(*) BOOL
05D44532  84 C0                         test al, al
05D44534  0F 94 C0                      sete al

#85					AND(		Fault_A	{LNXT:36|-1|-1}
(*) BOOL
05D44537  50                            push eax
05D44538  33 C0                         xor eax, eax
05D4453A  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+23

#86					NOT	{LNXT:36|-1|-1}
(*) BOOL
05D44540  84 C0                         test al, al
05D44542  0F 94 C0                      sete al

#87					AND		Avto_A	{LNXT:36|-1|-1}
(*) BOOL
05D44545  33 C9                         xor ecx, ecx
05D44547  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+30
05D4454D  23 C1                         and eax, ecx

#88					)	{LNXT:36|-1|-1}
(*) BOOL
05D4454F  8B C8                         mov ecx, eax
05D44551  58                            pop eax
05D44552  23 C1                         and eax, ecx

#89					)	{LNXT:36|-1|-1}
(*) BOOL
05D44554  8B C8                         mov ecx, eax
05D44556  58                            pop eax
05D44557  23 C1                         and eax, ecx

#90					JMPCN	$label8	{LNXT:36|37|53}
(-) BOOL
05D44559  84 C0                         test al, al
05D4455B  90 74 2E 90 90 90             je 05D4458CH

#91		
#92					(* THEN *)
#93		
#94						(* Motor_A := TRUE; *)
#95						MOVE		TRUE,Motor_A	{LNXT:37|38|-1}
(*) BOOL
05D44561  B8 01 00 00 00                mov eax, 01H
05D44566  84 C0                         test al, al
05D44568  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+0

#96		
#97						(* Rotationnumber := (Rotationnumber + 1) MOD 3; *)
#98						LD		Rotationnumber	{LNXT:38|53|-1}
(*) UNDEF
05D4456F  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+28

#99						ADD		1	{LNXT:38|53|-1}
(*) INT
05D44576  05 01 00 00 00                add eax, 1

#100						MOD		3	{LNXT:38|53|-1}
(*) INT
05D4457B  99                            cdq
05D4457C  B9 03 00 00 00                mov ecx, 3
05D44581  F7 F9                         idiv ecx
05D44583  8B C2                         mov eax, edx

#101						ST		Rotationnumber	{LNXT:38|53|-1}
(*) INT
05D44585  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+28

#102		
#103		$label8:
#104					(* END_IF *)
#105					JMP		$label4	{LNXT:1|53|-1}
(-) INT
05D4458C  E9 E5 00 00 00                jmp 05D44676H

#106		
#107		$label6:
#108		
#109					(* IF Fault_B AND Avto_B AND NOT Motor_A AND NOT Motor_C *)
#110					LD		Motor_C	{LNXT:41|-1|-1}
(*) UNDEF
05D44591  33 C0                         xor eax, eax
05D44593  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+2

#111					NOT	{LNXT:41|-1|-1}
(*) BOOL
05D44599  84 C0                         test al, al
05D4459B  0F 94 C0                      sete al

#112					AND(		Motor_A	{LNXT:41|-1|-1}
(*) BOOL
05D4459E  50                            push eax
05D4459F  33 C0                         xor eax, eax
05D445A1  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+0

#113					NOT	{LNXT:41|-1|-1}
(*) BOOL
05D445A7  84 C0                         test al, al
05D445A9  0F 94 C0                      sete al

#114					AND(		Fault_B	{LNXT:41|-1|-1}
(*) BOOL
05D445AC  50                            push eax
05D445AD  33 C0                         xor eax, eax
05D445AF  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+31

#115					NOT	{LNXT:41|-1|-1}
(*) BOOL
05D445B5  84 C0                         test al, al
05D445B7  0F 94 C0                      sete al

#116					AND		Avto_B	{LNXT:41|-1|-1}
(*) BOOL
05D445BA  33 C9                         xor ecx, ecx
05D445BC  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+32
05D445C2  23 C1                         and eax, ecx

#117					)	{LNXT:41|-1|-1}
(*) BOOL
05D445C4  8B C8                         mov ecx, eax
05D445C6  58                            pop eax
05D445C7  23 C1                         and eax, ecx

#118					)	{LNXT:41|-1|-1}
(*) BOOL
05D445C9  8B C8                         mov ecx, eax
05D445CB  58                            pop eax
05D445CC  23 C1                         and eax, ecx

#119					JMPCN	$label9	{LNXT:41|42|53}
(-) BOOL
05D445CE  84 C0                         test al, al
05D445D0  90 74 2E 90 90 90             je 05D44601H

#120		
#121					(* THEN *)
#122		
#123						(* Motor_B := TRUE; *)
#124						MOVE		TRUE,Motor_B	{LNXT:42|43|-1}
(*) BOOL
05D445D6  B8 01 00 00 00                mov eax, 01H
05D445DB  84 C0                         test al, al
05D445DD  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+1

#125		
#126						(* Rotationnumber := (Rotationnumber + 1) MOD 3; *)
#127						LD		Rotationnumber	{LNXT:43|53|-1}
(*) UNDEF
05D445E4  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+28

#128						ADD		1	{LNXT:43|53|-1}
(*) INT
05D445EB  05 01 00 00 00                add eax, 1

#129						MOD		3	{LNXT:43|53|-1}
(*) INT
05D445F0  99                            cdq
05D445F1  B9 03 00 00 00                mov ecx, 3
05D445F6  F7 F9                         idiv ecx
05D445F8  8B C2                         mov eax, edx

#130						ST		Rotationnumber	{LNXT:43|53|-1}
(*) INT
05D445FA  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+28

#131		
#132		$label9:
#133					(* END_IF *)
#134					JMP		$label4	{LNXT:1|53|-1}
(-) INT
05D44601  EB 73 90 90 90                jmp 05D44676H

#135		
#136		$label7:
#137		
#138					(* IF Fault_C AND Avto_C AND NOT Motor_A AND NOT Motor_B *)
#139					LD		Motor_B	{LNXT:46|-1|-1}
(*) UNDEF
05D44606  33 C0                         xor eax, eax
05D44608  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+1

#140					NOT	{LNXT:46|-1|-1}
(*) BOOL
05D4460E  84 C0                         test al, al
05D44610  0F 94 C0                      sete al

#141					AND(		Motor_A	{LNXT:46|-1|-1}
(*) BOOL
05D44613  50                            push eax
05D44614  33 C0                         xor eax, eax
05D44616  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+0

#142					NOT	{LNXT:46|-1|-1}
(*) BOOL
05D4461C  84 C0                         test al, al
05D4461E  0F 94 C0                      sete al

#143					AND(		Fault_C	{LNXT:46|-1|-1}
(*) BOOL
05D44621  50                            push eax
05D44622  33 C0                         xor eax, eax
05D44624  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+33

#144					NOT	{LNXT:46|-1|-1}
(*) BOOL
05D4462A  84 C0                         test al, al
05D4462C  0F 94 C0                      sete al

#145					AND		Avto_C	{LNXT:46|-1|-1}
(*) BOOL
05D4462F  33 C9                         xor ecx, ecx
05D44631  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+34
05D44637  23 C1                         and eax, ecx

#146					)	{LNXT:46|-1|-1}
(*) BOOL
05D44639  8B C8                         mov ecx, eax
05D4463B  58                            pop eax
05D4463C  23 C1                         and eax, ecx

#147					)	{LNXT:46|-1|-1}
(*) BOOL
05D4463E  8B C8                         mov ecx, eax
05D44640  58                            pop eax
05D44641  23 C1                         and eax, ecx

#148					JMPCN	$label10	{LNXT:46|47|53}
(-) BOOL
05D44643  84 C0                         test al, al
05D44645  90 74 2E 90 90 90             je 05D44676H

#149		
#150					(* THEN *)
#151		
#152						(* Motor_C := TRUE; *)
#153						MOVE		TRUE,Motor_C	{LNXT:47|48|-1}
(*) BOOL
05D4464B  B8 01 00 00 00                mov eax, 01H
05D44650  84 C0                         test al, al
05D44652  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+2

#154		
#155						(* Rotationnumber := (Rotationnumber + 1) MOD 3; *)
#156						LD		Rotationnumber	{LNXT:48|53|-1}
(*) UNDEF
05D44659  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+28

#157						ADD		1	{LNXT:48|53|-1}
(*) INT
05D44660  05 01 00 00 00                add eax, 1

#158						MOD		3	{LNXT:48|53|-1}
(*) INT
05D44665  99                            cdq
05D44666  B9 03 00 00 00                mov ecx, 3
05D4466B  F7 F9                         idiv ecx
05D4466D  8B C2                         mov eax, edx

#159						ST		Rotationnumber	{LNXT:48|53|-1}
(*) INT
05D4466F  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+28

#160		
#161		$label10:
#162					(* END_IF *)
#163		
#164		$label4:
#165		
#166				(* END_CASE *)
#167		
#168		
#169				(* IF Fault_A or NOT Avto_A *)
#170				LD		Avto_A	{LNXT:53|-1|-1}
(*) UNDEF
05D44676  33 C0                         xor eax, eax
05D44678  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+30

#171				NOT	{LNXT:53|-1|-1}
(*) BOOL
05D4467E  84 C0                         test al, al
05D44680  0F 94 C0                      sete al

#172				OR		Fault_A	{LNXT:53|-1|-1}
(*) BOOL
05D44683  33 C9                         xor ecx, ecx
05D44685  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+23
05D4468B  0B C1                         or eax, ecx

#173				JMPCN	$label11	{LNXT:53|54|56}
(-) BOOL
05D4468D  84 C0                         test al, al
05D4468F  90 74 11 90 90 90             je 05D446A3H

#174		
#175				(* THEN *)
#176		
#177					(* Motor_A := False; *)
#178					MOVE		False,Motor_A	{LNXT:54|56|-1}
(*) BOOL
05D44695  B8 00 00 00 00                mov eax, 00H
05D4469A  84 C0                         test al, al
05D4469C  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+0

#179		
#180		$label11:
#181				(* END_IF *)
#182		
#183		
#184				(* IF Fault_B or NOT Avto_B *)
#185				LD		Avto_B	{LNXT:56|-1|-1}
(*) UNDEF
05D446A3  33 C0                         xor eax, eax
05D446A5  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+32

#186				NOT	{LNXT:56|-1|-1}
(*) BOOL
05D446AB  84 C0                         test al, al
05D446AD  0F 94 C0                      sete al

#187				OR		Fault_B	{LNXT:56|-1|-1}
(*) BOOL
05D446B0  33 C9                         xor ecx, ecx
05D446B2  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+31
05D446B8  0B C1                         or eax, ecx

#188				JMPCN	$label12	{LNXT:56|57|59}
(-) BOOL
05D446BA  84 C0                         test al, al
05D446BC  90 74 11 90 90 90             je 05D446D0H

#189		
#190				(* THEN *)
#191		
#192					(* Motor_B := False; *)
#193					MOVE		False,Motor_B	{LNXT:57|59|-1}
(*) BOOL
05D446C2  B8 00 00 00 00                mov eax, 00H
05D446C7  84 C0                         test al, al
05D446C9  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+1

#194		
#195		$label12:
#196				(* END_IF *)
#197		
#198		
#199				(* IF Fault_C or NOT Avto_C *)
#200				LD		Avto_C	{LNXT:59|-1|-1}
(*) UNDEF
05D446D0  33 C0                         xor eax, eax
05D446D2  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+34

#201				NOT	{LNXT:59|-1|-1}
(*) BOOL
05D446D8  84 C0                         test al, al
05D446DA  0F 94 C0                      sete al

#202				OR		Fault_C	{LNXT:59|-1|-1}
(*) BOOL
05D446DD  33 C9                         xor ecx, ecx
05D446DF  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+33
05D446E5  0B C1                         or eax, ecx

#203				JMPCN	$label13	{LNXT:59|60|70}
(-) BOOL
05D446E7  84 C0                         test al, al
05D446E9  90 74 11 90 90 90             je 05D446FDH

#204		
#205				(* THEN *)
#206		
#207					(* Motor_C := False; *)
#208					MOVE		False,Motor_C	{LNXT:60|70|-1}
(*) BOOL
05D446EF  B8 00 00 00 00                mov eax, 00H
05D446F4  84 C0                         test al, al
05D446F6  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+2

#209		
#210		$label13:
#211				(* END_IF *)
#212		
#213		$label3:
#214			(* END_IF *)
#215		
#216		
#217			(* IF Tank_Level >= Max_Level_1 AND NOT RotationMode AND NOT FastRunMode *)
#218			LD		FastRunMode	{LNXT:70|-1|-1}
(*) UNDEF
05D446FD  33 C0                         xor eax, eax
05D446FF  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+22

#219			NOT	{LNXT:70|-1|-1}
(*) BOOL
05D44705  84 C0                         test al, al
05D44707  0F 94 C0                      sete al

#220			AND(		RotationMode	{LNXT:70|-1|-1}
(*) BOOL
05D4470A  50                            push eax
05D4470B  33 C0                         xor eax, eax
05D4470D  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+17

#221			NOT	{LNXT:70|-1|-1}
(*) BOOL
05D44713  84 C0                         test al, al
05D44715  0F 94 C0                      sete al

#222			AND(		Tank_Level	{LNXT:70|-1|-1}
(*) BOOL
05D44718  50                            push eax
05D44719  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+24

#223			GE		Max_Level_1	{LNXT:70|-1|-1}
(*) INT
05D44720  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; $$DATA$$+26
05D44727  3B C1                         cmp eax, ecx
05D44729  0F 9D C0                      setge al
05D4472C  25 FF 00 00 00                and eax, 0FFh

#224			)	{LNXT:70|-1|-1}
(*) BOOL
05D44731  8B C8                         mov ecx, eax
05D44733  58                            pop eax
05D44734  23 C1                         and eax, ecx

#225			)	{LNXT:70|-1|-1}
(*) BOOL
05D44736  8B C8                         mov ecx, eax
05D44738  58                            pop eax
05D44739  23 C1                         and eax, ecx

#226			JMPCN	$label14	{LNXT:70|73|101}
(-) BOOL
05D4473B  84 C0                         test al, al
05D4473D  0F 84 E3 01 00 00             je 05D44926H

#227		
#228			(* THEN *)
#229		
#230		
#231				(* CASE PriorityMotor OF *)
#232		
#233				(* 0: *)
#234				LD		PriorityMotor	{LNXT:73|-1|-1}
(*) UNDEF
05D44743  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+20

#235				EQ		0	{LNXT:73|-1|-1}
(*) INT
05D4474A  3D 00 00 00 00                cmp eax, 0
05D4474F  0F 94 C0                      sete al
05D44752  25 FF 00 00 00                and eax, 0FFh

#236				JMPC		$label16	{LNXT:73|74|77}
(-) BOOL
05D44757  84 C0                         test al, al
05D44759  90 75 40 90 90 90             jne 05D4479CH

#237		
#238				(* 1: *)
#239				LD		PriorityMotor	{LNXT:77|-1|-1}
(*) UNDEF
05D4475F  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+20

#240				EQ		1	{LNXT:77|-1|-1}
(*) INT
05D44766  3D 01 00 00 00                cmp eax, 1
05D4476B  0F 94 C0                      sete al
05D4476E  25 FF 00 00 00                and eax, 0FFh

#241				JMPC		$label17	{LNXT:77|78|81}
(-) BOOL
05D44773  84 C0                         test al, al
05D44775  90 75 7C 90 90 90             jne 05D447F4H

#242		
#243				(* 2: *)
#244				LD		PriorityMotor	{LNXT:81|-1|-1}
(*) UNDEF
05D4477B  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+20

#245				EQ		2	{LNXT:81|-1|-1}
(*) INT
05D44782  3D 02 00 00 00                cmp eax, 2
05D44787  0F 94 C0                      sete al
05D4478A  25 FF 00 00 00                and eax, 0FFh

#246				JMPC		$label18	{LNXT:81|82|87}
(-) BOOL
05D4478F  84 C0                         test al, al
05D44791  0F 85 B5 00 00 00             jne 05D4484CH

#247				JMP		$label15	{LNXT:81|82|87}
(-) BOOL
05D44797  E9 03 01 00 00                jmp 05D4489FH

#248		
#249				(* Istruzioni di ciascun CASE: *)
#250		
#251		$label16:
#252		
#253					(* IF Fault_A AND Avto_A AND NOT Motor_B AND NOT Motor_C *)
#254					LD		Motor_C	{LNXT:74|-1|-1}
(*) UNDEF
05D4479C  33 C0                         xor eax, eax
05D4479E  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+2

#255					NOT	{LNXT:74|-1|-1}
(*) BOOL
05D447A4  84 C0                         test al, al
05D447A6  0F 94 C0                      sete al

#256					AND(		Motor_B	{LNXT:74|-1|-1}
(*) BOOL
05D447A9  50                            push eax
05D447AA  33 C0                         xor eax, eax
05D447AC  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+1

#257					NOT	{LNXT:74|-1|-1}
(*) BOOL
05D447B2  84 C0                         test al, al
05D447B4  0F 94 C0                      sete al

#258					AND(		Fault_A	{LNXT:74|-1|-1}
(*) BOOL
05D447B7  50                            push eax
05D447B8  33 C0                         xor eax, eax
05D447BA  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+23

#259					NOT	{LNXT:74|-1|-1}
(*) BOOL
05D447C0  84 C0                         test al, al
05D447C2  0F 94 C0                      sete al

#260					AND		Avto_A	{LNXT:74|-1|-1}
(*) BOOL
05D447C5  33 C9                         xor ecx, ecx
05D447C7  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+30
05D447CD  23 C1                         and eax, ecx

#261					)	{LNXT:74|-1|-1}
(*) BOOL
05D447CF  8B C8                         mov ecx, eax
05D447D1  58                            pop eax
05D447D2  23 C1                         and eax, ecx

#262					)	{LNXT:74|-1|-1}
(*) BOOL
05D447D4  8B C8                         mov ecx, eax
05D447D6  58                            pop eax
05D447D7  23 C1                         and eax, ecx

#263					JMPCN	$label19	{LNXT:74|75|87}
(-) BOOL
05D447D9  84 C0                         test al, al
05D447DB  90 74 11 90 90 90             je 05D447EFH

#264		
#265					(* THEN *)
#266		
#267						(* Motor_A := TRUE; *)
#268						MOVE		TRUE,Motor_A	{LNXT:75|87|-1}
(*) BOOL
05D447E1  B8 01 00 00 00                mov eax, 01H
05D447E6  84 C0                         test al, al
05D447E8  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+0

#269		
#270		$label19:
#271					(* END_IF *)
#272					JMP		$label15	{LNXT:1|87|-1}
(-) BOOL
05D447EF  E9 AB 00 00 00                jmp 05D4489FH

#273		
#274		$label17:
#275		
#276					(* IF Fault_B AND Avto_B AND NOT Motor_A AND NOT Motor_C *)
#277					LD		Motor_C	{LNXT:78|-1|-1}
(*) UNDEF
05D447F4  33 C0                         xor eax, eax
05D447F6  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+2

#278					NOT	{LNXT:78|-1|-1}
(*) BOOL
05D447FC  84 C0                         test al, al
05D447FE  0F 94 C0                      sete al

#279					AND(		Motor_A	{LNXT:78|-1|-1}
(*) BOOL
05D44801  50                            push eax
05D44802  33 C0                         xor eax, eax
05D44804  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+0

#280					NOT	{LNXT:78|-1|-1}
(*) BOOL
05D4480A  84 C0                         test al, al
05D4480C  0F 94 C0                      sete al

#281					AND(		Fault_B	{LNXT:78|-1|-1}
(*) BOOL
05D4480F  50                            push eax
05D44810  33 C0                         xor eax, eax
05D44812  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+31

#282					NOT	{LNXT:78|-1|-1}
(*) BOOL
05D44818  84 C0                         test al, al
05D4481A  0F 94 C0                      sete al

#283					AND		Avto_B	{LNXT:78|-1|-1}
(*) BOOL
05D4481D  33 C9                         xor ecx, ecx
05D4481F  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+32
05D44825  23 C1                         and eax, ecx

#284					)	{LNXT:78|-1|-1}
(*) BOOL
05D44827  8B C8                         mov ecx, eax
05D44829  58                            pop eax
05D4482A  23 C1                         and eax, ecx

#285					)	{LNXT:78|-1|-1}
(*) BOOL
05D4482C  8B C8                         mov ecx, eax
05D4482E  58                            pop eax
05D4482F  23 C1                         and eax, ecx

#286					JMPCN	$label20	{LNXT:78|79|87}
(-) BOOL
05D44831  84 C0                         test al, al
05D44833  90 74 11 90 90 90             je 05D44847H

#287		
#288					(* THEN *)
#289		
#290						(* Motor_B := TRUE; *)
#291						MOVE		TRUE,Motor_B	{LNXT:79|87|-1}
(*) BOOL
05D44839  B8 01 00 00 00                mov eax, 01H
05D4483E  84 C0                         test al, al
05D44840  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+1

#292		
#293		$label20:
#294					(* END_IF *)
#295					JMP		$label15	{LNXT:1|87|-1}
(-) BOOL
05D44847  EB 56 90 90 90                jmp 05D4489FH

#296		
#297		$label18:
#298		
#299					(* IF Fault_C AND Avto_C AND NOT Motor_A AND NOT Motor_B *)
#300					LD		Motor_B	{LNXT:82|-1|-1}
(*) UNDEF
05D4484C  33 C0                         xor eax, eax
05D4484E  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+1

#301					NOT	{LNXT:82|-1|-1}
(*) BOOL
05D44854  84 C0                         test al, al
05D44856  0F 94 C0                      sete al

#302					AND(		Motor_A	{LNXT:82|-1|-1}
(*) BOOL
05D44859  50                            push eax
05D4485A  33 C0                         xor eax, eax
05D4485C  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+0

#303					NOT	{LNXT:82|-1|-1}
(*) BOOL
05D44862  84 C0                         test al, al
05D44864  0F 94 C0                      sete al

#304					AND(		Fault_C	{LNXT:82|-1|-1}
(*) BOOL
05D44867  50                            push eax
05D44868  33 C0                         xor eax, eax
05D4486A  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+33

#305					NOT	{LNXT:82|-1|-1}
(*) BOOL
05D44870  84 C0                         test al, al
05D44872  0F 94 C0                      sete al

#306					AND		Avto_C	{LNXT:82|-1|-1}
(*) BOOL
05D44875  33 C9                         xor ecx, ecx
05D44877  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+34
05D4487D  23 C1                         and eax, ecx

#307					)	{LNXT:82|-1|-1}
(*) BOOL
05D4487F  8B C8                         mov ecx, eax
05D44881  58                            pop eax
05D44882  23 C1                         and eax, ecx

#308					)	{LNXT:82|-1|-1}
(*) BOOL
05D44884  8B C8                         mov ecx, eax
05D44886  58                            pop eax
05D44887  23 C1                         and eax, ecx

#309					JMPCN	$label21	{LNXT:82|83|87}
(-) BOOL
05D44889  84 C0                         test al, al
05D4488B  90 74 11 90 90 90             je 05D4489FH

#310		
#311					(* THEN *)
#312		
#313						(* Motor_C := TRUE; *)
#314						MOVE		TRUE,Motor_C	{LNXT:83|87|-1}
(*) BOOL
05D44891  B8 01 00 00 00                mov eax, 01H
05D44896  84 C0                         test al, al
05D44898  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+2

#315		
#316		$label21:
#317					(* END_IF *)
#318		
#319		$label15:
#320		
#321				(* END_CASE *)
#322		
#323		
#324				(* IF Fault_A or NOT Avto_A *)
#325				LD		Avto_A	{LNXT:87|-1|-1}
(*) UNDEF
05D4489F  33 C0                         xor eax, eax
05D448A1  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+30

#326				NOT	{LNXT:87|-1|-1}
(*) BOOL
05D448A7  84 C0                         test al, al
05D448A9  0F 94 C0                      sete al

#327				OR		Fault_A	{LNXT:87|-1|-1}
(*) BOOL
05D448AC  33 C9                         xor ecx, ecx
05D448AE  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+23
05D448B4  0B C1                         or eax, ecx

#328				JMPCN	$label22	{LNXT:87|88|90}
(-) BOOL
05D448B6  84 C0                         test al, al
05D448B8  90 74 11 90 90 90             je 05D448CCH

#329		
#330				(* THEN *)
#331		
#332					(* Motor_A := False; *)
#333					MOVE		False,Motor_A	{LNXT:88|90|-1}
(*) BOOL
05D448BE  B8 00 00 00 00                mov eax, 00H
05D448C3  84 C0                         test al, al
05D448C5  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+0

#334		
#335		$label22:
#336				(* END_IF *)
#337		
#338		
#339				(* IF Fault_B or NOT Avto_B *)
#340				LD		Avto_B	{LNXT:90|-1|-1}
(*) UNDEF
05D448CC  33 C0                         xor eax, eax
05D448CE  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+32

#341				NOT	{LNXT:90|-1|-1}
(*) BOOL
05D448D4  84 C0                         test al, al
05D448D6  0F 94 C0                      sete al

#342				OR		Fault_B	{LNXT:90|-1|-1}
(*) BOOL
05D448D9  33 C9                         xor ecx, ecx
05D448DB  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+31
05D448E1  0B C1                         or eax, ecx

#343				JMPCN	$label23	{LNXT:90|91|93}
(-) BOOL
05D448E3  84 C0                         test al, al
05D448E5  90 74 11 90 90 90             je 05D448F9H

#344		
#345				(* THEN *)
#346		
#347					(* Motor_B := False; *)
#348					MOVE		False,Motor_B	{LNXT:91|93|-1}
(*) BOOL
05D448EB  B8 00 00 00 00                mov eax, 00H
05D448F0  84 C0                         test al, al
05D448F2  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+1

#349		
#350		$label23:
#351				(* END_IF *)
#352		
#353		
#354				(* IF Fault_C or NOT Avto_C *)
#355				LD		Avto_C	{LNXT:93|-1|-1}
(*) UNDEF
05D448F9  33 C0                         xor eax, eax
05D448FB  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+34

#356				NOT	{LNXT:93|-1|-1}
(*) BOOL
05D44901  84 C0                         test al, al
05D44903  0F 94 C0                      sete al

#357				OR		Fault_C	{LNXT:93|-1|-1}
(*) BOOL
05D44906  33 C9                         xor ecx, ecx
05D44908  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+33
05D4490E  0B C1                         or eax, ecx

#358				JMPCN	$label24	{LNXT:93|94|101}
(-) BOOL
05D44910  84 C0                         test al, al
05D44912  90 74 11 90 90 90             je 05D44926H

#359		
#360				(* THEN *)
#361		
#362					(* Motor_C := False; *)
#363					MOVE		False,Motor_C	{LNXT:94|101|-1}
(*) BOOL
05D44918  B8 00 00 00 00                mov eax, 00H
05D4491D  84 C0                         test al, al
05D4491F  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+2

#364		
#365		$label24:
#366				(* END_IF *)
#367		
#368		$label14:
#369			(* END_IF *)
#370		
#371		
#372			(* IF RotationMode AND FastRunMode *)
#373			LD		RotationMode	{LNXT:101|-1|-1}
(*) UNDEF
05D44926  33 C0                         xor eax, eax
05D44928  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+17

#374			NOT	{LNXT:101|-1|-1}
(*) BOOL
05D4492E  84 C0                         test al, al
05D44930  0F 94 C0                      sete al

#375			AND		FastRunMode	{LNXT:101|-1|-1}
(*) BOOL
05D44933  33 C9                         xor ecx, ecx
05D44935  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+22
05D4493B  23 C1                         and eax, ecx

#376			JMPCN	$label25	{LNXT:101|104|222}
(-) BOOL
05D4493D  84 C0                         test al, al
05D4493F  0F 84 77 07 00 00             je 05D450BCH

#377		
#378			(* THEN *)
#379		
#380		
#381				(* CASE CurrentPump OF *)
#382		
#383				(* 1: *)
#384				LD		CurrentPump	{LNXT:105|-1|-1}
(*) UNDEF
05D44945  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+36

#385				EQ		1	{LNXT:105|-1|-1}
(*) INT
05D4494C  3D 01 00 00 00                cmp eax, 1
05D44951  0F 94 C0                      sete al
05D44954  25 FF 00 00 00                and eax, 0FFh

#386				JMPC		$label27	{LNXT:105|108|140}
(-) BOOL
05D44959  84 C0                         test al, al
05D4495B  90 75 40 90 90 90             jne 05D4499EH

#387		
#388				(* 2: *)
#389				LD		CurrentPump	{LNXT:140|-1|-1}
(*) UNDEF
05D44961  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+36

#390				EQ		2	{LNXT:140|-1|-1}
(*) INT
05D44968  3D 02 00 00 00                cmp eax, 2
05D4496D  0F 94 C0                      sete al
05D44970  25 FF 00 00 00                and eax, 0FFh

#391				JMPC		$label28	{LNXT:140|141|171}
(-) BOOL
05D44975  84 C0                         test al, al
05D44977  0F 85 55 02 00 00             jne 05D44BD2H

#392		
#393				(* 3: *)
#394				LD		CurrentPump	{LNXT:171|-1|-1}
(*) UNDEF
05D4497D  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+36

#395				EQ		3	{LNXT:171|-1|-1}
(*) INT
05D44984  3D 03 00 00 00                cmp eax, 3
05D44989  0F 94 C0                      sete al
05D4498C  25 FF 00 00 00                and eax, 0FFh

#396				JMPC		$label29	{LNXT:171|172|205}
(-) BOOL
05D44991  84 C0                         test al, al
05D44993  0F 85 6D 04 00 00             jne 05D44E06H

#397				JMP		$label26	{LNXT:171|172|205}
(-) BOOL
05D44999  E9 97 06 00 00                jmp 05D45035H

#398		
#399				(* Istruzioni di ciascun CASE: *)
#400		
#401		$label27:
#402		
#403					(* IF Tank_Level >= Max_Level_1 AND PriorityMotor = 0 *)
#404					LD		PriorityMotor	{LNXT:108|-1|-1}
(*) UNDEF
05D4499E  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+20

#405					EQ		0	{LNXT:108|-1|-1}
(*) INT
05D449A5  3D 00 00 00 00                cmp eax, 0
05D449AA  0F 94 C0                      sete al
05D449AD  25 FF 00 00 00                and eax, 0FFh

#406					AND(		Tank_Level	{LNXT:108|-1|-1}
(*) BOOL
05D449B2  50                            push eax
05D449B3  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+24

#407					GE		Max_Level_1	{LNXT:108|-1|-1}
(*) INT
05D449BA  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; $$DATA$$+26
05D449C1  3B C1                         cmp eax, ecx
05D449C3  0F 9D C0                      setge al
05D449C6  25 FF 00 00 00                and eax, 0FFh

#408					)	{LNXT:108|-1|-1}
(*) BOOL
05D449CB  8B C8                         mov ecx, eax
05D449CD  58                            pop eax
05D449CE  23 C1                         and eax, ecx

#409					JMPCN	$label30	{LNXT:108|109|112}
(-) BOOL
05D449D0  84 C0                         test al, al
05D449D2  90 74 33 90 90 90             je 05D44A08H

#410		
#411					(* THEN *)
#412		
#413						(* CurrentPump := ((CurrentPump) MOD 3) + 1; *)
#414						LD		CurrentPump	{LNXT:109|110|-1}
(*) UNDEF
05D449D8  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+36

#415						MOD		3	{LNXT:109|110|-1}
(*) INT
05D449DF  99                            cdq
05D449E0  B9 03 00 00 00                mov ecx, 3
05D449E5  F7 F9                         idiv ecx
05D449E7  8B C2                         mov eax, edx

#416						ADD		1	{LNXT:109|110|-1}
(*) INT
05D449E9  05 01 00 00 00                add eax, 1

#417						ST		CurrentPump	{LNXT:109|110|-1}
(*) INT
05D449EE  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+36

#418		
#419						(* Motor_A := TRUE; *)
#420						MOVE		TRUE,Motor_A	{LNXT:110|121|-1}
(*) INT
05D449F5  B8 01 00 00 00                mov eax, 01H
05D449FA  84 C0                         test al, al
05D449FC  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+0

#421						JMP		$label31	{LNXT:108|109|112}
(-) BOOL
05D44A03  E9 85 00 00 00                jmp 05D44A8DH

#422		$label30:
#423		
#424					(* ELSE *)
#425		
#426		
#427						(* IF TestRunActive_1 AND NOT TestRunRunning_1 *)
#428						LD		TestRunRunning_1	{LNXT:112|-1|-1}
(*) UNDEF
05D44A08  33 C0                         xor eax, eax
05D44A0A  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+35

#429						NOT	{LNXT:112|-1|-1}
(*) BOOL
05D44A10  84 C0                         test al, al
05D44A12  0F 94 C0                      sete al

#430						AND(		TestRunActive_1	{LNXT:112|-1|-1}
(*) BOOL
05D44A15  50                            push eax
05D44A16  33 C0                         xor eax, eax
05D44A18  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+38

#431						NOT	{LNXT:112|-1|-1}
(*) BOOL
05D44A1E  84 C0                         test al, al
05D44A20  0F 94 C0                      sete al

#432						)	{LNXT:112|-1|-1}
(*) BOOL
05D44A23  8B C8                         mov ecx, eax
05D44A25  58                            pop eax
05D44A26  23 C1                         and eax, ecx

#433						JMPCN	$label32	{LNXT:112|113|121}
(-) BOOL
05D44A28  84 C0                         test al, al
05D44A2A  90 74 60 90 90 90             je 05D44A8DH

#434		
#435						(* THEN *)
#436		
#437							(* PumpIntervalTimer_1 *)
#438							MOVE		TRUE,PumpIntervalTimer_1.IN	{LNXT:113|-1|-1}
(*) BOOL
05D44A30  B8 01 00 00 00                mov eax, 01H
05D44A35  84 C0                         test al, al
05D44A37  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+44

#439							MOVE		5000,PumpIntervalTimer_1.PT	{LNXT:113|-1|-1}
(*) BOOL
05D44A3E  B8 88 13 00 00                mov eax, 1388H
05D44A43  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+45

#440							CAL		PumpIntervalTimer_1	{LNXT:113|114|-1}
(*) UDINT
05D44A49  50                            push eax
05D44A4A  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+40
05D44A4F  E8 9C F8 FF FF                call 05D442F0H ; $$CODE$$+17136
05D44A54  58                            pop eax

#441		
#442		
#443							(* IF PumpIntervalTimer_1.Q *)
#444							LD		PumpIntervalTimer_1.Q	{LNXT:114|-1|-1}
(*) UNDEF
05D44A55  33 C0                         xor eax, eax
05D44A57  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+49

#445							JMPCN	$label33	{LNXT:114|115|121}
(-) BOOL
05D44A5D  84 C0                         test al, al
05D44A5F  90 74 2B 90 90 90             je 05D44A8DH

#446		
#447							(* THEN *)
#448		
#449								(* TestRunActive_1 := TRUE; *)
#450								MOVE		TRUE,TestRunActive_1	{LNXT:115|116|-1}
(*) BOOL
05D44A65  B8 01 00 00 00                mov eax, 01H
05D44A6A  84 C0                         test al, al
05D44A6C  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+38

#451		
#452								(* PumpIntervalTimer_1 *)
#453								MOVE		FALSE,PumpIntervalTimer_1.IN	{LNXT:116|-1|-1}
(*) BOOL
05D44A73  B8 00 00 00 00                mov eax, 00H
05D44A78  84 C0                         test al, al
05D44A7A  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+44

#454								CAL		PumpIntervalTimer_1	{LNXT:116|121|-1}
(*) BOOL
05D44A81  50                            push eax
05D44A82  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+40
05D44A87  E8 64 F8 FF FF                call 05D442F0H ; $$CODE$$+17136
05D44A8C  58                            pop eax

#455		
#456		$label33:
#457							(* END_IF *)
#458		
#459		$label32:
#460						(* END_IF *)
#461		
#462		$label31:
#463					(* END_IF *)
#464		
#465		
#466					(* IF TestRunActive_1 *)
#467					LD		TestRunActive_1	{LNXT:121|-1|-1}
(*) UNDEF
05D44A8D  33 C0                         xor eax, eax
05D44A8F  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+38

#468					JMPCN	$label34	{LNXT:121|122|205}
(-) BOOL
05D44A95  84 C0                         test al, al
05D44A97  0F 84 30 01 00 00             je 05D44BCDH

#469		
#470					(* THEN *)
#471		
#472		
#473						(* IF TestRunRunning_1 *)
#474						LD		TestRunRunning_1	{LNXT:122|-1|-1}
(*) UNDEF
05D44A9D  33 C0                         xor eax, eax
05D44A9F  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+35

#475						NOT	{LNXT:122|-1|-1}
(*) BOOL
05D44AA5  84 C0                         test al, al
05D44AA7  0F 94 C0                      sete al

#476						JMPCN	$label35	{LNXT:122|123|126}
(-) BOOL
05D44AAA  84 C0                         test al, al
05D44AAC  90 74 11 90 90 90             je 05D44AC0H

#477		
#478						(* THEN *)
#479		
#480							(* TestRunRunning_1 := TRUE; *)
#481							MOVE		TRUE,TestRunRunning_1	{LNXT:123|126|-1}
(*) BOOL
05D44AB2  B8 01 00 00 00                mov eax, 01H
05D44AB7  84 C0                         test al, al
05D44AB9  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+35

#482		
#483		$label35:
#484						(* END_IF *)
#485		
#486		
#487						(* IF TestRunRunning_1 AND Tank_Level < Max_Level_2 And Not Fault_A AND Avto_A *)
#488						LD		Fault_A	{LNXT:126|-1|-1}
(*) UNDEF
05D44AC0  33 C0                         xor eax, eax
05D44AC2  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+23

#489						NOT	{LNXT:126|-1|-1}
(*) BOOL
05D44AC8  84 C0                         test al, al
05D44ACA  0F 94 C0                      sete al

#490						AND(		Tank_Level	{LNXT:126|-1|-1}
(*) BOOL
05D44ACD  50                            push eax
05D44ACE  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+24

#491						LT		Max_Level_2	{LNXT:126|-1|-1}
(*) INT
05D44AD5  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; $$DATA$$+62
05D44ADC  3B C1                         cmp eax, ecx
05D44ADE  0F 9C C0                      setl al
05D44AE1  25 FF 00 00 00                and eax, 0FFh

#492						AND		TestRunRunning_1	{LNXT:126|-1|-1}
(*) BOOL
05D44AE6  33 C9                         xor ecx, ecx
05D44AE8  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+35
05D44AEE  23 C1                         and eax, ecx

#493						)	{LNXT:126|-1|-1}
(*) BOOL
05D44AF0  8B C8                         mov ecx, eax
05D44AF2  58                            pop eax
05D44AF3  23 C1                         and eax, ecx

#494						AND		Avto_A	{LNXT:126|-1|-1}
(*) BOOL
05D44AF5  33 C9                         xor ecx, ecx
05D44AF7  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+30
05D44AFD  23 C1                         and eax, ecx

#495						JMPCN	$label36	{LNXT:126|127|205}
(-) BOOL
05D44AFF  84 C0                         test al, al
05D44B01  0F 84 C6 00 00 00             je 05D44BCDH

#496		
#497						(* THEN *)
#498		
#499							(* PumpRunTimer_1 *)
#500							LD		TestRunActive_1	{LNXT:127|-1|-1}
(*) UNDEF
05D44B07  33 C0                         xor eax, eax
05D44B09  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+38

#501							AND		TestRunRunning_1	{LNXT:127|-1|-1}
(*) BOOL
05D44B0F  33 C9                         xor ecx, ecx
05D44B11  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+35
05D44B17  23 C1                         and eax, ecx

#502							ST		PumpRunTimer_1.IN	{LNXT:127|-1|-1}
(*) BOOL
05D44B19  84 C0                         test al, al
05D44B1B  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+68

#503							MOVE		5000,PumpRunTimer_1.PT	{LNXT:127|-1|-1}
(*) BOOL
05D44B22  B8 88 13 00 00                mov eax, 1388H
05D44B27  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+69

#504							CAL		PumpRunTimer_1	{LNXT:127|128|-1}
(*) UDINT
05D44B2D  50                            push eax
05D44B2E  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+64
05D44B33  E8 B8 F7 FF FF                call 05D442F0H ; $$CODE$$+17136
05D44B38  58                            pop eax

#505		
#506		
#507							(* IF PumpRunTimer_1.Q *)
#508							LD		PumpRunTimer_1.Q	{LNXT:128|-1|-1}
(*) UNDEF
05D44B39  33 C0                         xor eax, eax
05D44B3B  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+73

#509							NOT	{LNXT:128|-1|-1}
(*) BOOL
05D44B41  84 C0                         test al, al
05D44B43  0F 94 C0                      sete al

#510							JMPCN	$label37	{LNXT:128|129|131}
(-) BOOL
05D44B46  84 C0                         test al, al
05D44B48  90 74 16 90 90 90             je 05D44B61H

#511		
#512							(* THEN *)
#513		
#514								(* Motor_A := TRUE; *)
#515								MOVE		TRUE,Motor_A	{LNXT:129|205|-1}
(*) BOOL
05D44B4E  B8 01 00 00 00                mov eax, 01H
05D44B53  84 C0                         test al, al
05D44B55  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+0

#516								JMP		$label38	{LNXT:128|129|131}
(-) BOOL
05D44B5C  EB 6F 90 90 90                jmp 05D44BCDH

#517		$label37:
#518		
#519							(* ELSE *)
#520		
#521								(* Motor_A := FALSE; *)
#522								MOVE		FALSE,Motor_A	{LNXT:131|132|-1}
(*) BOOL
05D44B61  B8 00 00 00 00                mov eax, 00H
05D44B66  84 C0                         test al, al
05D44B68  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+0

#523		
#524								(* TestRunRunning_1 := FALSE; *)
#525								MOVE		FALSE,TestRunRunning_1	{LNXT:132|133|-1}
(*) BOOL
05D44B6F  B8 00 00 00 00                mov eax, 00H
05D44B74  84 C0                         test al, al
05D44B76  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+35

#526		
#527								(* TestRunActive_1 := FALSE; *)
#528								MOVE		FALSE,TestRunActive_1	{LNXT:133|134|-1}
(*) BOOL
05D44B7D  B8 00 00 00 00                mov eax, 00H
05D44B82  84 C0                         test al, al
05D44B84  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+38

#529		
#530								(* PumpRunTimer_1 *)
#531								MOVE		FALSE,PumpRunTimer_1.IN	{LNXT:134|-1|-1}
(*) BOOL
05D44B8B  B8 00 00 00 00                mov eax, 00H
05D44B90  84 C0                         test al, al
05D44B92  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+68

#532								MOVE		5000,PumpRunTimer_1.PT	{LNXT:134|-1|-1}
(*) BOOL
05D44B99  B8 88 13 00 00                mov eax, 1388H
05D44B9E  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+69

#533								CAL		PumpRunTimer_1	{LNXT:134|135|-1}
(*) UDINT
05D44BA4  50                            push eax
05D44BA5  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+64
05D44BAA  E8 41 F7 FF FF                call 05D442F0H ; $$CODE$$+17136
05D44BAF  58                            pop eax

#534		
#535								(* CurrentPump := ((CurrentPump) MOD 3) + 1; *)
#536								LD		CurrentPump	{LNXT:135|205|-1}
(*) UNDEF
05D44BB0  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+36

#537								MOD		3	{LNXT:135|205|-1}
(*) INT
05D44BB7  99                            cdq
05D44BB8  B9 03 00 00 00                mov ecx, 3
05D44BBD  F7 F9                         idiv ecx
05D44BBF  8B C2                         mov eax, edx

#538								ADD		1	{LNXT:135|205|-1}
(*) INT
05D44BC1  05 01 00 00 00                add eax, 1

#539								ST		CurrentPump	{LNXT:135|205|-1}
(*) INT
05D44BC6  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+36

#540		
#541		$label38:
#542							(* END_IF *)
#543		
#544		$label36:
#545						(* END_IF *)
#546		
#547		$label34:
#548					(* END_IF *)
#549					JMP		$label26	{LNXT:1|205|-1}
(-) INT
05D44BCD  E9 63 04 00 00                jmp 05D45035H

#550		
#551		$label28:
#552		
#553					(* IF Tank_Level >= Max_Level_1 AND PriorityMotor = 1 *)
#554					LD		PriorityMotor	{LNXT:141|-1|-1}
(*) UNDEF
05D44BD2  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+20

#555					EQ		1	{LNXT:141|-1|-1}
(*) INT
05D44BD9  3D 01 00 00 00                cmp eax, 1
05D44BDE  0F 94 C0                      sete al
05D44BE1  25 FF 00 00 00                and eax, 0FFh

#556					AND(		Tank_Level	{LNXT:141|-1|-1}
(*) BOOL
05D44BE6  50                            push eax
05D44BE7  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+24

#557					GE		Max_Level_1	{LNXT:141|-1|-1}
(*) INT
05D44BEE  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; $$DATA$$+26
05D44BF5  3B C1                         cmp eax, ecx
05D44BF7  0F 9D C0                      setge al
05D44BFA  25 FF 00 00 00                and eax, 0FFh

#558					)	{LNXT:141|-1|-1}
(*) BOOL
05D44BFF  8B C8                         mov ecx, eax
05D44C01  58                            pop eax
05D44C02  23 C1                         and eax, ecx

#559					JMPCN	$label39	{LNXT:141|142|145}
(-) BOOL
05D44C04  84 C0                         test al, al
05D44C06  90 74 33 90 90 90             je 05D44C3CH

#560		
#561					(* THEN *)
#562		
#563						(* CurrentPump := ((CurrentPump) MOD 3) + 1; *)
#564						LD		CurrentPump	{LNXT:142|143|-1}
(*) UNDEF
05D44C0C  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+36

#565						MOD		3	{LNXT:142|143|-1}
(*) INT
05D44C13  99                            cdq
05D44C14  B9 03 00 00 00                mov ecx, 3
05D44C19  F7 F9                         idiv ecx
05D44C1B  8B C2                         mov eax, edx

#566						ADD		1	{LNXT:142|143|-1}
(*) INT
05D44C1D  05 01 00 00 00                add eax, 1

#567						ST		CurrentPump	{LNXT:142|143|-1}
(*) INT
05D44C22  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+36

#568		
#569						(* Motor_B := TRUE; *)
#570						MOVE		TRUE,Motor_B	{LNXT:143|153|-1}
(*) INT
05D44C29  B8 01 00 00 00                mov eax, 01H
05D44C2E  84 C0                         test al, al
05D44C30  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+1

#571						JMP		$label40	{LNXT:141|142|145}
(-) BOOL
05D44C37  E9 85 00 00 00                jmp 05D44CC1H

#572		$label39:
#573		
#574					(* ELSE *)
#575		
#576		
#577						(* IF TestRunActive_2 AND NOT TestRunRunning_2 *)
#578						LD		TestRunRunning_2	{LNXT:145|-1|-1}
(*) UNDEF
05D44C3C  33 C0                         xor eax, eax
05D44C3E  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+39

#579						NOT	{LNXT:145|-1|-1}
(*) BOOL
05D44C44  84 C0                         test al, al
05D44C46  0F 94 C0                      sete al

#580						AND(		TestRunActive_2	{LNXT:145|-1|-1}
(*) BOOL
05D44C49  50                            push eax
05D44C4A  33 C0                         xor eax, eax
05D44C4C  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+86

#581						NOT	{LNXT:145|-1|-1}
(*) BOOL
05D44C52  84 C0                         test al, al
05D44C54  0F 94 C0                      sete al

#582						)	{LNXT:145|-1|-1}
(*) BOOL
05D44C57  8B C8                         mov ecx, eax
05D44C59  58                            pop eax
05D44C5A  23 C1                         and eax, ecx

#583						JMPCN	$label41	{LNXT:145|146|153}
(-) BOOL
05D44C5C  84 C0                         test al, al
05D44C5E  90 74 60 90 90 90             je 05D44CC1H

#584		
#585						(* THEN *)
#586		
#587							(* PumpIntervalTimer_2 *)
#588							MOVE		TRUE,PumpIntervalTimer_2.IN	{LNXT:146|-1|-1}
(*) BOOL
05D44C64  B8 01 00 00 00                mov eax, 01H
05D44C69  84 C0                         test al, al
05D44C6B  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+92

#589							MOVE		6000,PumpIntervalTimer_2.PT	{LNXT:146|-1|-1}
(*) BOOL
05D44C72  B8 70 17 00 00                mov eax, 1770H
05D44C77  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+93

#590							CAL		PumpIntervalTimer_2	{LNXT:146|147|-1}
(*) UDINT
05D44C7D  50                            push eax
05D44C7E  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+88
05D44C83  E8 68 F6 FF FF                call 05D442F0H ; $$CODE$$+17136
05D44C88  58                            pop eax

#591		
#592		
#593							(* IF PumpIntervalTimer_2.Q *)
#594							LD		PumpIntervalTimer_2.Q	{LNXT:147|-1|-1}
(*) UNDEF
05D44C89  33 C0                         xor eax, eax
05D44C8B  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+97

#595							JMPCN	$label42	{LNXT:147|148|153}
(-) BOOL
05D44C91  84 C0                         test al, al
05D44C93  90 74 2B 90 90 90             je 05D44CC1H

#596		
#597							(* THEN *)
#598		
#599								(* TestRunActive_2 := TRUE; *)
#600								MOVE		TRUE,TestRunActive_2	{LNXT:148|149|-1}
(*) BOOL
05D44C99  B8 01 00 00 00                mov eax, 01H
05D44C9E  84 C0                         test al, al
05D44CA0  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+86

#601		
#602								(* PumpIntervalTimer_2 *)
#603								MOVE		FALSE,PumpIntervalTimer_2.IN	{LNXT:149|-1|-1}
(*) BOOL
05D44CA7  B8 00 00 00 00                mov eax, 00H
05D44CAC  84 C0                         test al, al
05D44CAE  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+92

#604								CAL		PumpIntervalTimer_2	{LNXT:149|153|-1}
(*) BOOL
05D44CB5  50                            push eax
05D44CB6  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+88
05D44CBB  E8 30 F6 FF FF                call 05D442F0H ; $$CODE$$+17136
05D44CC0  58                            pop eax

#605		
#606		$label42:
#607							(* END_IF *)
#608		
#609		$label41:
#610						(* END_IF *)
#611		
#612		$label40:
#613					(* END_IF *)
#614		
#615		
#616					(* IF TestRunActive_2 *)
#617					LD		TestRunActive_2	{LNXT:153|-1|-1}
(*) UNDEF
05D44CC1  33 C0                         xor eax, eax
05D44CC3  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+86

#618					JMPCN	$label43	{LNXT:153|154|205}
(-) BOOL
05D44CC9  84 C0                         test al, al
05D44CCB  0F 84 30 01 00 00             je 05D44E01H

#619		
#620					(* THEN *)
#621		
#622		
#623						(* IF TestRunRunning_2 *)
#624						LD		TestRunRunning_2	{LNXT:154|-1|-1}
(*) UNDEF
05D44CD1  33 C0                         xor eax, eax
05D44CD3  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+39

#625						NOT	{LNXT:154|-1|-1}
(*) BOOL
05D44CD9  84 C0                         test al, al
05D44CDB  0F 94 C0                      sete al

#626						JMPCN	$label44	{LNXT:154|155|157}
(-) BOOL
05D44CDE  84 C0                         test al, al
05D44CE0  90 74 11 90 90 90             je 05D44CF4H

#627		
#628						(* THEN *)
#629		
#630							(* TestRunRunning_2 := TRUE; *)
#631							MOVE		TRUE,TestRunRunning_2	{LNXT:155|157|-1}
(*) BOOL
05D44CE6  B8 01 00 00 00                mov eax, 01H
05D44CEB  84 C0                         test al, al
05D44CED  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+39

#632		
#633		$label44:
#634						(* END_IF *)
#635		
#636		
#637						(* IF TestRunRunning_2 AND Tank_Level < Max_Level_2 And Not Fault_B AND Avto_B *)
#638						LD		Fault_B	{LNXT:157|-1|-1}
(*) UNDEF
05D44CF4  33 C0                         xor eax, eax
05D44CF6  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+31

#639						NOT	{LNXT:157|-1|-1}
(*) BOOL
05D44CFC  84 C0                         test al, al
05D44CFE  0F 94 C0                      sete al

#640						AND(		Tank_Level	{LNXT:157|-1|-1}
(*) BOOL
05D44D01  50                            push eax
05D44D02  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+24

#641						LT		Max_Level_2	{LNXT:157|-1|-1}
(*) INT
05D44D09  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; $$DATA$$+62
05D44D10  3B C1                         cmp eax, ecx
05D44D12  0F 9C C0                      setl al
05D44D15  25 FF 00 00 00                and eax, 0FFh

#642						AND		TestRunRunning_2	{LNXT:157|-1|-1}
(*) BOOL
05D44D1A  33 C9                         xor ecx, ecx
05D44D1C  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+39
05D44D22  23 C1                         and eax, ecx

#643						)	{LNXT:157|-1|-1}
(*) BOOL
05D44D24  8B C8                         mov ecx, eax
05D44D26  58                            pop eax
05D44D27  23 C1                         and eax, ecx

#644						AND		Avto_B	{LNXT:157|-1|-1}
(*) BOOL
05D44D29  33 C9                         xor ecx, ecx
05D44D2B  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+32
05D44D31  23 C1                         and eax, ecx

#645						JMPCN	$label45	{LNXT:157|158|205}
(-) BOOL
05D44D33  84 C0                         test al, al
05D44D35  0F 84 C6 00 00 00             je 05D44E01H

#646		
#647						(* THEN *)
#648		
#649							(* PumpRunTimer_2 *)
#650							LD		TestRunActive_2	{LNXT:158|-1|-1}
(*) UNDEF
05D44D3B  33 C0                         xor eax, eax
05D44D3D  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+86

#651							AND		TestRunRunning_2	{LNXT:158|-1|-1}
(*) BOOL
05D44D43  33 C9                         xor ecx, ecx
05D44D45  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+39
05D44D4B  23 C1                         and eax, ecx

#652							ST		PumpRunTimer_2.IN	{LNXT:158|-1|-1}
(*) BOOL
05D44D4D  84 C0                         test al, al
05D44D4F  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+114

#653							MOVE		6000,PumpRunTimer_2.PT	{LNXT:158|-1|-1}
(*) BOOL
05D44D56  B8 70 17 00 00                mov eax, 1770H
05D44D5B  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+115

#654							CAL		PumpRunTimer_2	{LNXT:158|159|-1}
(*) UDINT
05D44D61  50                            push eax
05D44D62  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+110
05D44D67  E8 84 F5 FF FF                call 05D442F0H ; $$CODE$$+17136
05D44D6C  58                            pop eax

#655		
#656		
#657							(* IF PumpRunTimer_2.Q *)
#658							LD		PumpRunTimer_2.Q	{LNXT:159|-1|-1}
(*) UNDEF
05D44D6D  33 C0                         xor eax, eax
05D44D6F  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+119

#659							NOT	{LNXT:159|-1|-1}
(*) BOOL
05D44D75  84 C0                         test al, al
05D44D77  0F 94 C0                      sete al

#660							JMPCN	$label46	{LNXT:159|160|162}
(-) BOOL
05D44D7A  84 C0                         test al, al
05D44D7C  90 74 16 90 90 90             je 05D44D95H

#661		
#662							(* THEN *)
#663		
#664								(* Motor_B := TRUE; *)
#665								MOVE		TRUE,Motor_B	{LNXT:160|205|-1}
(*) BOOL
05D44D82  B8 01 00 00 00                mov eax, 01H
05D44D87  84 C0                         test al, al
05D44D89  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+1

#666								JMP		$label47	{LNXT:159|160|162}
(-) BOOL
05D44D90  EB 6F 90 90 90                jmp 05D44E01H

#667		$label46:
#668		
#669							(* ELSE *)
#670		
#671								(* Motor_B := FALSE; *)
#672								MOVE		FALSE,Motor_B	{LNXT:162|163|-1}
(*) BOOL
05D44D95  B8 00 00 00 00                mov eax, 00H
05D44D9A  84 C0                         test al, al
05D44D9C  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+1

#673		
#674								(* TestRunRunning_2 := FALSE; *)
#675								MOVE		FALSE,TestRunRunning_2	{LNXT:163|164|-1}
(*) BOOL
05D44DA3  B8 00 00 00 00                mov eax, 00H
05D44DA8  84 C0                         test al, al
05D44DAA  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+39

#676		
#677								(* TestRunActive_2 := FALSE; *)
#678								MOVE		FALSE,TestRunActive_2	{LNXT:164|165|-1}
(*) BOOL
05D44DB1  B8 00 00 00 00                mov eax, 00H
05D44DB6  84 C0                         test al, al
05D44DB8  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+86

#679		
#680								(* PumpRunTimer_2 *)
#681								MOVE		FALSE,PumpRunTimer_2.IN	{LNXT:165|-1|-1}
(*) BOOL
05D44DBF  B8 00 00 00 00                mov eax, 00H
05D44DC4  84 C0                         test al, al
05D44DC6  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+114

#682								MOVE		6000,PumpRunTimer_2.PT	{LNXT:165|-1|-1}
(*) BOOL
05D44DCD  B8 70 17 00 00                mov eax, 1770H
05D44DD2  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+115

#683								CAL		PumpRunTimer_2	{LNXT:165|166|-1}
(*) UDINT
05D44DD8  50                            push eax
05D44DD9  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+110
05D44DDE  E8 0D F5 FF FF                call 05D442F0H ; $$CODE$$+17136
05D44DE3  58                            pop eax

#684		
#685								(* CurrentPump := ((CurrentPump) MOD 3) + 1; *)
#686								LD		CurrentPump	{LNXT:166|205|-1}
(*) UNDEF
05D44DE4  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+36

#687								MOD		3	{LNXT:166|205|-1}
(*) INT
05D44DEB  99                            cdq
05D44DEC  B9 03 00 00 00                mov ecx, 3
05D44DF1  F7 F9                         idiv ecx
05D44DF3  8B C2                         mov eax, edx

#688								ADD		1	{LNXT:166|205|-1}
(*) INT
05D44DF5  05 01 00 00 00                add eax, 1

#689								ST		CurrentPump	{LNXT:166|205|-1}
(*) INT
05D44DFA  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+36

#690		
#691		$label47:
#692							(* END_IF *)
#693		
#694		$label45:
#695						(* END_IF *)
#696		
#697		$label43:
#698					(* END_IF *)
#699					JMP		$label26	{LNXT:1|205|-1}
(-) INT
05D44E01  E9 2F 02 00 00                jmp 05D45035H

#700		
#701		$label29:
#702		
#703					(* IF Tank_Level >= Max_Level_1 AND PriorityMotor = 2 *)
#704					LD		PriorityMotor	{LNXT:172|-1|-1}
(*) UNDEF
05D44E06  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+20

#705					EQ		2	{LNXT:172|-1|-1}
(*) INT
05D44E0D  3D 02 00 00 00                cmp eax, 2
05D44E12  0F 94 C0                      sete al
05D44E15  25 FF 00 00 00                and eax, 0FFh

#706					AND(		Tank_Level	{LNXT:172|-1|-1}
(*) BOOL
05D44E1A  50                            push eax
05D44E1B  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+24

#707					GE		Max_Level_1	{LNXT:172|-1|-1}
(*) INT
05D44E22  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; $$DATA$$+26
05D44E29  3B C1                         cmp eax, ecx
05D44E2B  0F 9D C0                      setge al
05D44E2E  25 FF 00 00 00                and eax, 0FFh

#708					)	{LNXT:172|-1|-1}
(*) BOOL
05D44E33  8B C8                         mov ecx, eax
05D44E35  58                            pop eax
05D44E36  23 C1                         and eax, ecx

#709					JMPCN	$label48	{LNXT:172|173|176}
(-) BOOL
05D44E38  84 C0                         test al, al
05D44E3A  90 74 33 90 90 90             je 05D44E70H

#710		
#711					(* THEN *)
#712		
#713						(* CurrentPump := ((CurrentPump) MOD 3) + 1; *)
#714						LD		CurrentPump	{LNXT:173|174|-1}
(*) UNDEF
05D44E40  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+36

#715						MOD		3	{LNXT:173|174|-1}
(*) INT
05D44E47  99                            cdq
05D44E48  B9 03 00 00 00                mov ecx, 3
05D44E4D  F7 F9                         idiv ecx
05D44E4F  8B C2                         mov eax, edx

#716						ADD		1	{LNXT:173|174|-1}
(*) INT
05D44E51  05 01 00 00 00                add eax, 1

#717						ST		CurrentPump	{LNXT:173|174|-1}
(*) INT
05D44E56  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+36

#718		
#719						(* Motor_C := TRUE; *)
#720						MOVE		TRUE,Motor_C	{LNXT:174|184|-1}
(*) INT
05D44E5D  B8 01 00 00 00                mov eax, 01H
05D44E62  84 C0                         test al, al
05D44E64  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+2

#721						JMP		$label49	{LNXT:172|173|176}
(-) BOOL
05D44E6B  E9 85 00 00 00                jmp 05D44EF5H

#722		$label48:
#723		
#724					(* ELSE *)
#725		
#726		
#727						(* IF TestRunActive_3 AND NOT TestRunRunning_3 *)
#728						LD		TestRunRunning_3	{LNXT:176|-1|-1}
(*) UNDEF
05D44E70  33 C0                         xor eax, eax
05D44E72  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+87

#729						NOT	{LNXT:176|-1|-1}
(*) BOOL
05D44E78  84 C0                         test al, al
05D44E7A  0F 94 C0                      sete al

#730						AND(		TestRunActive_3	{LNXT:176|-1|-1}
(*) BOOL
05D44E7D  50                            push eax
05D44E7E  33 C0                         xor eax, eax
05D44E80  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+132

#731						NOT	{LNXT:176|-1|-1}
(*) BOOL
05D44E86  84 C0                         test al, al
05D44E88  0F 94 C0                      sete al

#732						)	{LNXT:176|-1|-1}
(*) BOOL
05D44E8B  8B C8                         mov ecx, eax
05D44E8D  58                            pop eax
05D44E8E  23 C1                         and eax, ecx

#733						JMPCN	$label50	{LNXT:176|177|184}
(-) BOOL
05D44E90  84 C0                         test al, al
05D44E92  90 74 60 90 90 90             je 05D44EF5H

#734		
#735						(* THEN *)
#736		
#737							(* PumpIntervalTimer_3 *)
#738							MOVE		TRUE,PumpIntervalTimer_3.IN	{LNXT:177|-1|-1}
(*) BOOL
05D44E98  B8 01 00 00 00                mov eax, 01H
05D44E9D  84 C0                         test al, al
05D44E9F  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+138

#739							MOVE		7000,PumpIntervalTimer_3.PT	{LNXT:177|-1|-1}
(*) BOOL
05D44EA6  B8 58 1B 00 00                mov eax, 1B58H
05D44EAB  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+139

#740							CAL		PumpIntervalTimer_3	{LNXT:177|178|-1}
(*) UDINT
05D44EB1  50                            push eax
05D44EB2  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+134
05D44EB7  E8 34 F4 FF FF                call 05D442F0H ; $$CODE$$+17136
05D44EBC  58                            pop eax

#741		
#742		
#743							(* IF PumpIntervalTimer_3.Q *)
#744							LD		PumpIntervalTimer_3.Q	{LNXT:178|-1|-1}
(*) UNDEF
05D44EBD  33 C0                         xor eax, eax
05D44EBF  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+143

#745							JMPCN	$label51	{LNXT:178|179|184}
(-) BOOL
05D44EC5  84 C0                         test al, al
05D44EC7  90 74 2B 90 90 90             je 05D44EF5H

#746		
#747							(* THEN *)
#748		
#749								(* TestRunActive_3 := TRUE; *)
#750								MOVE		TRUE,TestRunActive_3	{LNXT:179|180|-1}
(*) BOOL
05D44ECD  B8 01 00 00 00                mov eax, 01H
05D44ED2  84 C0                         test al, al
05D44ED4  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+132

#751		
#752								(* PumpIntervalTimer_3 *)
#753								MOVE		FALSE,PumpIntervalTimer_3.IN	{LNXT:180|-1|-1}
(*) BOOL
05D44EDB  B8 00 00 00 00                mov eax, 00H
05D44EE0  84 C0                         test al, al
05D44EE2  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+138

#754								CAL		PumpIntervalTimer_3	{LNXT:180|184|-1}
(*) BOOL
05D44EE9  50                            push eax
05D44EEA  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+134
05D44EEF  E8 FC F3 FF FF                call 05D442F0H ; $$CODE$$+17136
05D44EF4  58                            pop eax

#755		
#756		$label51:
#757							(* END_IF *)
#758		
#759		$label50:
#760						(* END_IF *)
#761		
#762		$label49:
#763					(* END_IF *)
#764		
#765		
#766					(* IF TestRunActive_3 *)
#767					LD		TestRunActive_3	{LNXT:184|-1|-1}
(*) UNDEF
05D44EF5  33 C0                         xor eax, eax
05D44EF7  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+132

#768					JMPCN	$label52	{LNXT:184|185|205}
(-) BOOL
05D44EFD  84 C0                         test al, al
05D44EFF  0F 84 30 01 00 00             je 05D45035H

#769		
#770					(* THEN *)
#771		
#772		
#773						(* IF TestRunRunning_3 *)
#774						LD		TestRunRunning_3	{LNXT:185|-1|-1}
(*) UNDEF
05D44F05  33 C0                         xor eax, eax
05D44F07  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+87

#775						NOT	{LNXT:185|-1|-1}
(*) BOOL
05D44F0D  84 C0                         test al, al
05D44F0F  0F 94 C0                      sete al

#776						JMPCN	$label53	{LNXT:185|186|188}
(-) BOOL
05D44F12  84 C0                         test al, al
05D44F14  90 74 11 90 90 90             je 05D44F28H

#777		
#778						(* THEN *)
#779		
#780							(* TestRunRunning_3 := TRUE; *)
#781							MOVE		TRUE,TestRunRunning_3	{LNXT:186|188|-1}
(*) BOOL
05D44F1A  B8 01 00 00 00                mov eax, 01H
05D44F1F  84 C0                         test al, al
05D44F21  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+87

#782		
#783		$label53:
#784						(* END_IF *)
#785		
#786		
#787						(* IF TestRunRunning_3 AND Tank_Level < Max_Level_2 And Not Fault_C AND Avto_C *)
#788						LD		Fault_C	{LNXT:188|-1|-1}
(*) UNDEF
05D44F28  33 C0                         xor eax, eax
05D44F2A  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+33

#789						NOT	{LNXT:188|-1|-1}
(*) BOOL
05D44F30  84 C0                         test al, al
05D44F32  0F 94 C0                      sete al

#790						AND(		Tank_Level	{LNXT:188|-1|-1}
(*) BOOL
05D44F35  50                            push eax
05D44F36  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+24

#791						LT		Max_Level_2	{LNXT:188|-1|-1}
(*) INT
05D44F3D  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; $$DATA$$+62
05D44F44  3B C1                         cmp eax, ecx
05D44F46  0F 9C C0                      setl al
05D44F49  25 FF 00 00 00                and eax, 0FFh

#792						AND		TestRunRunning_3	{LNXT:188|-1|-1}
(*) BOOL
05D44F4E  33 C9                         xor ecx, ecx
05D44F50  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+87
05D44F56  23 C1                         and eax, ecx

#793						)	{LNXT:188|-1|-1}
(*) BOOL
05D44F58  8B C8                         mov ecx, eax
05D44F5A  58                            pop eax
05D44F5B  23 C1                         and eax, ecx

#794						AND		Avto_C	{LNXT:188|-1|-1}
(*) BOOL
05D44F5D  33 C9                         xor ecx, ecx
05D44F5F  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+34
05D44F65  23 C1                         and eax, ecx

#795						JMPCN	$label54	{LNXT:188|189|205}
(-) BOOL
05D44F67  84 C0                         test al, al
05D44F69  0F 84 C6 00 00 00             je 05D45035H

#796		
#797						(* THEN *)
#798		
#799							(* PumpRunTimer_3 *)
#800							LD		TestRunActive_3	{LNXT:189|-1|-1}
(*) UNDEF
05D44F6F  33 C0                         xor eax, eax
05D44F71  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+132

#801							AND		TestRunRunning_3	{LNXT:189|-1|-1}
(*) BOOL
05D44F77  33 C9                         xor ecx, ecx
05D44F79  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+87
05D44F7F  23 C1                         and eax, ecx

#802							ST		PumpRunTimer_3.IN	{LNXT:189|-1|-1}
(*) BOOL
05D44F81  84 C0                         test al, al
05D44F83  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+160

#803							MOVE		7000,PumpRunTimer_3.PT	{LNXT:189|-1|-1}
(*) BOOL
05D44F8A  B8 58 1B 00 00                mov eax, 1B58H
05D44F8F  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+161

#804							CAL		PumpRunTimer_3	{LNXT:189|190|-1}
(*) UDINT
05D44F95  50                            push eax
05D44F96  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+156
05D44F9B  E8 50 F3 FF FF                call 05D442F0H ; $$CODE$$+17136
05D44FA0  58                            pop eax

#805		
#806		
#807							(* IF PumpRunTimer_3.Q *)
#808							LD		PumpRunTimer_3.Q	{LNXT:190|-1|-1}
(*) UNDEF
05D44FA1  33 C0                         xor eax, eax
05D44FA3  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+165

#809							NOT	{LNXT:190|-1|-1}
(*) BOOL
05D44FA9  84 C0                         test al, al
05D44FAB  0F 94 C0                      sete al

#810							JMPCN	$label55	{LNXT:190|191|193}
(-) BOOL
05D44FAE  84 C0                         test al, al
05D44FB0  90 74 16 90 90 90             je 05D44FC9H

#811		
#812							(* THEN *)
#813		
#814								(* Motor_C := TRUE; *)
#815								MOVE		TRUE,Motor_C	{LNXT:191|205|-1}
(*) BOOL
05D44FB6  B8 01 00 00 00                mov eax, 01H
05D44FBB  84 C0                         test al, al
05D44FBD  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+2

#816								JMP		$label56	{LNXT:190|191|193}
(-) BOOL
05D44FC4  EB 6F 90 90 90                jmp 05D45035H

#817		$label55:
#818		
#819							(* ELSE *)
#820		
#821								(* Motor_C := FALSE; *)
#822								MOVE		FALSE,Motor_C	{LNXT:193|194|-1}
(*) BOOL
05D44FC9  B8 00 00 00 00                mov eax, 00H
05D44FCE  84 C0                         test al, al
05D44FD0  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+2

#823		
#824								(* TestRunRunning_3 := FALSE; *)
#825								MOVE		FALSE,TestRunRunning_3	{LNXT:194|195|-1}
(*) BOOL
05D44FD7  B8 00 00 00 00                mov eax, 00H
05D44FDC  84 C0                         test al, al
05D44FDE  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+87

#826		
#827								(* TestRunActive_3 := FALSE; *)
#828								MOVE		FALSE,TestRunActive_3	{LNXT:195|196|-1}
(*) BOOL
05D44FE5  B8 00 00 00 00                mov eax, 00H
05D44FEA  84 C0                         test al, al
05D44FEC  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+132

#829		
#830								(* PumpRunTimer_3 *)
#831								MOVE		FALSE,PumpRunTimer_3.IN	{LNXT:196|-1|-1}
(*) BOOL
05D44FF3  B8 00 00 00 00                mov eax, 00H
05D44FF8  84 C0                         test al, al
05D44FFA  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+160

#832								MOVE		7000,PumpRunTimer_3.PT	{LNXT:196|-1|-1}
(*) BOOL
05D45001  B8 58 1B 00 00                mov eax, 1B58H
05D45006  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+161

#833								CAL		PumpRunTimer_3	{LNXT:196|197|-1}
(*) UDINT
05D4500C  50                            push eax
05D4500D  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+156
05D45012  E8 D9 F2 FF FF                call 05D442F0H ; $$CODE$$+17136
05D45017  58                            pop eax

#834		
#835								(* CurrentPump := ((CurrentPump) MOD 3) + 1; *)
#836								LD		CurrentPump	{LNXT:197|205|-1}
(*) UNDEF
05D45018  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+36

#837								MOD		3	{LNXT:197|205|-1}
(*) INT
05D4501F  99                            cdq
05D45020  B9 03 00 00 00                mov ecx, 3
05D45025  F7 F9                         idiv ecx
05D45027  8B C2                         mov eax, edx

#838								ADD		1	{LNXT:197|205|-1}
(*) INT
05D45029  05 01 00 00 00                add eax, 1

#839								ST		CurrentPump	{LNXT:197|205|-1}
(*) INT
05D4502E  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+36

#840		
#841		$label56:
#842							(* END_IF *)
#843		
#844		$label54:
#845						(* END_IF *)
#846		
#847		$label52:
#848					(* END_IF *)
#849		
#850		$label26:
#851		
#852				(* END_CASE *)
#853		
#854		
#855				(* IF Fault_A or NOT Avto_A *)
#856				LD		Avto_A	{LNXT:205|-1|-1}
(*) UNDEF
05D45035  33 C0                         xor eax, eax
05D45037  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+30

#857				NOT	{LNXT:205|-1|-1}
(*) BOOL
05D4503D  84 C0                         test al, al
05D4503F  0F 94 C0                      sete al

#858				OR		Fault_A	{LNXT:205|-1|-1}
(*) BOOL
05D45042  33 C9                         xor ecx, ecx
05D45044  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+23
05D4504A  0B C1                         or eax, ecx

#859				JMPCN	$label57	{LNXT:205|206|208}
(-) BOOL
05D4504C  84 C0                         test al, al
05D4504E  90 74 11 90 90 90             je 05D45062H

#860		
#861				(* THEN *)
#862		
#863					(* Motor_A := False; *)
#864					MOVE		False,Motor_A	{LNXT:206|208|-1}
(*) BOOL
05D45054  B8 00 00 00 00                mov eax, 00H
05D45059  84 C0                         test al, al
05D4505B  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+0

#865		
#866		$label57:
#867				(* END_IF *)
#868		
#869		
#870				(* IF Fault_B or NOT Avto_B *)
#871				LD		Avto_B	{LNXT:208|-1|-1}
(*) UNDEF
05D45062  33 C0                         xor eax, eax
05D45064  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+32

#872				NOT	{LNXT:208|-1|-1}
(*) BOOL
05D4506A  84 C0                         test al, al
05D4506C  0F 94 C0                      sete al

#873				OR		Fault_B	{LNXT:208|-1|-1}
(*) BOOL
05D4506F  33 C9                         xor ecx, ecx
05D45071  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+31
05D45077  0B C1                         or eax, ecx

#874				JMPCN	$label58	{LNXT:208|209|211}
(-) BOOL
05D45079  84 C0                         test al, al
05D4507B  90 74 11 90 90 90             je 05D4508FH

#875		
#876				(* THEN *)
#877		
#878					(* Motor_B := False; *)
#879					MOVE		False,Motor_B	{LNXT:209|211|-1}
(*) BOOL
05D45081  B8 00 00 00 00                mov eax, 00H
05D45086  84 C0                         test al, al
05D45088  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+1

#880		
#881		$label58:
#882				(* END_IF *)
#883		
#884		
#885				(* IF Fault_C or NOT Avto_C *)
#886				LD		Avto_C	{LNXT:211|-1|-1}
(*) UNDEF
05D4508F  33 C0                         xor eax, eax
05D45091  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+34

#887				NOT	{LNXT:211|-1|-1}
(*) BOOL
05D45097  84 C0                         test al, al
05D45099  0F 94 C0                      sete al

#888				OR		Fault_C	{LNXT:211|-1|-1}
(*) BOOL
05D4509C  33 C9                         xor ecx, ecx
05D4509E  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+33
05D450A4  0B C1                         or eax, ecx

#889				JMPCN	$label59	{LNXT:211|212|222}
(-) BOOL
05D450A6  84 C0                         test al, al
05D450A8  90 74 11 90 90 90             je 05D450BCH

#890		
#891				(* THEN *)
#892		
#893					(* Motor_C := False; *)
#894					MOVE		False,Motor_C	{LNXT:212|222|-1}
(*) BOOL
05D450AE  B8 00 00 00 00                mov eax, 00H
05D450B3  84 C0                         test al, al
05D450B5  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+2

#895		
#896		$label59:
#897				(* END_IF *)
#898		
#899		$label25:
#900			(* END_IF *)
#901		
#902		
#903			(* IF Tank_Level >= Max_Level_2 AND Tank_Level < Max_Level_3 *)
#904			LD		Tank_Level	{LNXT:222|-1|-1}
(*) UNDEF
05D450BC  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+24

#905			LT		Max_Level_3	{LNXT:222|-1|-1}
(*) INT
05D450C3  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; $$DATA$$+178
05D450CA  3B C1                         cmp eax, ecx
05D450CC  0F 9C C0                      setl al
05D450CF  25 FF 00 00 00                and eax, 0FFh

#906			AND(		Tank_Level	{LNXT:222|-1|-1}
(*) BOOL
05D450D4  50                            push eax
05D450D5  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+24

#907			GE		Max_Level_2	{LNXT:222|-1|-1}
(*) INT
05D450DC  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; $$DATA$$+62
05D450E3  3B C1                         cmp eax, ecx
05D450E5  0F 9D C0                      setge al
05D450E8  25 FF 00 00 00                and eax, 0FFh

#908			)	{LNXT:222|-1|-1}
(*) BOOL
05D450ED  8B C8                         mov ecx, eax
05D450EF  58                            pop eax
05D450F0  23 C1                         and eax, ecx

#909			JMPCN	$label60	{LNXT:222|225|258}
(-) BOOL
05D450F2  84 C0                         test al, al
05D450F4  0F 84 DD 01 00 00             je 05D452D7H

#910		
#911			(* THEN *)
#912		
#913		
#914				(* IF MOTOR_A AND NOT MOTOR_B AND NOT MOTOR_C *)
#915				LD		MOTOR_C	{LNXT:225|-1|-1}
(*) UNDEF
05D450FA  33 C0                         xor eax, eax
05D450FC  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+2

#916				NOT	{LNXT:225|-1|-1}
(*) BOOL
05D45102  84 C0                         test al, al
05D45104  0F 94 C0                      sete al

#917				AND(		MOTOR_B	{LNXT:225|-1|-1}
(*) BOOL
05D45107  50                            push eax
05D45108  33 C0                         xor eax, eax
05D4510A  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+1

#918				NOT	{LNXT:225|-1|-1}
(*) BOOL
05D45110  84 C0                         test al, al
05D45112  0F 94 C0                      sete al

#919				AND		MOTOR_A	{LNXT:225|-1|-1}
(*) BOOL
05D45115  33 C9                         xor ecx, ecx
05D45117  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %Q1+0
05D4511D  23 C1                         and eax, ecx

#920				)	{LNXT:225|-1|-1}
(*) BOOL
05D4511F  8B C8                         mov ecx, eax
05D45121  58                            pop eax
05D45122  23 C1                         and eax, ecx

#921				JMPCN	$label61	{LNXT:225|226|236}
(-) BOOL
05D45124  84 C0                         test al, al
05D45126  90 74 70 90 90 90             je 05D45199H

#922		
#923				(* THEN *)
#924		
#925		
#926					(* IF Fault_B AND Avto_A *)
#927					LD		Fault_B	{LNXT:226|-1|-1}
(*) UNDEF
05D4512C  33 C0                         xor eax, eax
05D4512E  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+31

#928					NOT	{LNXT:226|-1|-1}
(*) BOOL
05D45134  84 C0                         test al, al
05D45136  0F 94 C0                      sete al

#929					AND		Avto_A	{LNXT:226|-1|-1}
(*) BOOL
05D45139  33 C9                         xor ecx, ecx
05D4513B  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+30
05D45141  23 C1                         and eax, ecx

#930					JMPCN	$label62	{LNXT:226|227|230}
(-) BOOL
05D45143  84 C0                         test al, al
05D45145  90 74 11 90 90 90             je 05D45159H

#931		
#932					(* THEN *)
#933		
#934						(* Motor_B:= TRUE; *)
#935						MOVE		TRUE,Motor_B	{LNXT:227|230|-1}
(*) BOOL
05D4514B  B8 01 00 00 00                mov eax, 01H
05D45150  84 C0                         test al, al
05D45152  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+1

#936		
#937		$label62:
#938					(* END_IF *)
#939		
#940		
#941					(* IF Fault_C AND Avto_C AND NOT MOTOR_B *)
#942					LD		MOTOR_B	{LNXT:230|-1|-1}
(*) UNDEF
05D45159  33 C0                         xor eax, eax
05D4515B  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+1

#943					NOT	{LNXT:230|-1|-1}
(*) BOOL
05D45161  84 C0                         test al, al
05D45163  0F 94 C0                      sete al

#944					AND(		Fault_C	{LNXT:230|-1|-1}
(*) BOOL
05D45166  50                            push eax
05D45167  33 C0                         xor eax, eax
05D45169  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+33

#945					NOT	{LNXT:230|-1|-1}
(*) BOOL
05D4516F  84 C0                         test al, al
05D45171  0F 94 C0                      sete al

#946					AND		Avto_C	{LNXT:230|-1|-1}
(*) BOOL
05D45174  33 C9                         xor ecx, ecx
05D45176  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+34
05D4517C  23 C1                         and eax, ecx

#947					)	{LNXT:230|-1|-1}
(*) BOOL
05D4517E  8B C8                         mov ecx, eax
05D45180  58                            pop eax
05D45181  23 C1                         and eax, ecx

#948					JMPCN	$label63	{LNXT:230|231|236}
(-) BOOL
05D45183  84 C0                         test al, al
05D45185  90 74 11 90 90 90             je 05D45199H

#949		
#950					(* THEN *)
#951		
#952						(* Motor_C:= TRUE; *)
#953						MOVE		TRUE,Motor_C	{LNXT:231|236|-1}
(*) BOOL
05D4518B  B8 01 00 00 00                mov eax, 01H
05D45190  84 C0                         test al, al
05D45192  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+2

#954		
#955		$label63:
#956					(* END_IF *)
#957		
#958		$label61:
#959				(* END_IF *)
#960		
#961		
#962				(* IF MOTOR_B AND NOT MOTOR_A AND NOT MOTOR_C *)
#963				LD		MOTOR_C	{LNXT:236|-1|-1}
(*) UNDEF
05D45199  33 C0                         xor eax, eax
05D4519B  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+2

#964				NOT	{LNXT:236|-1|-1}
(*) BOOL
05D451A1  84 C0                         test al, al
05D451A3  0F 94 C0                      sete al

#965				AND(		MOTOR_A	{LNXT:236|-1|-1}
(*) BOOL
05D451A6  50                            push eax
05D451A7  33 C0                         xor eax, eax
05D451A9  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+0

#966				NOT	{LNXT:236|-1|-1}
(*) BOOL
05D451AF  84 C0                         test al, al
05D451B1  0F 94 C0                      sete al

#967				AND		MOTOR_B	{LNXT:236|-1|-1}
(*) BOOL
05D451B4  33 C9                         xor ecx, ecx
05D451B6  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %Q1+1
05D451BC  23 C1                         and eax, ecx

#968				)	{LNXT:236|-1|-1}
(*) BOOL
05D451BE  8B C8                         mov ecx, eax
05D451C0  58                            pop eax
05D451C1  23 C1                         and eax, ecx

#969				JMPCN	$label64	{LNXT:236|237|245}
(-) BOOL
05D451C3  84 C0                         test al, al
05D451C5  90 74 70 90 90 90             je 05D45238H

#970		
#971				(* THEN *)
#972		
#973		
#974					(* IF Fault_C AND Avto_B *)
#975					LD		Fault_C	{LNXT:237|-1|-1}
(*) UNDEF
05D451CB  33 C0                         xor eax, eax
05D451CD  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+33

#976					NOT	{LNXT:237|-1|-1}
(*) BOOL
05D451D3  84 C0                         test al, al
05D451D5  0F 94 C0                      sete al

#977					AND		Avto_B	{LNXT:237|-1|-1}
(*) BOOL
05D451D8  33 C9                         xor ecx, ecx
05D451DA  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+32
05D451E0  23 C1                         and eax, ecx

#978					JMPCN	$label65	{LNXT:237|238|240}
(-) BOOL
05D451E2  84 C0                         test al, al
05D451E4  90 74 11 90 90 90             je 05D451F8H

#979		
#980					(* THEN *)
#981		
#982						(* Motor_C:= TRUE; *)
#983						MOVE		TRUE,Motor_C	{LNXT:238|240|-1}
(*) BOOL
05D451EA  B8 01 00 00 00                mov eax, 01H
05D451EF  84 C0                         test al, al
05D451F1  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+2

#984		
#985		$label65:
#986					(* END_IF *)
#987		
#988		
#989					(* IF Fault_A AND Avto_A AND NOT MOTOR_C *)
#990					LD		MOTOR_C	{LNXT:240|-1|-1}
(*) UNDEF
05D451F8  33 C0                         xor eax, eax
05D451FA  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+2

#991					NOT	{LNXT:240|-1|-1}
(*) BOOL
05D45200  84 C0                         test al, al
05D45202  0F 94 C0                      sete al

#992					AND(		Fault_A	{LNXT:240|-1|-1}
(*) BOOL
05D45205  50                            push eax
05D45206  33 C0                         xor eax, eax
05D45208  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+23

#993					NOT	{LNXT:240|-1|-1}
(*) BOOL
05D4520E  84 C0                         test al, al
05D45210  0F 94 C0                      sete al

#994					AND		Avto_A	{LNXT:240|-1|-1}
(*) BOOL
05D45213  33 C9                         xor ecx, ecx
05D45215  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+30
05D4521B  23 C1                         and eax, ecx

#995					)	{LNXT:240|-1|-1}
(*) BOOL
05D4521D  8B C8                         mov ecx, eax
05D4521F  58                            pop eax
05D45220  23 C1                         and eax, ecx

#996					JMPCN	$label66	{LNXT:240|241|245}
(-) BOOL
05D45222  84 C0                         test al, al
05D45224  90 74 11 90 90 90             je 05D45238H

#997		
#998					(* THEN *)
#999		
#1000						(* Motor_A:= TRUE; *)
#1001						MOVE		TRUE,Motor_A	{LNXT:241|245|-1}
(*) BOOL
05D4522A  B8 01 00 00 00                mov eax, 01H
05D4522F  84 C0                         test al, al
05D45231  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+0

#1002		
#1003		$label66:
#1004					(* END_IF *)
#1005		
#1006		$label64:
#1007				(* END_IF *)
#1008		
#1009		
#1010				(* IF MOTOR_C AND NOT MOTOR_A AND NOT MOTOR_B *)
#1011				LD		MOTOR_B	{LNXT:245|-1|-1}
(*) UNDEF
05D45238  33 C0                         xor eax, eax
05D4523A  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+1

#1012				NOT	{LNXT:245|-1|-1}
(*) BOOL
05D45240  84 C0                         test al, al
05D45242  0F 94 C0                      sete al

#1013				AND(		MOTOR_A	{LNXT:245|-1|-1}
(*) BOOL
05D45245  50                            push eax
05D45246  33 C0                         xor eax, eax
05D45248  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+0

#1014				NOT	{LNXT:245|-1|-1}
(*) BOOL
05D4524E  84 C0                         test al, al
05D45250  0F 94 C0                      sete al

#1015				AND		MOTOR_C	{LNXT:245|-1|-1}
(*) BOOL
05D45253  33 C9                         xor ecx, ecx
05D45255  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %Q1+2
05D4525B  23 C1                         and eax, ecx

#1016				)	{LNXT:245|-1|-1}
(*) BOOL
05D4525D  8B C8                         mov ecx, eax
05D4525F  58                            pop eax
05D45260  23 C1                         and eax, ecx

#1017				JMPCN	$label67	{LNXT:245|246|258}
(-) BOOL
05D45262  84 C0                         test al, al
05D45264  90 74 70 90 90 90             je 05D452D7H

#1018		
#1019				(* THEN *)
#1020		
#1021		
#1022					(* IF Fault_A AND Avto_C *)
#1023					LD		Fault_A	{LNXT:246|-1|-1}
(*) UNDEF
05D4526A  33 C0                         xor eax, eax
05D4526C  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+23

#1024					NOT	{LNXT:246|-1|-1}
(*) BOOL
05D45272  84 C0                         test al, al
05D45274  0F 94 C0                      sete al

#1025					AND		Avto_C	{LNXT:246|-1|-1}
(*) BOOL
05D45277  33 C9                         xor ecx, ecx
05D45279  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+34
05D4527F  23 C1                         and eax, ecx

#1026					JMPCN	$label68	{LNXT:246|247|249}
(-) BOOL
05D45281  84 C0                         test al, al
05D45283  90 74 11 90 90 90             je 05D45297H

#1027		
#1028					(* THEN *)
#1029		
#1030						(* Motor_A:= TRUE; *)
#1031						MOVE		TRUE,Motor_A	{LNXT:247|249|-1}
(*) BOOL
05D45289  B8 01 00 00 00                mov eax, 01H
05D4528E  84 C0                         test al, al
05D45290  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+0

#1032		
#1033		$label68:
#1034					(* END_IF *)
#1035		
#1036		
#1037					(* IF Fault_B AND Avto_B AND NOT MOTOR_A *)
#1038					LD		MOTOR_A	{LNXT:249|-1|-1}
(*) UNDEF
05D45297  33 C0                         xor eax, eax
05D45299  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+0

#1039					NOT	{LNXT:249|-1|-1}
(*) BOOL
05D4529F  84 C0                         test al, al
05D452A1  0F 94 C0                      sete al

#1040					AND(		Fault_B	{LNXT:249|-1|-1}
(*) BOOL
05D452A4  50                            push eax
05D452A5  33 C0                         xor eax, eax
05D452A7  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+31

#1041					NOT	{LNXT:249|-1|-1}
(*) BOOL
05D452AD  84 C0                         test al, al
05D452AF  0F 94 C0                      sete al

#1042					AND		Avto_B	{LNXT:249|-1|-1}
(*) BOOL
05D452B2  33 C9                         xor ecx, ecx
05D452B4  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+32
05D452BA  23 C1                         and eax, ecx

#1043					)	{LNXT:249|-1|-1}
(*) BOOL
05D452BC  8B C8                         mov ecx, eax
05D452BE  58                            pop eax
05D452BF  23 C1                         and eax, ecx

#1044					JMPCN	$label69	{LNXT:249|250|258}
(-) BOOL
05D452C1  84 C0                         test al, al
05D452C3  90 74 11 90 90 90             je 05D452D7H

#1045		
#1046					(* THEN *)
#1047		
#1048						(* Motor_B:= TRUE; *)
#1049						MOVE		TRUE,Motor_B	{LNXT:250|258|-1}
(*) BOOL
05D452C9  B8 01 00 00 00                mov eax, 01H
05D452CE  84 C0                         test al, al
05D452D0  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+1

#1050		
#1051		$label69:
#1052					(* END_IF *)
#1053		
#1054		$label67:
#1055				(* END_IF *)
#1056		
#1057		$label60:
#1058			(* END_IF *)
#1059		
#1060		
#1061			(* IF Tank_Level <= Max_Level_1 and Motor_A and Motor_B and Motor_C *)
#1062			LD		Tank_Level	{LNXT:258|-1|-1}
(*) UNDEF
05D452D7  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+24

#1063			LE		Max_Level_1	{LNXT:258|-1|-1}
(*) INT
05D452DE  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; $$DATA$$+26
05D452E5  3B C1                         cmp eax, ecx
05D452E7  0F 9E C0                      setle al
05D452EA  25 FF 00 00 00                and eax, 0FFh

#1064			AND		Motor_A	{LNXT:258|-1|-1}
(*) BOOL
05D452EF  33 C9                         xor ecx, ecx
05D452F1  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %Q1+0
05D452F7  23 C1                         and eax, ecx

#1065			AND		Motor_B	{LNXT:258|-1|-1}
(*) BOOL
05D452F9  33 C9                         xor ecx, ecx
05D452FB  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %Q1+1
05D45301  23 C1                         and eax, ecx

#1066			AND		Motor_C	{LNXT:258|-1|-1}
(*) BOOL
05D45303  33 C9                         xor ecx, ecx
05D45305  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %Q1+2
05D4530B  23 C1                         and eax, ecx

#1067			JMPCN	$label70	{LNXT:258|259|265}
(-) BOOL
05D4530D  84 C0                         test al, al
05D4530F  90 74 11 90 90 90             je 05D45323H

#1068		
#1069			(* THEN *)
#1070		
#1071				(* Motor_A := False; *)
#1072				MOVE		False,Motor_A	{LNXT:259|265|-1}
(*) BOOL
05D45315  B8 00 00 00 00                mov eax, 00H
05D4531A  84 C0                         test al, al
05D4531C  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+0

#1073		
#1074		$label70:
#1075			(* END_IF *)
#1076		
#1077		
#1078			(* IF Tank_Level > Max_Level_3 *)
#1079			LD		Tank_Level	{LNXT:265|-1|-1}
(*) UNDEF
05D45323  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+24

#1080			GT		Max_Level_3	{LNXT:265|-1|-1}
(*) INT
05D4532A  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; $$DATA$$+178
05D45331  3B C1                         cmp eax, ecx
05D45333  0F 9F C0                      setg al
05D45336  25 FF 00 00 00                and eax, 0FFh

#1081			JMPCN	$label71	{LNXT:265|266|293}
(-) BOOL
05D4533B  84 C0                         test al, al
05D4533D  0F 84 0E 01 00 00             je 05D45451H

#1082		
#1083			(* THEN *)
#1084		
#1085		
#1086				(* IF Fault_A AND Avto_A *)
#1087				LD		Fault_A	{LNXT:266|-1|-1}
(*) UNDEF
05D45343  33 C0                         xor eax, eax
05D45345  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+23

#1088				NOT	{LNXT:266|-1|-1}
(*) BOOL
05D4534B  84 C0                         test al, al
05D4534D  0F 94 C0                      sete al

#1089				AND		Avto_A	{LNXT:266|-1|-1}
(*) BOOL
05D45350  33 C9                         xor ecx, ecx
05D45352  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+30
05D45358  23 C1                         and eax, ecx

#1090				JMPCN	$label72	{LNXT:266|267|270}
(-) BOOL
05D4535A  84 C0                         test al, al
05D4535C  90 74 11 90 90 90             je 05D45370H

#1091		
#1092				(* THEN *)
#1093		
#1094					(* Motor_A := TRUE; *)
#1095					MOVE		TRUE,Motor_A	{LNXT:267|270|-1}
(*) BOOL
05D45362  B8 01 00 00 00                mov eax, 01H
05D45367  84 C0                         test al, al
05D45369  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+0

#1096		
#1097		$label72:
#1098				(* END_IF *)
#1099		
#1100		
#1101				(* IF Fault_B AND Avto_B *)
#1102				LD		Fault_B	{LNXT:270|-1|-1}
(*) UNDEF
05D45370  33 C0                         xor eax, eax
05D45372  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+31

#1103				NOT	{LNXT:270|-1|-1}
(*) BOOL
05D45378  84 C0                         test al, al
05D4537A  0F 94 C0                      sete al

#1104				AND		Avto_B	{LNXT:270|-1|-1}
(*) BOOL
05D4537D  33 C9                         xor ecx, ecx
05D4537F  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+32
05D45385  23 C1                         and eax, ecx

#1105				JMPCN	$label73	{LNXT:270|271|274}
(-) BOOL
05D45387  84 C0                         test al, al
05D45389  90 74 11 90 90 90             je 05D4539DH

#1106		
#1107				(* THEN *)
#1108		
#1109					(* Motor_B := TRUE; *)
#1110					MOVE		TRUE,Motor_B	{LNXT:271|274|-1}
(*) BOOL
05D4538F  B8 01 00 00 00                mov eax, 01H
05D45394  84 C0                         test al, al
05D45396  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+1

#1111		
#1112		$label73:
#1113				(* END_IF *)
#1114		
#1115		
#1116				(* IF Fault_C AND Avto_C *)
#1117				LD		Fault_C	{LNXT:274|-1|-1}
(*) UNDEF
05D4539D  33 C0                         xor eax, eax
05D4539F  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+33

#1118				NOT	{LNXT:274|-1|-1}
(*) BOOL
05D453A5  84 C0                         test al, al
05D453A7  0F 94 C0                      sete al

#1119				AND		Avto_C	{LNXT:274|-1|-1}
(*) BOOL
05D453AA  33 C9                         xor ecx, ecx
05D453AC  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+34
05D453B2  23 C1                         and eax, ecx

#1120				JMPCN	$label74	{LNXT:274|275|278}
(-) BOOL
05D453B4  84 C0                         test al, al
05D453B6  90 74 11 90 90 90             je 05D453CAH

#1121		
#1122				(* THEN *)
#1123		
#1124					(* Motor_C := TRUE; *)
#1125					MOVE		TRUE,Motor_C	{LNXT:275|278|-1}
(*) BOOL
05D453BC  B8 01 00 00 00                mov eax, 01H
05D453C1  84 C0                         test al, al
05D453C3  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+2

#1126		
#1127		$label74:
#1128				(* END_IF *)
#1129		
#1130		
#1131				(* IF Fault_A or  NOT Avto_A *)
#1132				LD		Avto_A	{LNXT:278|-1|-1}
(*) UNDEF
05D453CA  33 C0                         xor eax, eax
05D453CC  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+30

#1133				NOT	{LNXT:278|-1|-1}
(*) BOOL
05D453D2  84 C0                         test al, al
05D453D4  0F 94 C0                      sete al

#1134				OR		Fault_A	{LNXT:278|-1|-1}
(*) BOOL
05D453D7  33 C9                         xor ecx, ecx
05D453D9  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+23
05D453DF  0B C1                         or eax, ecx

#1135				JMPCN	$label75	{LNXT:278|279|281}
(-) BOOL
05D453E1  84 C0                         test al, al
05D453E3  90 74 11 90 90 90             je 05D453F7H

#1136		
#1137				(* THEN *)
#1138		
#1139					(* Motor_A := False; *)
#1140					MOVE		False,Motor_A	{LNXT:279|281|-1}
(*) BOOL
05D453E9  B8 00 00 00 00                mov eax, 00H
05D453EE  84 C0                         test al, al
05D453F0  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+0

#1141		
#1142		$label75:
#1143				(* END_IF *)
#1144		
#1145		
#1146				(* IF Fault_B or  NOT Avto_B *)
#1147				LD		Avto_B	{LNXT:281|-1|-1}
(*) UNDEF
05D453F7  33 C0                         xor eax, eax
05D453F9  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+32

#1148				NOT	{LNXT:281|-1|-1}
(*) BOOL
05D453FF  84 C0                         test al, al
05D45401  0F 94 C0                      sete al

#1149				OR		Fault_B	{LNXT:281|-1|-1}
(*) BOOL
05D45404  33 C9                         xor ecx, ecx
05D45406  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+31
05D4540C  0B C1                         or eax, ecx

#1150				JMPCN	$label76	{LNXT:281|282|284}
(-) BOOL
05D4540E  84 C0                         test al, al
05D45410  90 74 11 90 90 90             je 05D45424H

#1151		
#1152				(* THEN *)
#1153		
#1154					(* Motor_B := False; *)
#1155					MOVE		False,Motor_B	{LNXT:282|284|-1}
(*) BOOL
05D45416  B8 00 00 00 00                mov eax, 00H
05D4541B  84 C0                         test al, al
05D4541D  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+1

#1156		
#1157		$label76:
#1158				(* END_IF *)
#1159		
#1160		
#1161				(* IF Fault_C or  NOT Avto_C *)
#1162				LD		Avto_C	{LNXT:284|-1|-1}
(*) UNDEF
05D45424  33 C0                         xor eax, eax
05D45426  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+34

#1163				NOT	{LNXT:284|-1|-1}
(*) BOOL
05D4542C  84 C0                         test al, al
05D4542E  0F 94 C0                      sete al

#1164				OR		Fault_C	{LNXT:284|-1|-1}
(*) BOOL
05D45431  33 C9                         xor ecx, ecx
05D45433  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+33
05D45439  0B C1                         or eax, ecx

#1165				JMPCN	$label77	{LNXT:284|285|293}
(-) BOOL
05D4543B  84 C0                         test al, al
05D4543D  90 74 11 90 90 90             je 05D45451H

#1166		
#1167				(* THEN *)
#1168		
#1169					(* Motor_C := False; *)
#1170					MOVE		False,Motor_C	{LNXT:285|293|-1}
(*) BOOL
05D45443  B8 00 00 00 00                mov eax, 00H
05D45448  84 C0                         test al, al
05D4544A  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+2

#1171		
#1172		$label77:
#1173				(* END_IF *)
#1174		
#1175		$label71:
#1176			(* END_IF *)
#1177		
#1178		
#1179			(* IF Tank_Level <= Min_Level *)
#1180			LD		Tank_Level	{LNXT:293|-1|-1}
(*) UNDEF
05D45451  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+24

#1181			LE		Min_Level	{LNXT:293|-1|-1}
(*) INT
05D45458  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; $$DATA$$+180
05D4545F  3B C1                         cmp eax, ecx
05D45461  0F 9E C0                      setle al
05D45464  25 FF 00 00 00                and eax, 0FFh

#1182			JMPCN	$label78	{LNXT:293|294|302}
(-) BOOL
05D45469  84 C0                         test al, al
05D4546B  90 74 2D 90 90 90             je 05D4549BH

#1183		
#1184			(* THEN *)
#1185		
#1186				(* Motor_A := False; *)
#1187				MOVE		False,Motor_A	{LNXT:294|295|-1}
(*) BOOL
05D45471  B8 00 00 00 00                mov eax, 00H
05D45476  84 C0                         test al, al
05D45478  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+0

#1188		
#1189				(* Motor_B := False; *)
#1190				MOVE		False,Motor_B	{LNXT:295|296|-1}
(*) BOOL
05D4547F  B8 00 00 00 00                mov eax, 00H
05D45484  84 C0                         test al, al
05D45486  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+1

#1191		
#1192				(* Motor_C := False; *)
#1193				MOVE		False,Motor_C	{LNXT:296|302|-1}
(*) BOOL
05D4548D  B8 00 00 00 00                mov eax, 00H
05D45492  84 C0                         test al, al
05D45494  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+2

#1194		
#1195		$label78:
#1196			(* END_IF *)
#1197		
#1198		
#1199			(* IF Avto_A *)
#1200			LD		Avto_A	{LNXT:302|-1|-1}
(*) UNDEF
05D4549B  33 C0                         xor eax, eax
05D4549D  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+30

#1201			NOT	{LNXT:302|-1|-1}
(*) BOOL
05D454A3  84 C0                         test al, al
05D454A5  0F 94 C0                      sete al

#1202			JMPCN	$label79	{LNXT:302|303|306}
(-) BOOL
05D454A8  84 C0                         test al, al
05D454AA  90 74 11 90 90 90             je 05D454BEH

#1203		
#1204			(* THEN *)
#1205		
#1206				(* Motor_A := False; *)
#1207				MOVE		False,Motor_A	{LNXT:303|306|-1}
(*) BOOL
05D454B0  B8 00 00 00 00                mov eax, 00H
05D454B5  84 C0                         test al, al
05D454B7  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+0

#1208		
#1209		$label79:
#1210			(* END_IF *)
#1211		
#1212		
#1213			(* IF Avto_B *)
#1214			LD		Avto_B	{LNXT:306|-1|-1}
(*) UNDEF
05D454BE  33 C0                         xor eax, eax
05D454C0  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+32

#1215			NOT	{LNXT:306|-1|-1}
(*) BOOL
05D454C6  84 C0                         test al, al
05D454C8  0F 94 C0                      sete al

#1216			JMPCN	$label80	{LNXT:306|307|310}
(-) BOOL
05D454CB  84 C0                         test al, al
05D454CD  90 74 11 90 90 90             je 05D454E1H

#1217		
#1218			(* THEN *)
#1219		
#1220				(* Motor_B := False; *)
#1221				MOVE		False,Motor_B	{LNXT:307|310|-1}
(*) BOOL
05D454D3  B8 00 00 00 00                mov eax, 00H
05D454D8  84 C0                         test al, al
05D454DA  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+1

#1222		
#1223		$label80:
#1224			(* END_IF *)
#1225		
#1226		
#1227			(* IF Avto_C *)
#1228			LD		Avto_C	{LNXT:310|-1|-1}
(*) UNDEF
05D454E1  33 C0                         xor eax, eax
05D454E3  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+34

#1229			NOT	{LNXT:310|-1|-1}
(*) BOOL
05D454E9  84 C0                         test al, al
05D454EB  0F 94 C0                      sete al

#1230			JMPCN	$label81	{LNXT:310|311|322}
(-) BOOL
05D454EE  84 C0                         test al, al
05D454F0  90 74 11 90 90 90             je 05D45504H

#1231		
#1232			(* THEN *)
#1233		
#1234				(* Motor_C := False; *)
#1235				MOVE		False,Motor_C	{LNXT:311|322|-1}
(*) BOOL
05D454F6  B8 00 00 00 00                mov eax, 00H
05D454FB  84 C0                         test al, al
05D454FD  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+2

#1236		
#1237		$label81:
#1238			(* END_IF *)
#1239		
#1240		
#1241			(* IF Motor_A *)
#1242			LD		Motor_A	{LNXT:322|-1|-1}
(*) UNDEF
05D45504  33 C0                         xor eax, eax
05D45506  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+0

#1243			JMPCN	$label82	{LNXT:322|323|332}
(-) BOOL
05D4550C  84 C0                         test al, al
05D4550E  90 74 6B 90 90 90             je 05D4557CH

#1244		
#1245			(* THEN *)
#1246		
#1247				(* ErrorTimer_A *)
#1248				MOVE		TRUE,ErrorTimer_A.IN	{LNXT:323|-1|-1}
(*) BOOL
05D45514  B8 01 00 00 00                mov eax, 01H
05D45519  84 C0                         test al, al
05D4551B  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+186

#1249				MOVE		TM_WAIT,ErrorTimer_A.PT	{LNXT:323|-1|-1}
(*) BOOL
05D45522  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+18
05D45529  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+187

#1250				CAL		ErrorTimer_A	{LNXT:323|324|-1}
(*) INT
05D4552F  50                            push eax
05D45530  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+182
05D45535  E8 B6 ED FF FF                call 05D442F0H ; $$CODE$$+17136
05D4553A  58                            pop eax

#1251		
#1252		
#1253				(* IF ErrorTimer_A.Q *)
#1254				LD		ErrorTimer_A.Q	{LNXT:324|-1|-1}
(*) UNDEF
05D4553B  33 C0                         xor eax, eax
05D4553D  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+191

#1255				JMPCN	$label84	{LNXT:324|325|335}
(-) BOOL
05D45543  84 C0                         test al, al
05D45545  90 74 2F 90 90 90             je 05D45577H

#1256		
#1257				(* THEN *)
#1258		
#1259		
#1260					(* IF ALM_A *)
#1261					LD		ALM_A	{LNXT:325|-1|-1}
(*) UNDEF
05D4554B  33 C0                         xor eax, eax
05D4554D  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+133

#1262					JMPCN	$label85	{LNXT:325|326|335}
(-) BOOL
05D45553  84 C0                         test al, al
05D45555  90 74 1F 90 90 90             je 05D45577H

#1263		
#1264					(* THEN *)
#1265		
#1266						(* Fault_A := TRUE; *)
#1267						MOVE		TRUE,Fault_A	{LNXT:326|328|-1}
(*) BOOL
05D4555B  B8 01 00 00 00                mov eax, 01H
05D45560  84 C0                         test al, al
05D45562  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+23

#1268		
#1269						(* Motor_A := FALSE; *)
#1270						MOVE		FALSE,Motor_A	{LNXT:328|335|-1}
(*) BOOL
05D45569  B8 00 00 00 00                mov eax, 00H
05D4556E  84 C0                         test al, al
05D45570  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+0

#1271		
#1272		$label85:
#1273					(* END_IF *)
#1274		
#1275		$label84:
#1276				(* END_IF *)
#1277				JMP		$label83	{LNXT:322|323|332}
(-) BOOL
05D45577  EB 1D 90 90 90                jmp 05D45596H

#1278		$label82:
#1279		
#1280			(* ELSE *)
#1281		
#1282				(* ErrorTimer_A *)
#1283				MOVE		FALSE,ErrorTimer_A.IN	{LNXT:332|-1|-1}
(*) BOOL
05D4557C  B8 00 00 00 00                mov eax, 00H
05D45581  84 C0                         test al, al
05D45583  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+186

#1284				CAL		ErrorTimer_A	{LNXT:332|335|-1}
(*) BOOL
05D4558A  50                            push eax
05D4558B  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+182
05D45590  E8 5B ED FF FF                call 05D442F0H ; $$CODE$$+17136
05D45595  58                            pop eax

#1285		
#1286		$label83:
#1287			(* END_IF *)
#1288		
#1289		
#1290			(* IF Motor_B *)
#1291			LD		Motor_B	{LNXT:335|-1|-1}
(*) UNDEF
05D45596  33 C0                         xor eax, eax
05D45598  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+1

#1292			JMPCN	$label86	{LNXT:335|336|345}
(-) BOOL
05D4559E  84 C0                         test al, al
05D455A0  90 74 6B 90 90 90             je 05D4560EH

#1293		
#1294			(* THEN *)
#1295		
#1296				(* ErrorTimer_B *)
#1297				MOVE		TRUE,ErrorTimer_B.IN	{LNXT:336|-1|-1}
(*) BOOL
05D455A6  B8 01 00 00 00                mov eax, 01H
05D455AB  84 C0                         test al, al
05D455AD  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+208

#1298				MOVE		TM_WAIT,ErrorTimer_B.PT	{LNXT:336|-1|-1}
(*) BOOL
05D455B4  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+18
05D455BB  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+209

#1299				CAL		ErrorTimer_B	{LNXT:336|337|-1}
(*) INT
05D455C1  50                            push eax
05D455C2  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+204
05D455C7  E8 24 ED FF FF                call 05D442F0H ; $$CODE$$+17136
05D455CC  58                            pop eax

#1300		
#1301		
#1302				(* IF ErrorTimer_B.Q *)
#1303				LD		ErrorTimer_B.Q	{LNXT:337|-1|-1}
(*) UNDEF
05D455CD  33 C0                         xor eax, eax
05D455CF  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+213

#1304				JMPCN	$label88	{LNXT:337|338|349}
(-) BOOL
05D455D5  84 C0                         test al, al
05D455D7  90 74 2F 90 90 90             je 05D45609H

#1305		
#1306				(* THEN *)
#1307		
#1308		
#1309					(* IF ALM_B *)
#1310					LD		ALM_B	{LNXT:338|-1|-1}
(*) UNDEF
05D455DD  33 C0                         xor eax, eax
05D455DF  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+226

#1311					JMPCN	$label89	{LNXT:338|339|349}
(-) BOOL
05D455E5  84 C0                         test al, al
05D455E7  90 74 1F 90 90 90             je 05D45609H

#1312		
#1313					(* THEN *)
#1314		
#1315						(* Fault_B := TRUE; *)
#1316						MOVE		TRUE,Fault_B	{LNXT:339|341|-1}
(*) BOOL
05D455ED  B8 01 00 00 00                mov eax, 01H
05D455F2  84 C0                         test al, al
05D455F4  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+31

#1317		
#1318						(* Motor_B := FALSE; *)
#1319						MOVE		FALSE,Motor_B	{LNXT:341|349|-1}
(*) BOOL
05D455FB  B8 00 00 00 00                mov eax, 00H
05D45600  84 C0                         test al, al
05D45602  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+1

#1320		
#1321		$label89:
#1322					(* END_IF *)
#1323		
#1324		$label88:
#1325				(* END_IF *)
#1326				JMP		$label87	{LNXT:335|336|345}
(-) BOOL
05D45609  EB 1D 90 90 90                jmp 05D45628H

#1327		$label86:
#1328		
#1329			(* ELSE *)
#1330		
#1331				(* ErrorTimer_B *)
#1332				MOVE		FALSE,ErrorTimer_B.IN	{LNXT:345|-1|-1}
(*) BOOL
05D4560E  B8 00 00 00 00                mov eax, 00H
05D45613  84 C0                         test al, al
05D45615  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+208

#1333				CAL		ErrorTimer_B	{LNXT:345|349|-1}
(*) BOOL
05D4561C  50                            push eax
05D4561D  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+204
05D45622  E8 C9 EC FF FF                call 05D442F0H ; $$CODE$$+17136
05D45627  58                            pop eax

#1334		
#1335		$label87:
#1336			(* END_IF *)
#1337		
#1338		
#1339			(* IF Motor_C *)
#1340			LD		Motor_C	{LNXT:349|-1|-1}
(*) UNDEF
05D45628  33 C0                         xor eax, eax
05D4562A  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+2

#1341			JMPCN	$label90	{LNXT:349|350|359}
(-) BOOL
05D45630  84 C0                         test al, al
05D45632  90 74 6B 90 90 90             je 05D456A0H

#1342		
#1343			(* THEN *)
#1344		
#1345				(* ErrorTimer_C *)
#1346				MOVE		TRUE,ErrorTimer_C.IN	{LNXT:350|-1|-1}
(*) BOOL
05D45638  B8 01 00 00 00                mov eax, 01H
05D4563D  84 C0                         test al, al
05D4563F  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+232

#1347				MOVE		TM_WAIT,ErrorTimer_C.PT	{LNXT:350|-1|-1}
(*) BOOL
05D45646  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+18
05D4564D  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+233

#1348				CAL		ErrorTimer_C	{LNXT:350|351|-1}
(*) INT
05D45653  50                            push eax
05D45654  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+228
05D45659  E8 92 EC FF FF                call 05D442F0H ; $$CODE$$+17136
05D4565E  58                            pop eax

#1349		
#1350		
#1351				(* IF ErrorTimer_C.Q *)
#1352				LD		ErrorTimer_C.Q	{LNXT:351|-1|-1}
(*) UNDEF
05D4565F  33 C0                         xor eax, eax
05D45661  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+237

#1353				JMPCN	$label92	{LNXT:351|352|364}
(-) BOOL
05D45667  84 C0                         test al, al
05D45669  90 74 2F 90 90 90             je 05D4569BH

#1354		
#1355				(* THEN *)
#1356		
#1357		
#1358					(* IF ALM_C *)
#1359					LD		ALM_C	{LNXT:352|-1|-1}
(*) UNDEF
05D4566F  33 C0                         xor eax, eax
05D45671  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+227

#1360					JMPCN	$label93	{LNXT:352|353|364}
(-) BOOL
05D45677  84 C0                         test al, al
05D45679  90 74 1F 90 90 90             je 05D4569BH

#1361		
#1362					(* THEN *)
#1363		
#1364						(* Fault_C := TRUE; *)
#1365						MOVE		TRUE,Fault_C	{LNXT:353|355|-1}
(*) BOOL
05D4567F  B8 01 00 00 00                mov eax, 01H
05D45684  84 C0                         test al, al
05D45686  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+33

#1366		
#1367						(* Motor_C := FALSE; *)
#1368						MOVE		FALSE,Motor_C	{LNXT:355|364|-1}
(*) BOOL
05D4568D  B8 00 00 00 00                mov eax, 00H
05D45692  84 C0                         test al, al
05D45694  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+2

#1369		
#1370		$label93:
#1371					(* END_IF *)
#1372		
#1373		$label92:
#1374				(* END_IF *)
#1375				JMP		$label91	{LNXT:349|350|359}
(-) BOOL
05D4569B  EB 1D 90 90 90                jmp 05D456BAH

#1376		$label90:
#1377		
#1378			(* ELSE *)
#1379		
#1380				(* ErrorTimer_C *)
#1381				MOVE		FALSE,ErrorTimer_C.IN	{LNXT:359|-1|-1}
(*) BOOL
05D456A0  B8 00 00 00 00                mov eax, 00H
05D456A5  84 C0                         test al, al
05D456A7  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+232

#1382				CAL		ErrorTimer_C	{LNXT:359|364|-1}
(*) BOOL
05D456AE  50                            push eax
05D456AF  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+228
05D456B4  E8 37 EC FF FF                call 05D442F0H ; $$CODE$$+17136
05D456B9  58                            pop eax

#1383		
#1384		$label91:
#1385			(* END_IF *)
#1386		
#1387			(* level_min := Min_Level; *)
#1388			MOVE		Min_Level,level_min	{LNXT:364|365|-1}
(*) BOOL
05D456BA  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+180
05D456C1  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+4

#1389		
#1390			(* Level_1 := Max_Level_1; *)
#1391			MOVE		Max_Level_1,Level_1	{LNXT:365|366|-1}
(*) INT
05D456C8  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+26
05D456CF  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+6

#1392		
#1393			(* Level_2 := Max_Level_2; *)
#1394			MOVE		Max_Level_2,Level_2	{LNXT:366|367|-1}
(*) INT
05D456D6  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+62
05D456DD  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+8

#1395		
#1396			(* Level_3 := Max_Level_3; *)
#1397			MOVE		Max_Level_3,Level_3	{LNXT:367|370|-1}
(*) INT
05D456E4  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+178
05D456EB  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+10

#1398		
#1399			(* Alarms.5 := Avto_A; *)
#1400			MOVE		Avto_A,Alarms.5	{LNXT:370|371|-1}
(*) INT
05D456F2  33 C0                         xor eax, eax
05D456F4  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+30
05D456FA  84 C0                         test al, al
05D456FC  90 75 11 90 90 90             jne 00000014H@
05D45702  66 0F BA 35 CC CC CC CC 05    btr word ptr [CCCCCCCCH], 5 ; %M110+14
05D4570B  EB 0C 90 90 90                jmp 0000000EH@
05D45710  66 0F BA 2D CC CC CC CC 05    bts word ptr [CCCCCCCCH], 5 ; %M110+14

#1401		
#1402			(* Alarms.6 := Avto_B; *)
#1403			MOVE		Avto_B,Alarms.6	{LNXT:371|372|-1}
(*) BOOL
05D45719  33 C0                         xor eax, eax
05D4571B  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+32
05D45721  84 C0                         test al, al
05D45723  90 75 11 90 90 90             jne 00000014H@
05D45729  66 0F BA 35 CC CC CC CC 06    btr word ptr [CCCCCCCCH], 6 ; %M110+14
05D45732  EB 0C 90 90 90                jmp 0000000EH@
05D45737  66 0F BA 2D CC CC CC CC 06    bts word ptr [CCCCCCCCH], 6 ; %M110+14

#1404		
#1405			(* Alarms.7 := Avto_C; *)
#1406			MOVE		Avto_C,Alarms.7	{LNXT:372|375|-1}
(*) BOOL
05D45740  33 C0                         xor eax, eax
05D45742  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+34
05D45748  84 C0                         test al, al
05D4574A  90 75 11 90 90 90             jne 00000014H@
05D45750  66 0F BA 35 CC CC CC CC 07    btr word ptr [CCCCCCCCH], 7 ; %M110+14
05D45759  EB 0C 90 90 90                jmp 0000000EH@
05D4575E  66 0F BA 2D CC CC CC CC 07    bts word ptr [CCCCCCCCH], 7 ; %M110+14

#1407		
#1408			(* Alarms.8 := ALM_A; *)
#1409			MOVE		ALM_A,Alarms.8	{LNXT:375|376|-1}
(*) BOOL
05D45767  33 C0                         xor eax, eax
05D45769  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+133
05D4576F  84 C0                         test al, al
05D45771  90 75 11 90 90 90             jne 00000014H@
05D45777  66 0F BA 35 CC CC CC CC 08    btr word ptr [CCCCCCCCH], 8 ; %M110+14
05D45780  EB 0C 90 90 90                jmp 0000000EH@
05D45785  66 0F BA 2D CC CC CC CC 08    bts word ptr [CCCCCCCCH], 8 ; %M110+14

#1410		
#1411			(* Alarms.9 := ALM_B; *)
#1412			MOVE		ALM_B,Alarms.9	{LNXT:376|377|-1}
(*) BOOL
05D4578E  33 C0                         xor eax, eax
05D45790  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+226
05D45796  84 C0                         test al, al
05D45798  90 75 11 90 90 90             jne 00000014H@
05D4579E  66 0F BA 35 CC CC CC CC 09    btr word ptr [CCCCCCCCH], 9 ; %M110+14
05D457A7  EB 0C 90 90 90                jmp 0000000EH@
05D457AC  66 0F BA 2D CC CC CC CC 09    bts word ptr [CCCCCCCCH], 9 ; %M110+14

#1413		
#1414			(* Alarms.10 := ALM_C; *)
#1415			MOVE		ALM_C,Alarms.10	{LNXT:377|4|-1}
(*) BOOL
05D457B5  33 C0                         xor eax, eax
05D457B7  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+227
05D457BD  84 C0                         test al, al
05D457BF  90 75 11 90 90 90             jne 00000014H@
05D457C5  66 0F BA 35 CC CC CC CC 0A    btr word ptr [CCCCCCCCH], 10 ; %M110+14
05D457CE  EB 0C 90 90 90                jmp 0000000EH@
05D457D3  66 0F BA 2D CC CC CC CC 0A    bts word ptr [CCCCCCCCH], 10 ; %M110+14

END_PROGRAM
**************************************************
	List program: Register
**************************************************

PROGRAM Register

END_PROGRAM

#0		{SRC:Register}
#1		(*$WAITSWITCH$*)
#2		
#3			(* level_tank := to_int(to_real(Tank_Level) / 10); *)
#4			LDP0		Tank_Level	{LNXT:3|6|-1}
(*) UDINT
#5			to_real	{LNXT:3|6|-1}
(*) UDINT
05D457DC  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+24
05D457E3  50                            push eax
05D457E4  DB 04 24                      fild dword ptr [esp]
05D457E7  58                            pop eax

#6			DIV		10	{LNXT:3|6|-1}
(*) REAL
05D457E8  68 0A 00 00 00                push 10
05D457ED  DA 34 24                      fidiv [esp]
05D457F0  81 C4 04 00 00 00             add esp, 4

#7			to_int	{LNXT:3|6|-1}
(*) REAL
05D457F6  81 EC 08 00 00 00             sub esp, 8
05D457FC  DF 3C 24                      fistp qword ptr [esp]
05D457FF  58                            pop eax
05D45800  81 C4 04 00 00 00             add esp, 4

#8			ST		level_tank	{LNXT:3|6|-1}
(*) INT
05D45806  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+2

#9		
#10			(* Alarms.0 := di_sensor_Min; *)
#11			MOVE		di_sensor_Min,Alarms.0	{LNXT:6|7|-1}
(*) INT
05D4580D  33 C0                         xor eax, eax
05D4580F  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+260
05D45815  84 C0                         test al, al
05D45817  90 75 11 90 90 90             jne 00000014H@
05D4581D  66 0F BA 35 CC CC CC CC 00    btr word ptr [CCCCCCCCH], 0 ; %M110+14
05D45826  EB 0C 90 90 90                jmp 0000000EH@
05D4582B  66 0F BA 2D CC CC CC CC 00    bts word ptr [CCCCCCCCH], 0 ; %M110+14

#12		
#13			(* Alarms.1 := di_sensor_Max; *)
#14			MOVE		di_sensor_Max,Alarms.1	{LNXT:7|8|-1}
(*) BOOL
05D45834  33 C0                         xor eax, eax
05D45836  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+261
05D4583C  84 C0                         test al, al
05D4583E  90 75 11 90 90 90             jne 00000014H@
05D45844  66 0F BA 35 CC CC CC CC 01    btr word ptr [CCCCCCCCH], 1 ; %M110+14
05D4584D  EB 0C 90 90 90                jmp 0000000EH@
05D45852  66 0F BA 2D CC CC CC CC 01    bts word ptr [CCCCCCCCH], 1 ; %M110+14

#15		
#16			(* Alarms.2 := di_flooding; *)
#17			MOVE		di_flooding,Alarms.2	{LNXT:8|9|-1}
(*) BOOL
05D4585B  33 C0                         xor eax, eax
05D4585D  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+262
05D45863  84 C0                         test al, al
05D45865  90 75 11 90 90 90             jne 00000014H@
05D4586B  66 0F BA 35 CC CC CC CC 02    btr word ptr [CCCCCCCCH], 2 ; %M110+14
05D45874  EB 0C 90 90 90                jmp 0000000EH@
05D45879  66 0F BA 2D CC CC CC CC 02    bts word ptr [CCCCCCCCH], 2 ; %M110+14

#18		
#19			(* Alarms.3 := di_door; *)
#20			MOVE		di_door,Alarms.3	{LNXT:9|10|-1}
(*) BOOL
05D45882  33 C0                         xor eax, eax
05D45884  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+263
05D4588A  84 C0                         test al, al
05D4588C  90 75 11 90 90 90             jne 00000014H@
05D45892  66 0F BA 35 CC CC CC CC 03    btr word ptr [CCCCCCCCH], 3 ; %M110+14
05D4589B  EB 0C 90 90 90                jmp 0000000EH@
05D458A0  66 0F BA 2D CC CC CC CC 03    bts word ptr [CCCCCCCCH], 3 ; %M110+14

#21		
#22			(* Alarms.4 := di_rnpp; *)
#23			MOVE		di_rnpp,Alarms.4	{LNXT:10|12|-1}
(*) BOOL
05D458A9  33 C0                         xor eax, eax
05D458AB  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+264
05D458B1  84 C0                         test al, al
05D458B3  90 75 11 90 90 90             jne 00000014H@
05D458B9  66 0F BA 35 CC CC CC CC 04    btr word ptr [CCCCCCCCH], 4 ; %M110+14
05D458C2  EB 0C 90 90 90                jmp 0000000EH@
05D458C7  66 0F BA 2D CC CC CC CC 04    bts word ptr [CCCCCCCCH], 4 ; %M110+14

#24		
#25		
#26			(* IF Tank_Level < -32000 *)
#27			LD		Tank_Level	{LNXT:12|-1|-1}
(*) UNDEF
05D458D0  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+24

#28			LT		-32000	{LNXT:12|-1|-1}
(*) INT
05D458D7  3D 00 83 FF FF                cmp eax, -32000
05D458DC  0F 9C C0                      setl al
05D458DF  25 FF 00 00 00                and eax, 0FFh

#29			JMPCN	$label0	{LNXT:12|13|3}
(-) BOOL
05D458E4  84 C0                         test al, al
05D458E6  90 74 27 90 90 90             je 05D45910H

#30		
#31			(* THEN *)
#32		
#33				(* Alarms.11 := True; *)
#34				MOVE		True,Alarms.11	{LNXT:13|3|-1}
(*) BOOL
05D458EC  B8 01 00 00 00                mov eax, 01H
05D458F1  84 C0                         test al, al
05D458F3  90 75 11 90 90 90             jne 00000014H@
05D458F9  66 0F BA 35 CC CC CC CC 0B    btr word ptr [CCCCCCCCH], 11 ; %M110+14
05D45902  EB 0C 90 90 90                jmp 0000000EH@
05D45907  66 0F BA 2D CC CC CC CC 0B    bts word ptr [CCCCCCCCH], 11 ; %M110+14

END_PROGRAM
**************************************************
	List program: MotoHour
**************************************************

PROGRAM MotoHour

        VAR
MotoHour_Mode_1 : REAL := 0.0;	{ DE:"Час, напрацювання мс насос А" }
MotoHour_Mode_2 : REAL := 0.0;	{ DE:"Час, напрацювання мс насос В" }
MotoHour_Mode_3 : REAL := 0.0;	{ DE:"Час, напрацювання мс насос С" }
	END_VAR

END_PROGRAM

#0		{SRC:MotoHour}
#1		(*$WAITSWITCH$*)
#2		
#3		
#4			(* IF Motor_A *)
#5			LD		Motor_A	{LNXT:3|-1|-1}
(*) UNDEF
05D45910  33 C0                         xor eax, eax
05D45912  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+0

#6			JMPCN	$label0	{LNXT:3|4|6}
(-) BOOL
05D45918  84 C0                         test al, al
05D4591A  90 74 1D 90 90 90             je 05D4593AH

#7		
#8			(* THEN *)
#9		
#10				(* MotoHour_Mode_1 := MotoHour_Mode_1 + 1; *)
#11				LD		MotoHour_Mode_1	{LNXT:4|6|-1}
(*) UNDEF
05D45920  D9 05 CC CC CC CC             fld dword ptr [CCCCCCCCH] ; $$DATA$$+252

#12				ADD		1	{LNXT:4|6|-1}
(*) REAL
05D45926  68 01 00 00 00                push 1
05D4592B  DA 04 24                      fiadd dword ptr [esp]
05D4592E  81 C4 04 00 00 00             add esp, 4

#13				ST		MotoHour_Mode_1	{LNXT:4|6|-1}
(*) REAL
05D45934  D9 15 CC CC CC CC             fst dword ptr [CCCCCCCCH] ; $$DATA$$+252

#14		
#15		$label0:
#16			(* END_IF *)
#17		
#18		
#19			(* IF Motor_A *)
#20			LD		Motor_A	{LNXT:6|-1|-1}
(*) UNDEF
05D4593A  DD C0                         ffree
05D4593C  D9 F7                         fincstp
05D4593E  33 C0                         xor eax, eax
05D45940  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+0

#21			NOT	{LNXT:6|-1|-1}
(*) BOOL
05D45946  84 C0                         test al, al
05D45948  0F 94 C0                      sete al

#22			JMPCN	$label1	{LNXT:6|7|11}
(-) BOOL
05D4594B  84 C0                         test al, al
05D4594D  90 74 2D 90 90 90             je 05D4597DH

#23		
#24			(* THEN *)
#25		
#26				(* MotoHour_Mode_1 := MotoHour_Mode_1; *)
#27				MOVE		MotoHour_Mode_1,MotoHour_Mode_1	{LNXT:7|8|-1}
(*) BOOL
05D45953  D9 05 CC CC CC CC             fld dword ptr [CCCCCCCCH] ; $$DATA$$+252
05D45959  D9 15 CC CC CC CC             fst dword ptr [CCCCCCCCH] ; $$DATA$$+252

#28		
#29				(* MotoHour_1 := MotoHour_Mode_1 / 3600; *)
#30				LD		MotoHour_Mode_1	{LNXT:8|11|-1}
(*) UNDEF
05D4595F  DD C0                         ffree
05D45961  D9 F7                         fincstp
05D45963  D9 05 CC CC CC CC             fld dword ptr [CCCCCCCCH] ; $$DATA$$+252

#31				DIV		3600	{LNXT:8|11|-1}
(*) REAL
05D45969  68 10 0E 00 00                push 3600
05D4596E  DA 34 24                      fidiv [esp]
05D45971  81 C4 04 00 00 00             add esp, 4

#32				ST		MotoHour_1	{LNXT:8|11|-1}
(*) REAL
05D45977  D9 15 CC CC CC CC             fst dword ptr [CCCCCCCCH] ; %M110+20

#33		
#34		$label1:
#35			(* END_IF *)
#36		
#37		
#38			(* IF Motor_B *)
#39			LD		Motor_B	{LNXT:11|-1|-1}
(*) UNDEF
05D4597D  DD C0                         ffree
05D4597F  D9 F7                         fincstp
05D45981  33 C0                         xor eax, eax
05D45983  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+1

#40			JMPCN	$label2	{LNXT:11|12|14}
(-) BOOL
05D45989  84 C0                         test al, al
05D4598B  90 74 1D 90 90 90             je 05D459ABH

#41		
#42			(* THEN *)
#43		
#44				(* MotoHour_Mode_2 := MotoHour_Mode_2 + 1; *)
#45				LD		MotoHour_Mode_2	{LNXT:12|14|-1}
(*) UNDEF
05D45991  D9 05 CC CC CC CC             fld dword ptr [CCCCCCCCH] ; $$DATA$$+256

#46				ADD		1	{LNXT:12|14|-1}
(*) REAL
05D45997  68 01 00 00 00                push 1
05D4599C  DA 04 24                      fiadd dword ptr [esp]
05D4599F  81 C4 04 00 00 00             add esp, 4

#47				ST		MotoHour_Mode_2	{LNXT:12|14|-1}
(*) REAL
05D459A5  D9 15 CC CC CC CC             fst dword ptr [CCCCCCCCH] ; $$DATA$$+256

#48		
#49		$label2:
#50			(* END_IF *)
#51		
#52		
#53			(* IF Motor_B *)
#54			LD		Motor_B	{LNXT:14|-1|-1}
(*) UNDEF
05D459AB  DD C0                         ffree
05D459AD  D9 F7                         fincstp
05D459AF  33 C0                         xor eax, eax
05D459B1  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+1

#55			NOT	{LNXT:14|-1|-1}
(*) BOOL
05D459B7  84 C0                         test al, al
05D459B9  0F 94 C0                      sete al

#56			JMPCN	$label3	{LNXT:14|15|19}
(-) BOOL
05D459BC  84 C0                         test al, al
05D459BE  90 74 2D 90 90 90             je 05D459EEH

#57		
#58			(* THEN *)
#59		
#60				(* MotoHour_Mode_2 := MotoHour_Mode_2; *)
#61				MOVE		MotoHour_Mode_2,MotoHour_Mode_2	{LNXT:15|16|-1}
(*) BOOL
05D459C4  D9 05 CC CC CC CC             fld dword ptr [CCCCCCCCH] ; $$DATA$$+256
05D459CA  D9 15 CC CC CC CC             fst dword ptr [CCCCCCCCH] ; $$DATA$$+256

#62		
#63				(* MotoHour_2 := MotoHour_Mode_2 / 3600; *)
#64				LD		MotoHour_Mode_2	{LNXT:16|19|-1}
(*) UNDEF
05D459D0  DD C0                         ffree
05D459D2  D9 F7                         fincstp
05D459D4  D9 05 CC CC CC CC             fld dword ptr [CCCCCCCCH] ; $$DATA$$+256

#65				DIV		3600	{LNXT:16|19|-1}
(*) REAL
05D459DA  68 10 0E 00 00                push 3600
05D459DF  DA 34 24                      fidiv [esp]
05D459E2  81 C4 04 00 00 00             add esp, 4

#66				ST		MotoHour_2	{LNXT:16|19|-1}
(*) REAL
05D459E8  D9 15 CC CC CC CC             fst dword ptr [CCCCCCCCH] ; %M110+24

#67		
#68		$label3:
#69			(* END_IF *)
#70		
#71		
#72			(* IF Motor_C *)
#73			LD		Motor_C	{LNXT:19|-1|-1}
(*) UNDEF
05D459EE  DD C0                         ffree
05D459F0  D9 F7                         fincstp
05D459F2  33 C0                         xor eax, eax
05D459F4  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+2

#74			JMPCN	$label4	{LNXT:19|20|22}
(-) BOOL
05D459FA  84 C0                         test al, al
05D459FC  90 74 1D 90 90 90             je 05D45A1CH

#75		
#76			(* THEN *)
#77		
#78				(* MotoHour_Mode_2 := MotoHour_Mode_2 + 1; *)
#79				LD		MotoHour_Mode_2	{LNXT:20|22|-1}
(*) UNDEF
05D45A02  D9 05 CC CC CC CC             fld dword ptr [CCCCCCCCH] ; $$DATA$$+256

#80				ADD		1	{LNXT:20|22|-1}
(*) REAL
05D45A08  68 01 00 00 00                push 1
05D45A0D  DA 04 24                      fiadd dword ptr [esp]
05D45A10  81 C4 04 00 00 00             add esp, 4

#81				ST		MotoHour_Mode_2	{LNXT:20|22|-1}
(*) REAL
05D45A16  D9 15 CC CC CC CC             fst dword ptr [CCCCCCCCH] ; $$DATA$$+256

#82		
#83		$label4:
#84			(* END_IF *)
#85		
#86		
#87			(* IF Motor_C *)
#88			LD		Motor_C	{LNXT:22|-1|-1}
(*) UNDEF
05D45A1C  DD C0                         ffree
05D45A1E  D9 F7                         fincstp
05D45A20  33 C0                         xor eax, eax
05D45A22  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+2

#89			NOT	{LNXT:22|-1|-1}
(*) BOOL
05D45A28  84 C0                         test al, al
05D45A2A  0F 94 C0                      sete al

#90			JMPCN	$label5	{LNXT:22|23|3}
(-) BOOL
05D45A2D  84 C0                         test al, al
05D45A2F  90 74 31 90 90 90             je 05D45A63H

#91		
#92			(* THEN *)
#93		
#94				(* MotoHour_Mode_2 := MotoHour_Mode_2; *)
#95				MOVE		MotoHour_Mode_2,MotoHour_Mode_2	{LNXT:23|24|-1}
(*) BOOL
05D45A35  D9 05 CC CC CC CC             fld dword ptr [CCCCCCCCH] ; $$DATA$$+256
05D45A3B  D9 15 CC CC CC CC             fst dword ptr [CCCCCCCCH] ; $$DATA$$+256

#96		
#97				(* MotoHour_2 := MotoHour_Mode_2 / 3600; *)
#98				LD		MotoHour_Mode_2	{LNXT:24|3|-1}
(*) UNDEF
05D45A41  DD C0                         ffree
05D45A43  D9 F7                         fincstp
05D45A45  D9 05 CC CC CC CC             fld dword ptr [CCCCCCCCH] ; $$DATA$$+256

#99				DIV		3600	{LNXT:24|3|-1}
(*) REAL
05D45A4B  68 10 0E 00 00                push 3600
05D45A50  DA 34 24                      fidiv [esp]
05D45A53  81 C4 04 00 00 00             add esp, 4

#100				ST		MotoHour_2	{LNXT:24|3|-1}
(*) REAL
05D45A59  D9 15 CC CC CC CC             fst dword ptr [CCCCCCCCH] ; %M110+24
05D45A5F  DD C0                         ffree
05D45A61  D9 F7                         fincstp

05D45A63  61                            popad
05D45A64  5D                            pop ebp

05D45A65  C3                            ret

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
05D45A66  55                            push ebp
05D45A67  8B EC                         mov ebp, esp

05D45A69  66 8B 0D CC CC CC CC          mov cx, [CCCCCCCCH] ; %I1+0
05D45A70  66 89 0D CC CC CC CC          mov [CCCCCCCCH], cx ; $$DATA$$+24

05D45A77  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %I0+0
05D45A7D  88 0D CC CC CC CC             mov [CCCCCCCCH], cl ; $$DATA$$+30

05D45A83  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %I0+1
05D45A89  88 0D CC CC CC CC             mov [CCCCCCCCH], cl ; $$DATA$$+32

05D45A8F  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %I0+2
05D45A95  88 0D CC CC CC CC             mov [CCCCCCCCH], cl ; $$DATA$$+34

05D45A9B  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %I0+3
05D45AA1  88 0D CC CC CC CC             mov [CCCCCCCCH], cl ; $$DATA$$+133

05D45AA7  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %I0+4
05D45AAD  88 0D CC CC CC CC             mov [CCCCCCCCH], cl ; $$DATA$$+226

05D45AB3  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %I0+5
05D45AB9  88 0D CC CC CC CC             mov [CCCCCCCCH], cl ; $$DATA$$+227

05D45ABF  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %I0+6
05D45AC5  88 0D CC CC CC CC             mov [CCCCCCCCH], cl ; $$DATA$$+260

05D45ACB  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %I0+7
05D45AD1  88 0D CC CC CC CC             mov [CCCCCCCCH], cl ; $$DATA$$+261

05D45AD7  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %I0+8
05D45ADD  88 0D CC CC CC CC             mov [CCCCCCCCH], cl ; $$DATA$$+262

05D45AE3  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %I0+9
05D45AE9  88 0D CC CC CC CC             mov [CCCCCCCCH], cl ; $$DATA$$+263

05D45AEF  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %I0+10
05D45AF5  88 0D CC CC CC CC             mov [CCCCCCCCH], cl ; $$DATA$$+264

05D45AFB  8B E5                         mov esp, ebp
05D45AFD  5D                            pop ebp

05D45AFE  C3                            ret


*** OUTPUT:
05D45AFF  55                            push ebp
05D45B00  8B EC                         mov ebp, esp

05D45B02  8B E5                         mov esp, ebp
05D45B04  5D                            pop ebp

05D45B05  C3                            ret



**************************************************
	Task Timed init code
**************************************************

05D45B06  55                            push ebp
05D45B07  8B EC                         mov ebp, esp

Var init: V::LVL.PRIORITYMOTOR = 1
05D45B09  66 C7 05 CC CC CC CC 01 00    mov word ptr [CCCCCCCCH], 0001H ; $$DATA$$+20

Var init: V::LVL.MAX_LEVEL_1 = 80
05D45B12  66 C7 05 CC CC CC CC 50 00    mov word ptr [CCCCCCCCH], 0050H ; $$DATA$$+26

Var init: V::LVL.ROTATIONNUMBER = 1
05D45B1B  66 C7 05 CC CC CC CC 01 00    mov word ptr [CCCCCCCCH], 0001H ; $$DATA$$+28

Var init: V::LVL.CURRENTPUMP = 1
05D45B24  66 C7 05 CC CC CC CC 01 00    mov word ptr [CCCCCCCCH], 0001H ; $$DATA$$+36

Var init: V::LVL.MAX_LEVEL_2 = 120
05D45B2D  66 C7 05 CC CC CC CC 78 00    mov word ptr [CCCCCCCCH], 0078H ; $$DATA$$+62

Var init: V::LVL.MAX_LEVEL_3 = 150
05D45B36  66 C7 05 CC CC CC CC 96 00    mov word ptr [CCCCCCCCH], 0096H ; $$DATA$$+178

Var init: V::LVL.MIN_LEVEL = 30
05D45B3F  66 C7 05 CC CC CC CC 1E 00    mov word ptr [CCCCCCCCH], 001EH ; $$DATA$$+180

05D45B48  8B E5                         mov esp, ebp
05D45B4A  5D                            pop ebp

05D45B4B  C3                            ret



**************************************************
	Global init code
**************************************************

05D45B50  55                            push ebp
05D45B51  8B EC                         mov ebp, esp

Var init: V:EMBEDDEDELEMENTS:$$POUCBARRAY$$BACKGROUND = [?main.$$POUCB$$, 0]
05D45B53  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; $$DATA$$+300
05D45B58  89 0D CC CC CC CC             mov [CCCCCCCCH], ecx ; $$DATA$$+268

Var init: V:EMBEDDEDELEMENTS:$$POUCBARRAY$$SERV = [?InitParDB.$$POUCB$$, 0]
05D45B5E  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; $$DATA$$+306
05D45B63  89 0D CC CC CC CC             mov [CCCCCCCCH], ecx ; $$DATA$$+276

Var init: V:EMBEDDEDELEMENTS:$$POUCBARRAY$$TIMED = [?LVL.$$POUCB$$, ?Register.$$POUCB$$, ?MotoHour.$$POUCB$$, 0]
05D45B69  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; $$DATA$$+312
05D45B6E  89 0D CC CC CC CC             mov [CCCCCCCCH], ecx ; $$DATA$$+284
05D45B74  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; $$DATA$$+318
05D45B79  89 0D CC CC CC CC             mov [CCCCCCCCH], ecx ; $$DATA$$+288
05D45B7F  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; $$DATA$$+324
05D45B84  89 0D CC CC CC CC             mov [CCCCCCCCH], ecx ; $$DATA$$+292

05D45B8A  8B E5                         mov esp, ebp
05D45B8C  5D                            pop ebp

05D45B8D  C3                            ret



**************************************************
	Global RETAIN init code
**************************************************

05D45B8E  55                            push ebp
05D45B8F  8B EC                         mov ebp, esp

05D45B91  8B E5                         mov esp, ebp
05D45B93  5D                            pop ebp

05D45B94  C3                            ret



**************************************************
	Task $$VirtualTables init code
**************************************************

05D45B95  55                            push ebp
05D45B96  8B EC                         mov ebp, esp

05D45B98  8B E5                         mov esp, ebp
05D45B9A  5D                            pop ebp

05D45B9B  C3                            ret



********************************************
MEMORY MAP
********************************************

Code area type:          		       main code
Start code area:          		0000000005D40000h
End code area:            		0000000005D466B8h
Code size:                		000066B8h

Start local data area:    		0000000005CC0000h
End local data area:      		0000000005CC014Ah
Local data size:          		0000014Ah

Start retentive data area:		0000000000000000h
End retentive data area:  		0000000000000000h
Retentive data size:      		00000000h

Start bit data area:      		0000000000000000h
End bit data area:        		0000000000000000h
Bit data size:            		00000000h



********************************************
CODE ID:                                04CA2603
DEBUG MEMO ID:                          000034F7
FULL MEMO ID:                           00005AB4
RELOCATION ADDR:                        0000000005D40000
********************************************
