***********************************************************************
*
*	CODE GENERATION LISTING FOR: 04
*	COMPILER VERSION: 6.0.0.52
*
***********************************************************************

**************************************************
	List function block: R_TRIG
**************************************************

FUNCTION_BLOCK R_TRIG

	{ DE:"<HTML>The output Q will remain FALSE as long as the input variable CLK is FALSE.<br>
As soon as CLK returns TRUE, Q will first return TRUE.<br><br>
This means each time the function is called up, Q will return FALSE until CLK has falling edge followed by an rising edge.<br><br>
<img src= r_trig.png>" }

        VAR_INPUT
clk : BOOL;	{ DE:"Input for edge detection" }
	END_VAR

        VAR_OUTPUT
q : BOOL;	{ DE:"Raising edge output" }
	END_VAR

        VAR
m : BOOL := FALSE;
	END_VAR

END_FUNCTION_BLOCK

08034510  55                            push ebp
08034511  8B EB                         mov ebp, ebx
08034513  57                            push edi

#0		{SRC:R_TRIG}
#1		
#2			LD		clk
(*) UNDEF
08034514  33 C0                         xor eax, eax
08034516  8A 45 01                      mov al, 1[ebp]

#3			ANDN	m
(*) BOOL
08034519  33 C9                         xor ecx, ecx
0803451B  8A 4D 00                      mov cl, [ebp]
0803451E  84 C9                         test cl, cl
08034520  0F 94 C1                      sete cl
08034523  23 C1                         and eax, ecx

#4			ST		q
(*) BOOL
08034525  84 C0                         test al, al
08034527  0F 95 45 02                   setne 2[ebp]

#5		
#6			LD		clk
(*) UNDEF
0803452B  33 C0                         xor eax, eax
0803452D  8A 45 01                      mov al, 1[ebp]

#7			ST		m
(*) BOOL
08034530  84 C0                         test al, al
08034532  0F 95 45 00                   setne [ebp]

08034536  5F                            pop edi
08034537  5D                            pop ebp

08034538  C3                            ret


Frame allocation (hex):

	0000 bit  0: VAR m
	0001 bit  0: VAR clk
	0002 bit  0: VAR q

END_FUNCTION_BLOCK
**************************************************
	List function block: TON
**************************************************

FUNCTION_BLOCK TON

	{ DE:"<HTML>The TON block produces a delayed output Q of the input IN. The delay time is expressed in milliseconds on the PT input.</br></br>
<img src= tonscheme.png>
<ul>
<li>if IN is FALSE Q is false</li>
<li>Q becomes TRUE as IN remains TRUE for PT milliseconds</li>
<li>Q remains TRUE until IN remains TRUE</li>
</ul>" }

        VAR_INPUT
IN : BOOL;	{ DE:"Timer input source" }
PT : UDINT;	{ DE:"Preset time value (ms)" }
	END_VAR

        VAR_OUTPUT
Q : BOOL;	{ DE:"Timer output" }
ET : UDINT;	{ DE:"Timer current value (ms)" }
	END_VAR

        VAR_EXTERNAL
	{G:"System_Timers"}
sysTimer AT %MD0.0 : UDINT;	{ DE:"System timer [ms]" }
	END_VAR

        VAR
timStart : UDINT;	{ DE:"Time value at start of counting" }
	END_VAR

END_FUNCTION_BLOCK

08034539  55                            push ebp
0803453A  8B EB                         mov ebp, ebx
0803453C  57                            push edi

#0		{SRC:TON}
#1		
#2			(*	Check if in counting	*)
#3		
#4			LD		IN
(*) UNDEF
0803453D  33 C0                         xor eax, eax
0803453F  8A 45 04                      mov al, 4[ebp]

#5			JMPCN	lReset
(-) BOOL
08034542  84 C0                         test al, al
08034544  90 74 61 90 90 90             je 080345A8H

#6		
#7			(*	Check if Q is TRUE *)
#8			LD		Q
(*) UNDEF
0803454A  33 C0                         xor eax, eax
0803454C  8A 45 09                      mov al, 9[ebp]

#9			RETC
#10			
(-) BOOL
0803454F  84 C0                         test al, al
08034551  90 75 6A 90 90 90             jne 080345BEH

#11			(*	Check if already in counting *)
#12			LD		timStart
(*) UNDEF
08034557  8B 45 00                      mov eax, [ebp]

#13			EQ		0
(*) UDINT
0803455A  3D 00 00 00 00                cmp eax, 0
0803455F  0F 94 C0                      sete al
08034562  25 FF 00 00 00                and eax, 0FFh

#14			JMPCN	lUpdate
(-) BOOL
08034567  84 C0                         test al, al
08034569  90 74 0C 90 90 90             je 08034578H

#15		
#16			(*	Start of counting *)
#17			LD		sysTimer
(*) UNDEF
0803456F  8B 05 CC CC CC CC             mov eax, [CCCCCCCCH] ; %M0+0

#18			ST		timStart
(*) UDINT
08034575  89 45 00                      mov [ebp], eax

#19			
#20		lUpdate:
#21		
#22			(*	Update timer and check if time elapsed *)
#23			LD		sysTimer
(*) UNDEF
08034578  8B 05 CC CC CC CC             mov eax, [CCCCCCCCH] ; %M0+0

#24			SUB		timStart
(*) UDINT
0803457E  2B 45 00                      sub eax, [ebp]

#25			ST		ET
(*) UDINT
08034581  89 45 0A                      mov 10[ebp], eax

#26			GE		PT
(*) UDINT
08034584  3B 45 05                      cmp eax, [ebp+5]
08034587  0F 93 C0                      setae al
0803458A  25 FF 00 00 00                and eax, 0FFh

#27			ST		Q
(*) BOOL
0803458F  84 C0                         test al, al
08034591  0F 95 45 09                   setne 9[ebp]

#28			RETCN
#29		
(-) BOOL
08034595  84 C0                         test al, al
08034597  90 74 24 90 90 90             je 080345BEH

#30			(*	Limit actual time value *)
#31			LD		PT
(*) UNDEF
0803459D  8B 45 05                      mov eax, 5[ebp]

#32			ST		ET
(*) UDINT
080345A0  89 45 0A                      mov 10[ebp], eax

#33			RET
#34		
(-) UDINT
080345A3  EB 19 90 90 90                jmp 080345BEH

#35		lReset:
#36		
#37			(*	Reset status *)
#38			LD		0
(*) UNDEF
080345A8  B8 00 00 00 00                mov eax, 00H

#39			ST		ET
(*) USINT
080345AD  89 45 0A                      mov 10[ebp], eax

#40			ST		timStart
(*) UDINT
080345B0  89 45 00                      mov [ebp], eax

#41			LD		FALSE
(*) UNDEF
080345B3  B8 00 00 00 00                mov eax, 00H

#42			ST		Q
(*) BOOL
080345B8  84 C0                         test al, al
080345BA  0F 95 45 09                   setne 9[ebp]

080345BE  5F                            pop edi
080345BF  5D                            pop ebp

080345C0  C3                            ret


Frame allocation (hex):

	0000       : VAR timStart
	0004 bit  0: VAR IN
	0005       : VAR PT
	0009 bit  0: VAR Q
	000A       : VAR ET

END_FUNCTION_BLOCK
**************************************************
	List program: main
**************************************************

PROGRAM main

END_PROGRAM

080345D0  55                            push ebp
080345D1  8B EC                         mov ebp, esp
080345D3  60                            pushad

#0		{SRC:main}
#1		(*$WAITSWITCH$*)
#2		
#3			(* cnt := cnt + 1; *)
#4			LD		cnt	{LNXT:2|2|-1}
(*) UNDEF
080345D4  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+238

#5			ADD		1	{LNXT:2|2|-1}
(*) INT
080345DB  05 01 00 00 00                add eax, 1

#6			ST		cnt	{LNXT:2|2|-1}
(*) INT
080345E0  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+238

080345E7  61                            popad
080345E8  5D                            pop ebp

080345E9  C3                            ret

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
080345EA  55                            push ebp
080345EB  8B EC                         mov ebp, esp

080345ED  8B E5                         mov esp, ebp
080345EF  5D                            pop ebp

080345F0  C3                            ret


*** OUTPUT:
080345F1  55                            push ebp
080345F2  8B EC                         mov ebp, esp

080345F4  8B E5                         mov esp, ebp
080345F6  5D                            pop ebp

080345F7  C3                            ret



**************************************************
	Task Background init code
**************************************************

080345F8  55                            push ebp
080345F9  8B EC                         mov ebp, esp

080345FB  8B E5                         mov esp, ebp
080345FD  5D                            pop ebp

080345FE  C3                            ret

**************************************************
	List program: DownloadData
**************************************************

PROGRAM DownloadData

END_PROGRAM

08034610  55                            push ebp
08034611  8B EC                         mov ebp, esp
08034613  60                            pushad

#0		{SRC:DownloadData}
#1		(*$WAITSWITCH$*)
#2		
#3			(* level_min:=ep_level_min; *)
#4			MOVE		ep_level_min,level_min	{LNXT:1|2|-1}
(*) UDINT
08034614  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M101+6
0803461B  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+4

#5		
#6			(* Level_1:=ep_level_1; *)
#7			MOVE		ep_level_1,Level_1	{LNXT:2|3|-1}
(*) INT
08034622  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M101+0
08034629  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+6

#8		
#9			(* Level_2:=ep_level_2; *)
#10			MOVE		ep_level_2,Level_2	{LNXT:3|4|-1}
(*) INT
08034630  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M101+2
08034637  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+8

#11		
#12			(* Level_3:=ep_level_3; *)
#13			MOVE		ep_level_3,Level_3	{LNXT:4|5|-1}
(*) INT
0803463E  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M101+4
08034645  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+10

#14		
#15			(* Rotation:=ep_rotation; *)
#16			MOVE		ep_rotation,Rotation	{LNXT:5|1|-1}
(*) INT
0803464C  33 C0                         xor eax, eax
0803464E  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %M101+8
08034654  84 C0                         test al, al
08034656  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %M110+16

0803465D  61                            popad
0803465E  5D                            pop ebp

0803465F  C3                            ret

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
08034660  C3                            ret


*** OUTPUT:
08034661  C3                            ret



**************************************************
	Task Boot init code
**************************************************

08034662  55                            push ebp
08034663  8B EC                         mov ebp, esp

08034665  8B E5                         mov esp, ebp
08034667  5D                            pop ebp

08034668  C3                            ret

**************************************************
	List program: InitParDB
**************************************************

PROGRAM InitParDB

        VAR
warningsKiller : USINT;
dummyCrc32 : UDINT;
	END_VAR

END_PROGRAM

08034680  55                            push ebp
08034681  8B EC                         mov ebp, esp
08034683  60                            pushad

#0		{SRC:InitParDB}
#1		(*$WAITSWITCH$*)
#2		
#3			(* dummyCrc32 := 3717425634; *)
#4			MOVE		3717425634,dummyCrc32	{LNXT:3|5|-1}
(*) UDINT
08034684  B8 E2 69 93 DD                mov eax, DD9369E2H
08034689  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+12

#5		
#6			(* warningsKiller := sysDBase_SetExtTable( ADR( $$ParDB ), $$ParDBLength ); *)
#7			ADR		$$ParDB	{LNXT:5|3|-1}
(*) UDINT
0803468F  B8 CC CC CC CC                mov eax, CCCCCCCCH ; $$CODE$$+288

#8			sysDBase_SetExtTable		$$ParDBLength	{LNXT:5|3|-1}
(*) @USINT
08034694  68 1A 00 00 00                push 26
08034699  8B C8                         mov ecx, eax
0803469B  51                            push ecx
0803469C  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; sysDBase_SetExtTable
080346A1  FF D1                         call ecx
080346A3  81 C4 08 00 00 00             add esp, 8

#9			ST		warningsKiller	{LNXT:5|3|-1}
(*) USINT
080346A9  88 05 CC CC CC CC             mov [CCCCCCCCH], al ; $$DATA$$+16

080346AF  61                            popad
080346B0  5D                            pop ebp

080346B1  C3                            ret

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
080346B2  C3                            ret


*** OUTPUT:
080346B3  C3                            ret



**************************************************
	Task Serv init code
**************************************************

080346B4  55                            push ebp
080346B5  8B EC                         mov ebp, esp

080346B7  8B E5                         mov esp, ebp
080346B9  5D                            pop ebp

080346BA  C3                            ret

**************************************************
	List program: LVL
**************************************************

PROGRAM LVL

        VAR
Rotationnumber : INT := 1;	{ DE:"Номер в ротації" }
FastRunMode : BOOL := FALSE;	{ DE:"Локальна змінна Прогонка 0-вимкнена" }
RunTime_START : TIME;	{ DE:"Час роботи двигуна A" }
CurrentMotor : INT := 1;
ErrorCode : INT := 0;
PumpIntervalTimer_1 : TON;	{ DE:"інтервал для запуску прогонки" }
PumpRunTimer_1 : TON;	{ DE:"Час прогонки" }
TestRunActive_1 : BOOL := FALSE;	{ DE:"Тригер готовності прогонки" }
TestRunRunning_1 : BOOL := FALSE;	{ DE:"Прогонка виконується" }
PumpIntervalTimer_2 : TON;	{ DE:"інтервал для запуску прогонки" }
PumpRunTimer_2 : TON;	{ DE:"Час прогонки" }
TestRunActive_2 : BOOL := FALSE;	{ DE:"Тригер готовності прогонки" }
TestRunRunning_2 : BOOL := FALSE;	{ DE:"Прогонка виконується" }
PumpIntervalTimer_3 : TON;	{ DE:"інтервал для запуску прогонки" }
PumpRunTimer_3 : TON;	{ DE:"Час прогонки" }
TestRunActive_3 : BOOL := FALSE;	{ DE:"Тригер готовності прогонки" }
TestRunRunning_3 : BOOL := FALSE;	{ DE:"Прогонка виконується" }
CurrentPump : INT := 1;
ErrorTimer_A_Start : TON;
ErrorTimer_B_Start : TON;
ErrorTimer_C_Start : TON;
TM_WAIT_Start : INT := 5000;
	END_VAR

END_PROGRAM

080346D0  55                            push ebp
080346D1  8B EC                         mov ebp, esp
080346D3  60                            pushad

#0		{SRC:LVL}
#1		(*$WAITSWITCH$*)
#2		
#3			(* o_tank_lvl:= Tank_Level; *)
#4			MOVE		Tank_Level,o_tank_lvl	{LNXT:5|7|-1}
(*) UDINT
080346D4  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+18
080346DB  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %Q0+4

#5		
#6		
#7			(* IF level_min <> ep_level_min *)
#8			LD		level_min	{LNXT:7|-1|-1}
(*) UNDEF
080346E2  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M110+4

#9			NE		ep_level_min	{LNXT:7|-1|-1}
(*) INT
080346E9  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; %M101+6
080346F0  3B C1                         cmp eax, ecx
080346F2  0F 95 C0                      setne al
080346F5  25 FF 00 00 00                and eax, 0FFh

#10			JMPCN	$label0	{LNXT:7|8|11}
(-) BOOL
080346FA  84 C0                         test al, al
080346FC  90 74 11 90 90 90             je 08034710H

#11		
#12			(* THEN *)
#13		
#14				(* level_min := ep_level_min; *)
#15				MOVE		ep_level_min,level_min	{LNXT:8|11|-1}
(*) BOOL
08034702  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M101+6
08034709  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+4

#16		
#17		$label0:
#18			(* END_IF *)
#19		
#20		
#21			(* IF Level_1 <> ep_level_1 *)
#22			LD		Level_1	{LNXT:11|-1|-1}
(*) UNDEF
08034710  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M110+6

#23			NE		ep_level_1	{LNXT:11|-1|-1}
(*) INT
08034717  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; %M101+0
0803471E  3B C1                         cmp eax, ecx
08034720  0F 95 C0                      setne al
08034723  25 FF 00 00 00                and eax, 0FFh

#24			JMPCN	$label1	{LNXT:11|12|15}
(-) BOOL
08034728  84 C0                         test al, al
0803472A  90 74 11 90 90 90             je 0803473EH

#25		
#26			(* THEN *)
#27		
#28				(* Level_1 := ep_level_1; *)
#29				MOVE		ep_level_1,Level_1	{LNXT:12|15|-1}
(*) BOOL
08034730  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M101+0
08034737  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+6

#30		
#31		$label1:
#32			(* END_IF *)
#33		
#34		
#35			(* IF Level_2 <> ep_level_2 *)
#36			LD		Level_2	{LNXT:15|-1|-1}
(*) UNDEF
0803473E  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M110+8

#37			NE		ep_level_2	{LNXT:15|-1|-1}
(*) INT
08034745  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; %M101+2
0803474C  3B C1                         cmp eax, ecx
0803474E  0F 95 C0                      setne al
08034751  25 FF 00 00 00                and eax, 0FFh

#38			JMPCN	$label2	{LNXT:15|16|19}
(-) BOOL
08034756  84 C0                         test al, al
08034758  90 74 11 90 90 90             je 0803476CH

#39		
#40			(* THEN *)
#41		
#42				(* Level_2 := ep_level_2; *)
#43				MOVE		ep_level_2,Level_2	{LNXT:16|19|-1}
(*) BOOL
0803475E  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M101+2
08034765  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+8

#44		
#45		$label2:
#46			(* END_IF *)
#47		
#48		
#49			(* IF Level_3 <> ep_level_3 *)
#50			LD		Level_3	{LNXT:19|-1|-1}
(*) UNDEF
0803476C  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M110+10

#51			NE		ep_level_3	{LNXT:19|-1|-1}
(*) INT
08034773  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; %M101+4
0803477A  3B C1                         cmp eax, ecx
0803477C  0F 95 C0                      setne al
0803477F  25 FF 00 00 00                and eax, 0FFh

#52			JMPCN	$label3	{LNXT:19|20|23}
(-) BOOL
08034784  84 C0                         test al, al
08034786  90 74 11 90 90 90             je 0803479AH

#53		
#54			(* THEN *)
#55		
#56				(* Level_3 := ep_level_3; *)
#57				MOVE		ep_level_3,Level_3	{LNXT:20|23|-1}
(*) BOOL
0803478C  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M101+4
08034793  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+10

#58		
#59		$label3:
#60			(* END_IF *)
#61		
#62		
#63			(* IF Rotation <> ep_rotation *)
#64			LD		Rotation	{LNXT:23|-1|-1}
(*) UNDEF
0803479A  33 C0                         xor eax, eax
0803479C  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %M110+16

#65			NE		ep_rotation	{LNXT:23|-1|-1}
(*) BOOL
080347A2  33 C9                         xor ecx, ecx
080347A4  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %M101+8
080347AA  33 C1                         xor eax, ecx

#66			JMPCN	$label4	{LNXT:23|24|27}
(-) BOOL
080347AC  84 C0                         test al, al
080347AE  90 74 14 90 90 90             je 080347C5H

#67		
#68			(* THEN *)
#69		
#70				(* Rotation := ep_rotation; *)
#71				MOVE		ep_rotation,Rotation	{LNXT:24|27|-1}
(*) BOOL
080347B4  33 C0                         xor eax, eax
080347B6  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %M101+8
080347BC  84 C0                         test al, al
080347BE  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %M110+16

#72		
#73		$label4:
#74			(* END_IF *)
#75		
#76		
#77			(* IF Rotation *)
#78			LD		Rotation	{LNXT:27|-1|-1}
(*) UNDEF
080347C5  33 C0                         xor eax, eax
080347C7  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %M110+16

#79			JMPCN	$label5	{LNXT:27|28|30}
(-) BOOL
080347CD  84 C0                         test al, al
080347CF  90 74 27 90 90 90             je 080347F9H

#80		
#81			(* THEN *)
#82		
#83				(* rotation_state := 'On'; *)
#84				MOVE		'On',rotation_state	{LNXT:28|33|-1}
(*) BOOL
080347D5  B8 CC CC CC CC                mov eax, CCCCCCCCH ; $$CODE$$+17632
080347DA  50                            push eax
080347DB  68 06 00 00 00                push 6
080347E0  68 CC CC CC CC                push CCCCCCCCH ; %M110+186
080347E5  50                            push eax
080347E6  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; ST_STRING_SAFE
080347EB  FF D1                         call ecx
080347ED  81 C4 0C 00 00 00             add esp, 12
080347F3  58                            pop eax

#85				JMP		$label6	{LNXT:27|28|30}
(-) STRING
080347F4  EB 22 90 90 90                jmp 08034818H

#86		$label5:
#87		
#88			(* ELSE *)
#89		
#90				(* rotation_state := 'Off'; *)
#91				MOVE		'Off',rotation_state	{LNXT:30|33|-1}
(*) STRING
080347F9  B8 CC CC CC CC                mov eax, CCCCCCCCH ; $$CODE$$+17636
080347FE  50                            push eax
080347FF  68 06 00 00 00                push 6
08034804  68 CC CC CC CC                push CCCCCCCCH ; %M110+186
08034809  50                            push eax
0803480A  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; ST_STRING_SAFE
0803480F  FF D1                         call ecx
08034811  81 C4 0C 00 00 00             add esp, 12
08034817  58                            pop eax

#92		
#93		$label6:
#94			(* END_IF *)
#95		
#96		
#97			(* IF di_flooding *)
#98			LD		di_flooding	{LNXT:33|-1|-1}
(*) UNDEF
08034818  33 C0                         xor eax, eax
0803481A  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+17

#99			JMPCN	$label7	{LNXT:33|34|36}
(-) BOOL
08034820  84 C0                         test al, al
08034822  90 74 27 90 90 90             je 0803484CH

#100		
#101			(* THEN *)
#102		
#103				(* flooding_state := 'Yes'; *)
#104				MOVE		'Yes',flooding_state	{LNXT:34|40|-1}
(*) BOOL
08034828  B8 CC CC CC CC                mov eax, CCCCCCCCH ; $$CODE$$+17642
0803482D  50                            push eax
0803482E  68 15 00 00 00                push 21
08034833  68 CC CC CC CC                push CCCCCCCCH ; %M110+164
08034838  50                            push eax
08034839  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; ST_STRING_SAFE
0803483E  FF D1                         call ecx
08034840  81 C4 0C 00 00 00             add esp, 12
08034846  58                            pop eax

#105				JMP		$label8	{LNXT:33|34|36}
(-) STRING
08034847  EB 22 90 90 90                jmp 0803486BH

#106		$label7:
#107		
#108			(* ELSE *)
#109		
#110				(* flooding_state := 'No'; *)
#111				MOVE		'No',flooding_state	{LNXT:36|40|-1}
(*) STRING
0803484C  B8 CC CC CC CC                mov eax, CCCCCCCCH ; $$CODE$$+17648
08034851  50                            push eax
08034852  68 15 00 00 00                push 21
08034857  68 CC CC CC CC                push CCCCCCCCH ; %M110+164
0803485C  50                            push eax
0803485D  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; ST_STRING_SAFE
08034862  FF D1                         call ecx
08034864  81 C4 0C 00 00 00             add esp, 12
0803486A  58                            pop eax

#112		
#113		$label8:
#114			(* END_IF *)
#115		
#116			(* ErrorTimer_A_Start *)
#117			MOVE		Motor_A,ErrorTimer_A_Start.IN	{LNXT:40|-1|-1}
(*) STRING
0803486B  33 C0                         xor eax, eax
0803486D  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+0
08034873  84 C0                         test al, al
08034875  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+24

#118			MOVE		TM_WAIT_Start,ErrorTimer_A_Start.PT	{LNXT:40|-1|-1}
(*) BOOL
0803487C  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+42
08034883  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+25

#119			CAL		ErrorTimer_A_Start	{LNXT:40|41|-1}
(*) INT
08034889  50                            push eax
0803488A  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+20
0803488F  E8 A5 FC FF FF                call 08034539H ; $$CODE$$+17721
08034894  58                            pop eax

#120		
#121		
#122			(* IF ErrorTimer_A_Start.Q *)
#123			LD		ErrorTimer_A_Start.Q	{LNXT:41|-1|-1}
(*) UNDEF
08034895  33 C0                         xor eax, eax
08034897  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+29

#124			JMPCN	$label9	{LNXT:41|42|56}
(-) BOOL
0803489D  84 C0                         test al, al
0803489F  0F 84 C7 00 00 00             je 0803496CH

#125		
#126			(* THEN *)
#127		
#128		
#129				(* IF Motor_A and not ALM_A *)
#130				LD		ALM_A	{LNXT:42|-1|-1}
(*) UNDEF
080348A5  33 C0                         xor eax, eax
080348A7  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+44

#131				NOT	{LNXT:42|-1|-1}
(*) BOOL
080348AD  84 C0                         test al, al
080348AF  0F 94 C0                      sete al

#132				AND		Motor_A	{LNXT:42|-1|-1}
(*) BOOL
080348B2  33 C9                         xor ecx, ecx
080348B4  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %Q1+0
080348BA  23 C1                         and eax, ecx

#133				JMPCN	$label10	{LNXT:42|44|52}
(-) BOOL
080348BC  84 C0                         test al, al
080348BE  0F 84 84 00 00 00             je 08034948H

#134		
#135				(* THEN *)
#136		
#137					(* Alarms.8:=true; *)
#138					MOVE		true,Alarms.8	{LNXT:44|46|-1}
(*) BOOL
080348C4  B8 01 00 00 00                mov eax, 01H
080348C9  84 C0                         test al, al
080348CB  90 75 11 90 90 90             jne 00000014H@
080348D1  66 0F BA 35 CC CC CC CC 08    btr word ptr [CCCCCCCCH], 8 ; %M110+14
080348DA  EB 0C 90 90 90                jmp 0000000EH@
080348DF  66 0F BA 2D CC CC CC CC 08    bts word ptr [CCCCCCCCH], 8 ; %M110+14

#139		
#140		
#141					(* IF ALM_B and Avto_B *)
#142					LD		ALM_B	{LNXT:46|-1|-1}
(*) UNDEF
080348E8  33 C0                         xor eax, eax
080348EA  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+45

#143					NOT	{LNXT:46|-1|-1}
(*) BOOL
080348F0  84 C0                         test al, al
080348F2  0F 94 C0                      sete al

#144					AND		Avto_B	{LNXT:46|-1|-1}
(*) BOOL
080348F5  33 C9                         xor ecx, ecx
080348F7  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+46
080348FD  23 C1                         and eax, ecx

#145					JMPCN	$label12	{LNXT:46|47|48}
(-) BOOL
080348FF  84 C0                         test al, al
08034901  90 74 14 90 90 90             je 08034918H

#146		
#147					(* THEN *)
#148		
#149						(* Priority := 1; *)
#150						MOVE		1,Priority	{LNXT:47|56|-1}
(*) BOOL
08034907  B8 01 00 00 00                mov eax, 01H
0803490C  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+12

#151						JMP		$label13	{LNXT:46|47|48}
(-) INT
08034913  EB 2E 90 90 90                jmp 08034943H

#152		$label12:
#153		
#154					(* ELSIF ALM_C and Avto_C *)
#155					LD		ALM_C	{LNXT:48|-1|-1}
(*) UNDEF
08034918  33 C0                         xor eax, eax
0803491A  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+47

#156					NOT	{LNXT:48|-1|-1}
(*) BOOL
08034920  84 C0                         test al, al
08034922  0F 94 C0                      sete al

#157					AND		Avto_C	{LNXT:48|-1|-1}
(*) BOOL
08034925  33 C9                         xor ecx, ecx
08034927  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+48
0803492D  23 C1                         and eax, ecx

#158					JMPCN	$label13	{LNXT:48|49|56}
(-) BOOL
0803492F  84 C0                         test al, al
08034931  90 74 0F 90 90 90             je 08034943H

#159		
#160					(* THEN *)
#161		
#162						(* Priority := 2; *)
#163						MOVE		2,Priority	{LNXT:49|56|-1}
(*) BOOL
08034937  B8 02 00 00 00                mov eax, 02H
0803493C  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+12

#164		
#165		$label13:
#166					(* END_IF *)
#167					JMP		$label11	{LNXT:42|44|52}
(-) INT
08034943  EB 27 90 90 90                jmp 0803496CH

#168		$label10:
#169		
#170				(* ELSE *)
#171		
#172					(* Alarms.8:=false; *)
#173					MOVE		false,Alarms.8	{LNXT:52|56|-1}
(*) INT
08034948  B8 00 00 00 00                mov eax, 00H
0803494D  84 C0                         test al, al
0803494F  90 75 11 90 90 90             jne 00000014H@
08034955  66 0F BA 35 CC CC CC CC 08    btr word ptr [CCCCCCCCH], 8 ; %M110+14
0803495E  EB 0C 90 90 90                jmp 0000000EH@
08034963  66 0F BA 2D CC CC CC CC 08    bts word ptr [CCCCCCCCH], 8 ; %M110+14

#174		
#175		$label11:
#176				(* END_IF *)
#177		
#178		$label9:
#179			(* END_IF *)
#180		
#181			(* ErrorTimer_B_Start *)
#182			MOVE		Motor_B,ErrorTimer_B_Start.IN	{LNXT:56|-1|-1}
(*) WORD
0803496C  33 C0                         xor eax, eax
0803496E  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+1
08034974  84 C0                         test al, al
08034976  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+54

#183			MOVE		TM_WAIT_Start,ErrorTimer_B_Start.PT	{LNXT:56|-1|-1}
(*) BOOL
0803497D  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+42
08034984  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+55

#184			CAL		ErrorTimer_B_Start	{LNXT:56|57|-1}
(*) INT
0803498A  50                            push eax
0803498B  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+50
08034990  E8 A4 FB FF FF                call 08034539H ; $$CODE$$+17721
08034995  58                            pop eax

#185		
#186		
#187			(* IF ErrorTimer_B_Start.Q *)
#188			LD		ErrorTimer_B_Start.Q	{LNXT:57|-1|-1}
(*) UNDEF
08034996  33 C0                         xor eax, eax
08034998  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+59

#189			JMPCN	$label14	{LNXT:57|58|72}
(-) BOOL
0803499E  84 C0                         test al, al
080349A0  0F 84 C7 00 00 00             je 08034A6DH

#190		
#191			(* THEN *)
#192		
#193		
#194				(* IF Motor_B and not ALM_B *)
#195				LD		ALM_B	{LNXT:58|-1|-1}
(*) UNDEF
080349A6  33 C0                         xor eax, eax
080349A8  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+45

#196				NOT	{LNXT:58|-1|-1}
(*) BOOL
080349AE  84 C0                         test al, al
080349B0  0F 94 C0                      sete al

#197				AND		Motor_B	{LNXT:58|-1|-1}
(*) BOOL
080349B3  33 C9                         xor ecx, ecx
080349B5  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %Q1+1
080349BB  23 C1                         and eax, ecx

#198				JMPCN	$label15	{LNXT:58|60|68}
(-) BOOL
080349BD  84 C0                         test al, al
080349BF  0F 84 84 00 00 00             je 08034A49H

#199		
#200				(* THEN *)
#201		
#202					(* Alarms.9 := true; *)
#203					MOVE		true,Alarms.9	{LNXT:60|62|-1}
(*) BOOL
080349C5  B8 01 00 00 00                mov eax, 01H
080349CA  84 C0                         test al, al
080349CC  90 75 11 90 90 90             jne 00000014H@
080349D2  66 0F BA 35 CC CC CC CC 09    btr word ptr [CCCCCCCCH], 9 ; %M110+14
080349DB  EB 0C 90 90 90                jmp 0000000EH@
080349E0  66 0F BA 2D CC CC CC CC 09    bts word ptr [CCCCCCCCH], 9 ; %M110+14

#204		
#205		
#206					(* IF ALM_A and Avto_A *)
#207					LD		ALM_A	{LNXT:62|-1|-1}
(*) UNDEF
080349E9  33 C0                         xor eax, eax
080349EB  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+44

#208					NOT	{LNXT:62|-1|-1}
(*) BOOL
080349F1  84 C0                         test al, al
080349F3  0F 94 C0                      sete al

#209					AND		Avto_A	{LNXT:62|-1|-1}
(*) BOOL
080349F6  33 C9                         xor ecx, ecx
080349F8  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+49
080349FE  23 C1                         and eax, ecx

#210					JMPCN	$label17	{LNXT:62|63|64}
(-) BOOL
08034A00  84 C0                         test al, al
08034A02  90 74 14 90 90 90             je 08034A19H

#211		
#212					(* THEN *)
#213		
#214						(* Priority := 0; *)
#215						MOVE		0,Priority	{LNXT:63|72|-1}
(*) BOOL
08034A08  B8 00 00 00 00                mov eax, 00H
08034A0D  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+12

#216						JMP		$label18	{LNXT:62|63|64}
(-) INT
08034A14  EB 2E 90 90 90                jmp 08034A44H

#217		$label17:
#218		
#219					(* ELSIF ALM_C and Avto_C *)
#220					LD		ALM_C	{LNXT:64|-1|-1}
(*) UNDEF
08034A19  33 C0                         xor eax, eax
08034A1B  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+47

#221					NOT	{LNXT:64|-1|-1}
(*) BOOL
08034A21  84 C0                         test al, al
08034A23  0F 94 C0                      sete al

#222					AND		Avto_C	{LNXT:64|-1|-1}
(*) BOOL
08034A26  33 C9                         xor ecx, ecx
08034A28  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+48
08034A2E  23 C1                         and eax, ecx

#223					JMPCN	$label18	{LNXT:64|65|72}
(-) BOOL
08034A30  84 C0                         test al, al
08034A32  90 74 0F 90 90 90             je 08034A44H

#224		
#225					(* THEN *)
#226		
#227						(* Priority := 2; *)
#228						MOVE		2,Priority	{LNXT:65|72|-1}
(*) BOOL
08034A38  B8 02 00 00 00                mov eax, 02H
08034A3D  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+12

#229		
#230		$label18:
#231					(* END_IF *)
#232					JMP		$label16	{LNXT:58|60|68}
(-) INT
08034A44  EB 27 90 90 90                jmp 08034A6DH

#233		$label15:
#234		
#235				(* ELSE *)
#236		
#237					(* Alarms.9 := false; *)
#238					MOVE		false,Alarms.9	{LNXT:68|72|-1}
(*) INT
08034A49  B8 00 00 00 00                mov eax, 00H
08034A4E  84 C0                         test al, al
08034A50  90 75 11 90 90 90             jne 00000014H@
08034A56  66 0F BA 35 CC CC CC CC 09    btr word ptr [CCCCCCCCH], 9 ; %M110+14
08034A5F  EB 0C 90 90 90                jmp 0000000EH@
08034A64  66 0F BA 2D CC CC CC CC 09    bts word ptr [CCCCCCCCH], 9 ; %M110+14

#239		
#240		$label16:
#241				(* END_IF *)
#242		
#243		$label14:
#244			(* END_IF *)
#245		
#246			(* ErrorTimer_C_Start *)
#247			MOVE		Motor_C,ErrorTimer_C_Start.IN	{LNXT:72|-1|-1}
(*) WORD
08034A6D  33 C0                         xor eax, eax
08034A6F  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+2
08034A75  84 C0                         test al, al
08034A77  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+76

#248			MOVE		TM_WAIT_Start,ErrorTimer_C_Start.PT	{LNXT:72|-1|-1}
(*) BOOL
08034A7E  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+42
08034A85  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+77

#249			CAL		ErrorTimer_C_Start	{LNXT:72|73|-1}
(*) INT
08034A8B  50                            push eax
08034A8C  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+72
08034A91  E8 A3 FA FF FF                call 08034539H ; $$CODE$$+17721
08034A96  58                            pop eax

#250		
#251		
#252			(* IF ErrorTimer_C_Start.Q *)
#253			LD		ErrorTimer_C_Start.Q	{LNXT:73|-1|-1}
(*) UNDEF
08034A97  33 C0                         xor eax, eax
08034A99  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+81

#254			JMPCN	$label19	{LNXT:73|74|96}
(-) BOOL
08034A9F  84 C0                         test al, al
08034AA1  0F 84 C7 00 00 00             je 08034B6EH

#255		
#256			(* THEN *)
#257		
#258		
#259				(* IF Motor_C and not ALM_C *)
#260				LD		ALM_C	{LNXT:74|-1|-1}
(*) UNDEF
08034AA7  33 C0                         xor eax, eax
08034AA9  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+47

#261				NOT	{LNXT:74|-1|-1}
(*) BOOL
08034AAF  84 C0                         test al, al
08034AB1  0F 94 C0                      sete al

#262				AND		Motor_C	{LNXT:74|-1|-1}
(*) BOOL
08034AB4  33 C9                         xor ecx, ecx
08034AB6  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %Q1+2
08034ABC  23 C1                         and eax, ecx

#263				JMPCN	$label20	{LNXT:74|77|85}
(-) BOOL
08034ABE  84 C0                         test al, al
08034AC0  0F 84 84 00 00 00             je 08034B4AH

#264		
#265				(* THEN *)
#266		
#267					(* Alarms.10 := true; *)
#268					MOVE		true,Alarms.10	{LNXT:77|79|-1}
(*) BOOL
08034AC6  B8 01 00 00 00                mov eax, 01H
08034ACB  84 C0                         test al, al
08034ACD  90 75 11 90 90 90             jne 00000014H@
08034AD3  66 0F BA 35 CC CC CC CC 0A    btr word ptr [CCCCCCCCH], 10 ; %M110+14
08034ADC  EB 0C 90 90 90                jmp 0000000EH@
08034AE1  66 0F BA 2D CC CC CC CC 0A    bts word ptr [CCCCCCCCH], 10 ; %M110+14

#269		
#270		
#271					(* IF ALM_A and Avto_A *)
#272					LD		ALM_A	{LNXT:79|-1|-1}
(*) UNDEF
08034AEA  33 C0                         xor eax, eax
08034AEC  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+44

#273					NOT	{LNXT:79|-1|-1}
(*) BOOL
08034AF2  84 C0                         test al, al
08034AF4  0F 94 C0                      sete al

#274					AND		Avto_A	{LNXT:79|-1|-1}
(*) BOOL
08034AF7  33 C9                         xor ecx, ecx
08034AF9  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+49
08034AFF  23 C1                         and eax, ecx

#275					JMPCN	$label22	{LNXT:79|80|81}
(-) BOOL
08034B01  84 C0                         test al, al
08034B03  90 74 14 90 90 90             je 08034B1AH

#276		
#277					(* THEN *)
#278		
#279						(* Priority := 0; *)
#280						MOVE		0,Priority	{LNXT:80|96|-1}
(*) BOOL
08034B09  B8 00 00 00 00                mov eax, 00H
08034B0E  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+12

#281						JMP		$label23	{LNXT:79|80|81}
(-) INT
08034B15  EB 2E 90 90 90                jmp 08034B45H

#282		$label22:
#283		
#284					(* ELSIF ALM_B and Avto_B *)
#285					LD		ALM_B	{LNXT:81|-1|-1}
(*) UNDEF
08034B1A  33 C0                         xor eax, eax
08034B1C  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+45

#286					NOT	{LNXT:81|-1|-1}
(*) BOOL
08034B22  84 C0                         test al, al
08034B24  0F 94 C0                      sete al

#287					AND		Avto_B	{LNXT:81|-1|-1}
(*) BOOL
08034B27  33 C9                         xor ecx, ecx
08034B29  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+46
08034B2F  23 C1                         and eax, ecx

#288					JMPCN	$label23	{LNXT:81|82|96}
(-) BOOL
08034B31  84 C0                         test al, al
08034B33  90 74 0F 90 90 90             je 08034B45H

#289		
#290					(* THEN *)
#291		
#292						(* Priority := 1; *)
#293						MOVE		1,Priority	{LNXT:82|96|-1}
(*) BOOL
08034B39  B8 01 00 00 00                mov eax, 01H
08034B3E  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+12

#294		
#295		$label23:
#296					(* END_IF *)
#297					JMP		$label21	{LNXT:74|77|85}
(-) INT
08034B45  EB 27 90 90 90                jmp 08034B6EH

#298		$label20:
#299		
#300				(* ELSE *)
#301		
#302					(* Alarms.10 := false; *)
#303					MOVE		false,Alarms.10	{LNXT:85|96|-1}
(*) INT
08034B4A  B8 00 00 00 00                mov eax, 00H
08034B4F  84 C0                         test al, al
08034B51  90 75 11 90 90 90             jne 00000014H@
08034B57  66 0F BA 35 CC CC CC CC 0A    btr word ptr [CCCCCCCCH], 10 ; %M110+14
08034B60  EB 0C 90 90 90                jmp 0000000EH@
08034B65  66 0F BA 2D CC CC CC CC 0A    bts word ptr [CCCCCCCCH], 10 ; %M110+14

#304		
#305		$label21:
#306				(* END_IF *)
#307		
#308		$label19:
#309			(* END_IF *)
#310		
#311		
#312			(* IF FastRun <> FastRunMode *)
#313			LD		FastRun	{LNXT:96|-1|-1}
(*) UNDEF
08034B6E  33 C0                         xor eax, eax
08034B70  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %M110+18

#314			NE		FastRunMode	{LNXT:96|-1|-1}
(*) BOOL
08034B76  33 C9                         xor ecx, ecx
08034B78  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+94
08034B7E  33 C1                         xor eax, ecx

#315			JMPCN	$label24	{LNXT:96|97|103}
(-) BOOL
08034B80  84 C0                         test al, al
08034B82  90 74 14 90 90 90             je 08034B99H

#316		
#317			(* THEN *)
#318		
#319				(* FastRunMode := FastRun; *)
#320				MOVE		FastRun,FastRunMode	{LNXT:97|103|-1}
(*) BOOL
08034B88  33 C0                         xor eax, eax
08034B8A  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %M110+18
08034B90  84 C0                         test al, al
08034B92  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+94

#321		
#322		$label24:
#323			(* END_IF *)
#324		
#325		
#326			(* IF Motor_A *)
#327			LD		Motor_A	{LNXT:103|-1|-1}
(*) UNDEF
08034B99  33 C0                         xor eax, eax
08034B9B  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+0

#328			JMPCN	$label25	{LNXT:103|104|106}
(-) BOOL
08034BA1  84 C0                         test al, al
08034BA3  90 74 27 90 90 90             je 08034BCDH

#329		
#330			(* THEN *)
#331		
#332				(* state_motor_1 := 'On'; *)
#333				MOVE		'On',state_motor_1	{LNXT:104|109|-1}
(*) BOOL
08034BA9  B8 CC CC CC CC                mov eax, CCCCCCCCH ; $$CODE$$+17632
08034BAE  50                            push eax
08034BAF  68 20 00 00 00                push 32
08034BB4  68 CC CC CC CC                push CCCCCCCCH ; %M110+32
08034BB9  50                            push eax
08034BBA  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; ST_STRING_SAFE
08034BBF  FF D1                         call ecx
08034BC1  81 C4 0C 00 00 00             add esp, 12
08034BC7  58                            pop eax

#334				JMP		$label26	{LNXT:103|104|106}
(-) STRING
08034BC8  EB 22 90 90 90                jmp 08034BECH

#335		$label25:
#336		
#337			(* ELSE *)
#338		
#339				(* state_motor_1 := 'Off'; *)
#340				MOVE		'Off',state_motor_1	{LNXT:106|109|-1}
(*) STRING
08034BCD  B8 CC CC CC CC                mov eax, CCCCCCCCH ; $$CODE$$+17636
08034BD2  50                            push eax
08034BD3  68 20 00 00 00                push 32
08034BD8  68 CC CC CC CC                push CCCCCCCCH ; %M110+32
08034BDD  50                            push eax
08034BDE  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; ST_STRING_SAFE
08034BE3  FF D1                         call ecx
08034BE5  81 C4 0C 00 00 00             add esp, 12
08034BEB  58                            pop eax

#341		
#342		$label26:
#343			(* END_IF *)
#344		
#345		
#346			(* IF Motor_B *)
#347			LD		Motor_B	{LNXT:109|-1|-1}
(*) UNDEF
08034BEC  33 C0                         xor eax, eax
08034BEE  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+1

#348			JMPCN	$label27	{LNXT:109|110|112}
(-) BOOL
08034BF4  84 C0                         test al, al
08034BF6  90 74 27 90 90 90             je 08034C20H

#349		
#350			(* THEN *)
#351		
#352				(* state_motor_2 := 'On'; *)
#353				MOVE		'On',state_motor_2	{LNXT:110|115|-1}
(*) BOOL
08034BFC  B8 CC CC CC CC                mov eax, CCCCCCCCH ; $$CODE$$+17632
08034C01  50                            push eax
08034C02  68 20 00 00 00                push 32
08034C07  68 CC CC CC CC                push CCCCCCCCH ; %M110+64
08034C0C  50                            push eax
08034C0D  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; ST_STRING_SAFE
08034C12  FF D1                         call ecx
08034C14  81 C4 0C 00 00 00             add esp, 12
08034C1A  58                            pop eax

#354				JMP		$label28	{LNXT:109|110|112}
(-) STRING
08034C1B  EB 22 90 90 90                jmp 08034C3FH

#355		$label27:
#356		
#357			(* ELSE *)
#358		
#359				(* state_motor_2 := 'Off'; *)
#360				MOVE		'Off',state_motor_2	{LNXT:112|115|-1}
(*) STRING
08034C20  B8 CC CC CC CC                mov eax, CCCCCCCCH ; $$CODE$$+17636
08034C25  50                            push eax
08034C26  68 20 00 00 00                push 32
08034C2B  68 CC CC CC CC                push CCCCCCCCH ; %M110+64
08034C30  50                            push eax
08034C31  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; ST_STRING_SAFE
08034C36  FF D1                         call ecx
08034C38  81 C4 0C 00 00 00             add esp, 12
08034C3E  58                            pop eax

#361		
#362		$label28:
#363			(* END_IF *)
#364		
#365		
#366			(* IF Motor_C *)
#367			LD		Motor_C	{LNXT:115|-1|-1}
(*) UNDEF
08034C3F  33 C0                         xor eax, eax
08034C41  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+2

#368			JMPCN	$label29	{LNXT:115|116|118}
(-) BOOL
08034C47  84 C0                         test al, al
08034C49  90 74 27 90 90 90             je 08034C73H

#369		
#370			(* THEN *)
#371		
#372				(* state_motor_3 := 'On'; *)
#373				MOVE		'On',state_motor_3	{LNXT:116|122|-1}
(*) BOOL
08034C4F  B8 CC CC CC CC                mov eax, CCCCCCCCH ; $$CODE$$+17632
08034C54  50                            push eax
08034C55  68 20 00 00 00                push 32
08034C5A  68 CC CC CC CC                push CCCCCCCCH ; %M110+96
08034C5F  50                            push eax
08034C60  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; ST_STRING_SAFE
08034C65  FF D1                         call ecx
08034C67  81 C4 0C 00 00 00             add esp, 12
08034C6D  58                            pop eax

#374				JMP		$label30	{LNXT:115|116|118}
(-) STRING
08034C6E  EB 22 90 90 90                jmp 08034C92H

#375		$label29:
#376		
#377			(* ELSE *)
#378		
#379				(* state_motor_3 := 'Off'; *)
#380				MOVE		'Off',state_motor_3	{LNXT:118|122|-1}
(*) STRING
08034C73  B8 CC CC CC CC                mov eax, CCCCCCCCH ; $$CODE$$+17636
08034C78  50                            push eax
08034C79  68 20 00 00 00                push 32
08034C7E  68 CC CC CC CC                push CCCCCCCCH ; %M110+96
08034C83  50                            push eax
08034C84  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; ST_STRING_SAFE
08034C89  FF D1                         call ecx
08034C8B  81 C4 0C 00 00 00             add esp, 12
08034C91  58                            pop eax

#381		
#382		$label30:
#383			(* END_IF *)
#384		
#385		
#386			(* IF Avto_A *)
#387			LD		Avto_A	{LNXT:122|-1|-1}
(*) UNDEF
08034C92  33 C0                         xor eax, eax
08034C94  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+49

#388			JMPCN	$label31	{LNXT:122|123|125}
(-) BOOL
08034C9A  84 C0                         test al, al
08034C9C  90 74 27 90 90 90             je 08034CC6H

#389		
#390			(* THEN *)
#391		
#392				(* auto_state_1 := 'Auto'; *)
#393				MOVE		'Auto',auto_state_1	{LNXT:123|128|-1}
(*) BOOL
08034CA2  B8 CC CC CC CC                mov eax, CCCCCCCCH ; $$CODE$$+17652
08034CA7  50                            push eax
08034CA8  68 0B 00 00 00                push 11
08034CAD  68 CC CC CC CC                push CCCCCCCCH ; %M110+128
08034CB2  50                            push eax
08034CB3  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; ST_STRING_SAFE
08034CB8  FF D1                         call ecx
08034CBA  81 C4 0C 00 00 00             add esp, 12
08034CC0  58                            pop eax

#394				JMP		$label32	{LNXT:122|123|125}
(-) STRING
08034CC1  EB 22 90 90 90                jmp 08034CE5H

#395		$label31:
#396		
#397			(* ELSE *)
#398		
#399				(* auto_state_1 := 'Hand'; *)
#400				MOVE		'Hand',auto_state_1	{LNXT:125|128|-1}
(*) STRING
08034CC6  B8 CC CC CC CC                mov eax, CCCCCCCCH ; $$CODE$$+17658
08034CCB  50                            push eax
08034CCC  68 0B 00 00 00                push 11
08034CD1  68 CC CC CC CC                push CCCCCCCCH ; %M110+128
08034CD6  50                            push eax
08034CD7  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; ST_STRING_SAFE
08034CDC  FF D1                         call ecx
08034CDE  81 C4 0C 00 00 00             add esp, 12
08034CE4  58                            pop eax

#401		
#402		$label32:
#403			(* END_IF *)
#404		
#405		
#406			(* IF Avto_B *)
#407			LD		Avto_B	{LNXT:128|-1|-1}
(*) UNDEF
08034CE5  33 C0                         xor eax, eax
08034CE7  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+46

#408			JMPCN	$label33	{LNXT:128|129|131}
(-) BOOL
08034CED  84 C0                         test al, al
08034CEF  90 74 27 90 90 90             je 08034D19H

#409		
#410			(* THEN *)
#411		
#412				(* auto_state_2 := 'Auto'; *)
#413				MOVE		'Auto',auto_state_2	{LNXT:129|134|-1}
(*) BOOL
08034CF5  B8 CC CC CC CC                mov eax, CCCCCCCCH ; $$CODE$$+17652
08034CFA  50                            push eax
08034CFB  68 0B 00 00 00                push 11
08034D00  68 CC CC CC CC                push CCCCCCCCH ; %M110+140
08034D05  50                            push eax
08034D06  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; ST_STRING_SAFE
08034D0B  FF D1                         call ecx
08034D0D  81 C4 0C 00 00 00             add esp, 12
08034D13  58                            pop eax

#414				JMP		$label34	{LNXT:128|129|131}
(-) STRING
08034D14  EB 22 90 90 90                jmp 08034D38H

#415		$label33:
#416		
#417			(* ELSE *)
#418		
#419				(* auto_state_2 := 'Hand'; *)
#420				MOVE		'Hand',auto_state_2	{LNXT:131|134|-1}
(*) STRING
08034D19  B8 CC CC CC CC                mov eax, CCCCCCCCH ; $$CODE$$+17658
08034D1E  50                            push eax
08034D1F  68 0B 00 00 00                push 11
08034D24  68 CC CC CC CC                push CCCCCCCCH ; %M110+140
08034D29  50                            push eax
08034D2A  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; ST_STRING_SAFE
08034D2F  FF D1                         call ecx
08034D31  81 C4 0C 00 00 00             add esp, 12
08034D37  58                            pop eax

#421		
#422		$label34:
#423			(* END_IF *)
#424		
#425		
#426			(* IF Avto_C *)
#427			LD		Avto_C	{LNXT:134|-1|-1}
(*) UNDEF
08034D38  33 C0                         xor eax, eax
08034D3A  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+48

#428			JMPCN	$label35	{LNXT:134|135|137}
(-) BOOL
08034D40  84 C0                         test al, al
08034D42  90 74 27 90 90 90             je 08034D6CH

#429		
#430			(* THEN *)
#431		
#432				(* auto_state_3 := 'Auto'; *)
#433				MOVE		'Auto',auto_state_3	{LNXT:135|143|-1}
(*) BOOL
08034D48  B8 CC CC CC CC                mov eax, CCCCCCCCH ; $$CODE$$+17652
08034D4D  50                            push eax
08034D4E  68 0B 00 00 00                push 11
08034D53  68 CC CC CC CC                push CCCCCCCCH ; %M110+152
08034D58  50                            push eax
08034D59  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; ST_STRING_SAFE
08034D5E  FF D1                         call ecx
08034D60  81 C4 0C 00 00 00             add esp, 12
08034D66  58                            pop eax

#434				JMP		$label36	{LNXT:134|135|137}
(-) STRING
08034D67  EB 22 90 90 90                jmp 08034D8BH

#435		$label35:
#436		
#437			(* ELSE *)
#438		
#439				(* auto_state_3 := 'Hand'; *)
#440				MOVE		'Hand',auto_state_3	{LNXT:137|143|-1}
(*) STRING
08034D6C  B8 CC CC CC CC                mov eax, CCCCCCCCH ; $$CODE$$+17658
08034D71  50                            push eax
08034D72  68 0B 00 00 00                push 11
08034D77  68 CC CC CC CC                push CCCCCCCCH ; %M110+152
08034D7C  50                            push eax
08034D7D  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; ST_STRING_SAFE
08034D82  FF D1                         call ecx
08034D84  81 C4 0C 00 00 00             add esp, 12
08034D8A  58                            pop eax

#441		
#442		$label36:
#443			(* END_IF *)
#444		
#445		
#446			(* IF Tank_Level >= Level_1 and Rotation *)
#447			LD		Tank_Level	{LNXT:143|-1|-1}
(*) UNDEF
08034D8B  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+18

#448			GE		Level_1	{LNXT:143|-1|-1}
(*) INT
08034D92  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; %M110+6
08034D99  3B C1                         cmp eax, ecx
08034D9B  0F 9D C0                      setge al
08034D9E  25 FF 00 00 00                and eax, 0FFh

#449			AND		Rotation	{LNXT:143|-1|-1}
(*) BOOL
08034DA3  33 C9                         xor ecx, ecx
08034DA5  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %M110+16
08034DAB  23 C1                         and eax, ecx

#450			JMPCN	$label37	{LNXT:143|146|201}
(-) BOOL
08034DAD  84 C0                         test al, al
08034DAF  0F 84 AB 03 00 00             je 08035160H

#451		
#452			(* THEN *)
#453		
#454		
#455				(* CASE Rotationnumber OF *)
#456		
#457				(* 0: *)
#458				LD		Rotationnumber	{LNXT:146|-1|-1}
(*) UNDEF
08034DB5  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+96

#459				EQ		0	{LNXT:146|-1|-1}
(*) INT
08034DBC  3D 00 00 00 00                cmp eax, 0
08034DC1  0F 94 C0                      sete al
08034DC4  25 FF 00 00 00                and eax, 0FFh

#460				JMPC		$label39	{LNXT:146|147|163}
(-) BOOL
08034DC9  84 C0                         test al, al
08034DCB  90 75 40 90 90 90             jne 08034E0EH

#461		
#462				(* 1: *)
#463				LD		Rotationnumber	{LNXT:163|-1|-1}
(*) UNDEF
08034DD1  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+96

#464				EQ		1	{LNXT:163|-1|-1}
(*) INT
08034DD8  3D 01 00 00 00                cmp eax, 1
08034DDD  0F 94 C0                      sete al
08034DE0  25 FF 00 00 00                and eax, 0FFh

#465				JMPC		$label40	{LNXT:163|164|180}
(-) BOOL
08034DE5  84 C0                         test al, al
08034DE7  0F 85 3E 01 00 00             jne 08034F2BH

#466		
#467				(* 2: *)
#468				LD		Rotationnumber	{LNXT:180|-1|-1}
(*) UNDEF
08034DED  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+96

#469				EQ		2	{LNXT:180|-1|-1}
(*) INT
08034DF4  3D 02 00 00 00                cmp eax, 2
08034DF9  0F 94 C0                      sete al
08034DFC  25 FF 00 00 00                and eax, 0FFh

#470				JMPC		$label41	{LNXT:180|181|201}
(-) BOOL
08034E01  84 C0                         test al, al
08034E03  0F 85 3F 02 00 00             jne 08035048H

#471				JMP		$label38	{LNXT:180|181|201}
(-) BOOL
08034E09  E9 52 03 00 00                jmp 08035160H

#472		
#473				(* Istruzioni di ciascun CASE: *)
#474		
#475		$label39:
#476		
#477					(* IF Avto_A AND NOT Motor_B AND NOT Motor_C *)
#478					LD		Motor_C	{LNXT:147|-1|-1}
(*) UNDEF
08034E0E  33 C0                         xor eax, eax
08034E10  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+2

#479					NOT	{LNXT:147|-1|-1}
(*) BOOL
08034E16  84 C0                         test al, al
08034E18  0F 94 C0                      sete al

#480					AND(		Motor_B	{LNXT:147|-1|-1}
(*) BOOL
08034E1B  50                            push eax
08034E1C  33 C0                         xor eax, eax
08034E1E  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+1

#481					NOT	{LNXT:147|-1|-1}
(*) BOOL
08034E24  84 C0                         test al, al
08034E26  0F 94 C0                      sete al

#482					AND		Avto_A	{LNXT:147|-1|-1}
(*) BOOL
08034E29  33 C9                         xor ecx, ecx
08034E2B  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+49
08034E31  23 C1                         and eax, ecx

#483					)	{LNXT:147|-1|-1}
(*) BOOL
08034E33  8B C8                         mov ecx, eax
08034E35  58                            pop eax
08034E36  23 C1                         and eax, ecx

#484					JMPCN	$label42	{LNXT:147|148|151}
(-) BOOL
08034E38  84 C0                         test al, al
08034E3A  90 74 33 90 90 90             je 08034E70H

#485		
#486					(* THEN *)
#487		
#488						(* Motor_A := TRUE; *)
#489						MOVE		TRUE,Motor_A	{LNXT:148|149|-1}
(*) BOOL
08034E40  B8 01 00 00 00                mov eax, 01H
08034E45  84 C0                         test al, al
08034E47  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+0

#490		
#491						(* Rotationnumber := (Rotationnumber + 1) MOD 3; *)
#492						LD		Rotationnumber	{LNXT:149|201|-1}
(*) UNDEF
08034E4E  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+96

#493						ADD		1	{LNXT:149|201|-1}
(*) INT
08034E55  05 01 00 00 00                add eax, 1

#494						MOD		3	{LNXT:149|201|-1}
(*) INT
08034E5A  99                            cdq
08034E5B  B9 03 00 00 00                mov ecx, 3
08034E60  F7 F9                         idiv ecx
08034E62  8B C2                         mov eax, edx

#495						ST		Rotationnumber	{LNXT:149|201|-1}
(*) INT
08034E64  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+96

#496						JMP		$label43	{LNXT:147|148|151}
(-) INT
08034E6B  E9 B6 00 00 00                jmp 08034F26H

#497		$label42:
#498		
#499					(* ELSIF Avto_A AND NOT Motor_B AND NOT Motor_C *)
#500					LD		Motor_C	{LNXT:151|-1|-1}
(*) UNDEF
08034E70  33 C0                         xor eax, eax
08034E72  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+2

#501					NOT	{LNXT:151|-1|-1}
(*) BOOL
08034E78  84 C0                         test al, al
08034E7A  0F 94 C0                      sete al

#502					AND(		Motor_B	{LNXT:151|-1|-1}
(*) BOOL
08034E7D  50                            push eax
08034E7E  33 C0                         xor eax, eax
08034E80  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+1

#503					NOT	{LNXT:151|-1|-1}
(*) BOOL
08034E86  84 C0                         test al, al
08034E88  0F 94 C0                      sete al

#504					AND(		Avto_A	{LNXT:151|-1|-1}
(*) BOOL
08034E8B  50                            push eax
08034E8C  33 C0                         xor eax, eax
08034E8E  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+49

#505					NOT	{LNXT:151|-1|-1}
(*) BOOL
08034E94  84 C0                         test al, al
08034E96  0F 94 C0                      sete al

#506					)	{LNXT:151|-1|-1}
(*) BOOL
08034E99  8B C8                         mov ecx, eax
08034E9B  58                            pop eax
08034E9C  23 C1                         and eax, ecx

#507					)	{LNXT:151|-1|-1}
(*) BOOL
08034E9E  8B C8                         mov ecx, eax
08034EA0  58                            pop eax
08034EA1  23 C1                         and eax, ecx

#508					JMPCN	$label43	{LNXT:151|153|201}
(-) BOOL
08034EA3  84 C0                         test al, al
08034EA5  0F 84 7B 00 00 00             je 08034F26H

#509		
#510					(* THEN *)
#511		
#512		
#513						(* IF Avto_B *)
#514						LD		Avto_B	{LNXT:153|-1|-1}
(*) UNDEF
08034EAB  33 C0                         xor eax, eax
08034EAD  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+46

#515						JMPCN	$label44	{LNXT:153|154|157}
(-) BOOL
08034EB3  84 C0                         test al, al
08034EB5  90 74 33 90 90 90             je 08034EEBH

#516		
#517						(* THEN *)
#518		
#519							(* Motor_B := TRUE; *)
#520							MOVE		TRUE,Motor_B	{LNXT:154|155|-1}
(*) BOOL
08034EBB  B8 01 00 00 00                mov eax, 01H
08034EC0  84 C0                         test al, al
08034EC2  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+1

#521		
#522							(* Rotationnumber := (Rotationnumber + 1) MOD 3; *)
#523							LD		Rotationnumber	{LNXT:155|201|-1}
(*) UNDEF
08034EC9  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+96

#524							ADD		1	{LNXT:155|201|-1}
(*) INT
08034ED0  05 01 00 00 00                add eax, 1

#525							MOD		3	{LNXT:155|201|-1}
(*) INT
08034ED5  99                            cdq
08034ED6  B9 03 00 00 00                mov ecx, 3
08034EDB  F7 F9                         idiv ecx
08034EDD  8B C2                         mov eax, edx

#526							ST		Rotationnumber	{LNXT:155|201|-1}
(*) INT
08034EDF  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+96

#527							JMP		$label45	{LNXT:153|154|157}
(-) INT
08034EE6  EB 3E 90 90 90                jmp 08034F26H

#528		$label44:
#529		
#530						(* ELSIF Avto_C *)
#531						LD		Avto_C	{LNXT:157|-1|-1}
(*) UNDEF
08034EEB  33 C0                         xor eax, eax
08034EED  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+48

#532						JMPCN	$label45	{LNXT:157|158|201}
(-) BOOL
08034EF3  84 C0                         test al, al
08034EF5  90 74 2E 90 90 90             je 08034F26H

#533		
#534						(* THEN *)
#535		
#536							(* Motor_C := TRUE; *)
#537							MOVE		TRUE,Motor_C	{LNXT:158|159|-1}
(*) BOOL
08034EFB  B8 01 00 00 00                mov eax, 01H
08034F00  84 C0                         test al, al
08034F02  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+2

#538		
#539							(* Rotationnumber := (Rotationnumber + 2) MOD 3; *)
#540							LD		Rotationnumber	{LNXT:159|201|-1}
(*) UNDEF
08034F09  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+96

#541							ADD		2	{LNXT:159|201|-1}
(*) INT
08034F10  05 02 00 00 00                add eax, 2

#542							MOD		3	{LNXT:159|201|-1}
(*) INT
08034F15  99                            cdq
08034F16  B9 03 00 00 00                mov ecx, 3
08034F1B  F7 F9                         idiv ecx
08034F1D  8B C2                         mov eax, edx

#543							ST		Rotationnumber	{LNXT:159|201|-1}
(*) INT
08034F1F  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+96

#544		
#545		$label45:
#546						(* END_IF *)
#547		
#548		$label43:
#549					(* END_IF *)
#550					JMP		$label38	{LNXT:1|201|-1}
(-) INT
08034F26  E9 35 02 00 00                jmp 08035160H

#551		
#552		$label40:
#553		
#554					(* IF Avto_B AND NOT Motor_A AND NOT Motor_C *)
#555					LD		Motor_C	{LNXT:164|-1|-1}
(*) UNDEF
08034F2B  33 C0                         xor eax, eax
08034F2D  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+2

#556					NOT	{LNXT:164|-1|-1}
(*) BOOL
08034F33  84 C0                         test al, al
08034F35  0F 94 C0                      sete al

#557					AND(		Motor_A	{LNXT:164|-1|-1}
(*) BOOL
08034F38  50                            push eax
08034F39  33 C0                         xor eax, eax
08034F3B  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+0

#558					NOT	{LNXT:164|-1|-1}
(*) BOOL
08034F41  84 C0                         test al, al
08034F43  0F 94 C0                      sete al

#559					AND		Avto_B	{LNXT:164|-1|-1}
(*) BOOL
08034F46  33 C9                         xor ecx, ecx
08034F48  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+46
08034F4E  23 C1                         and eax, ecx

#560					)	{LNXT:164|-1|-1}
(*) BOOL
08034F50  8B C8                         mov ecx, eax
08034F52  58                            pop eax
08034F53  23 C1                         and eax, ecx

#561					JMPCN	$label46	{LNXT:164|165|168}
(-) BOOL
08034F55  84 C0                         test al, al
08034F57  90 74 33 90 90 90             je 08034F8DH

#562		
#563					(* THEN *)
#564		
#565						(* Motor_B := TRUE; *)
#566						MOVE		TRUE,Motor_B	{LNXT:165|166|-1}
(*) BOOL
08034F5D  B8 01 00 00 00                mov eax, 01H
08034F62  84 C0                         test al, al
08034F64  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+1

#567		
#568						(* Rotationnumber := (Rotationnumber + 1) MOD 3; *)
#569						LD		Rotationnumber	{LNXT:166|201|-1}
(*) UNDEF
08034F6B  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+96

#570						ADD		1	{LNXT:166|201|-1}
(*) INT
08034F72  05 01 00 00 00                add eax, 1

#571						MOD		3	{LNXT:166|201|-1}
(*) INT
08034F77  99                            cdq
08034F78  B9 03 00 00 00                mov ecx, 3
08034F7D  F7 F9                         idiv ecx
08034F7F  8B C2                         mov eax, edx

#572						ST		Rotationnumber	{LNXT:166|201|-1}
(*) INT
08034F81  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+96

#573						JMP		$label47	{LNXT:164|165|168}
(-) INT
08034F88  E9 B6 00 00 00                jmp 08035043H

#574		$label46:
#575		
#576					(* ELSIF Avto_B AND NOT Motor_A AND NOT Motor_C *)
#577					LD		Motor_C	{LNXT:168|-1|-1}
(*) UNDEF
08034F8D  33 C0                         xor eax, eax
08034F8F  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+2

#578					NOT	{LNXT:168|-1|-1}
(*) BOOL
08034F95  84 C0                         test al, al
08034F97  0F 94 C0                      sete al

#579					AND(		Motor_A	{LNXT:168|-1|-1}
(*) BOOL
08034F9A  50                            push eax
08034F9B  33 C0                         xor eax, eax
08034F9D  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+0

#580					NOT	{LNXT:168|-1|-1}
(*) BOOL
08034FA3  84 C0                         test al, al
08034FA5  0F 94 C0                      sete al

#581					AND(		Avto_B	{LNXT:168|-1|-1}
(*) BOOL
08034FA8  50                            push eax
08034FA9  33 C0                         xor eax, eax
08034FAB  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+46

#582					NOT	{LNXT:168|-1|-1}
(*) BOOL
08034FB1  84 C0                         test al, al
08034FB3  0F 94 C0                      sete al

#583					)	{LNXT:168|-1|-1}
(*) BOOL
08034FB6  8B C8                         mov ecx, eax
08034FB8  58                            pop eax
08034FB9  23 C1                         and eax, ecx

#584					)	{LNXT:168|-1|-1}
(*) BOOL
08034FBB  8B C8                         mov ecx, eax
08034FBD  58                            pop eax
08034FBE  23 C1                         and eax, ecx

#585					JMPCN	$label47	{LNXT:168|170|201}
(-) BOOL
08034FC0  84 C0                         test al, al
08034FC2  0F 84 7B 00 00 00             je 08035043H

#586		
#587					(* THEN *)
#588		
#589		
#590						(* IF Avto_A *)
#591						LD		Avto_A	{LNXT:170|-1|-1}
(*) UNDEF
08034FC8  33 C0                         xor eax, eax
08034FCA  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+49

#592						JMPCN	$label48	{LNXT:170|171|174}
(-) BOOL
08034FD0  84 C0                         test al, al
08034FD2  90 74 33 90 90 90             je 08035008H

#593		
#594						(* THEN *)
#595		
#596							(* Motor_A := TRUE; *)
#597							MOVE		TRUE,Motor_A	{LNXT:171|172|-1}
(*) BOOL
08034FD8  B8 01 00 00 00                mov eax, 01H
08034FDD  84 C0                         test al, al
08034FDF  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+0

#598		
#599							(* Rotationnumber := (Rotationnumber - 1) MOD 3; *)
#600							LD		Rotationnumber	{LNXT:172|201|-1}
(*) UNDEF
08034FE6  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+96

#601							SUB		1	{LNXT:172|201|-1}
(*) INT
08034FED  2D 01 00 00 00                sub eax, 1

#602							MOD		3	{LNXT:172|201|-1}
(*) INT
08034FF2  99                            cdq
08034FF3  B9 03 00 00 00                mov ecx, 3
08034FF8  F7 F9                         idiv ecx
08034FFA  8B C2                         mov eax, edx

#603							ST		Rotationnumber	{LNXT:172|201|-1}
(*) INT
08034FFC  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+96

#604							JMP		$label49	{LNXT:170|171|174}
(-) INT
08035003  EB 3E 90 90 90                jmp 08035043H

#605		$label48:
#606		
#607						(* ELSIF Avto_C *)
#608						LD		Avto_C	{LNXT:174|-1|-1}
(*) UNDEF
08035008  33 C0                         xor eax, eax
0803500A  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+48

#609						JMPCN	$label49	{LNXT:174|175|201}
(-) BOOL
08035010  84 C0                         test al, al
08035012  90 74 2E 90 90 90             je 08035043H

#610		
#611						(* THEN *)
#612		
#613							(* Motor_C := TRUE; *)
#614							MOVE		TRUE,Motor_C	{LNXT:175|176|-1}
(*) BOOL
08035018  B8 01 00 00 00                mov eax, 01H
0803501D  84 C0                         test al, al
0803501F  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+2

#615		
#616							(* Rotationnumber := (Rotationnumber + 1) MOD 3; *)
#617							LD		Rotationnumber	{LNXT:176|201|-1}
(*) UNDEF
08035026  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+96

#618							ADD		1	{LNXT:176|201|-1}
(*) INT
0803502D  05 01 00 00 00                add eax, 1

#619							MOD		3	{LNXT:176|201|-1}
(*) INT
08035032  99                            cdq
08035033  B9 03 00 00 00                mov ecx, 3
08035038  F7 F9                         idiv ecx
0803503A  8B C2                         mov eax, edx

#620							ST		Rotationnumber	{LNXT:176|201|-1}
(*) INT
0803503C  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+96

#621		
#622		$label49:
#623						(* END_IF *)
#624		
#625		$label47:
#626					(* END_IF *)
#627					JMP		$label38	{LNXT:1|201|-1}
(-) INT
08035043  E9 18 01 00 00                jmp 08035160H

#628		
#629		$label41:
#630		
#631					(* IF Avto_C AND NOT Motor_A AND NOT Motor_B *)
#632					LD		Motor_B	{LNXT:181|-1|-1}
(*) UNDEF
08035048  33 C0                         xor eax, eax
0803504A  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+1

#633					NOT	{LNXT:181|-1|-1}
(*) BOOL
08035050  84 C0                         test al, al
08035052  0F 94 C0                      sete al

#634					AND(		Motor_A	{LNXT:181|-1|-1}
(*) BOOL
08035055  50                            push eax
08035056  33 C0                         xor eax, eax
08035058  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+0

#635					NOT	{LNXT:181|-1|-1}
(*) BOOL
0803505E  84 C0                         test al, al
08035060  0F 94 C0                      sete al

#636					AND		Avto_C	{LNXT:181|-1|-1}
(*) BOOL
08035063  33 C9                         xor ecx, ecx
08035065  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+48
0803506B  23 C1                         and eax, ecx

#637					)	{LNXT:181|-1|-1}
(*) BOOL
0803506D  8B C8                         mov ecx, eax
0803506F  58                            pop eax
08035070  23 C1                         and eax, ecx

#638					JMPCN	$label50	{LNXT:181|182|185}
(-) BOOL
08035072  84 C0                         test al, al
08035074  90 74 33 90 90 90             je 080350AAH

#639		
#640					(* THEN *)
#641		
#642						(* Motor_C := TRUE; *)
#643						MOVE		TRUE,Motor_C	{LNXT:182|183|-1}
(*) BOOL
0803507A  B8 01 00 00 00                mov eax, 01H
0803507F  84 C0                         test al, al
08035081  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+2

#644		
#645						(* Rotationnumber := (Rotationnumber + 1) MOD 3; *)
#646						LD		Rotationnumber	{LNXT:183|201|-1}
(*) UNDEF
08035088  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+96

#647						ADD		1	{LNXT:183|201|-1}
(*) INT
0803508F  05 01 00 00 00                add eax, 1

#648						MOD		3	{LNXT:183|201|-1}
(*) INT
08035094  99                            cdq
08035095  B9 03 00 00 00                mov ecx, 3
0803509A  F7 F9                         idiv ecx
0803509C  8B C2                         mov eax, edx

#649						ST		Rotationnumber	{LNXT:183|201|-1}
(*) INT
0803509E  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+96

#650						JMP		$label51	{LNXT:181|182|185}
(-) INT
080350A5  E9 B6 00 00 00                jmp 08035160H

#651		$label50:
#652		
#653					(* ELSIF Avto_C AND NOT Motor_A AND NOT Motor_B *)
#654					LD		Motor_B	{LNXT:185|-1|-1}
(*) UNDEF
080350AA  33 C0                         xor eax, eax
080350AC  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+1

#655					NOT	{LNXT:185|-1|-1}
(*) BOOL
080350B2  84 C0                         test al, al
080350B4  0F 94 C0                      sete al

#656					AND(		Motor_A	{LNXT:185|-1|-1}
(*) BOOL
080350B7  50                            push eax
080350B8  33 C0                         xor eax, eax
080350BA  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+0

#657					NOT	{LNXT:185|-1|-1}
(*) BOOL
080350C0  84 C0                         test al, al
080350C2  0F 94 C0                      sete al

#658					AND(		Avto_C	{LNXT:185|-1|-1}
(*) BOOL
080350C5  50                            push eax
080350C6  33 C0                         xor eax, eax
080350C8  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+48

#659					NOT	{LNXT:185|-1|-1}
(*) BOOL
080350CE  84 C0                         test al, al
080350D0  0F 94 C0                      sete al

#660					)	{LNXT:185|-1|-1}
(*) BOOL
080350D3  8B C8                         mov ecx, eax
080350D5  58                            pop eax
080350D6  23 C1                         and eax, ecx

#661					)	{LNXT:185|-1|-1}
(*) BOOL
080350D8  8B C8                         mov ecx, eax
080350DA  58                            pop eax
080350DB  23 C1                         and eax, ecx

#662					JMPCN	$label51	{LNXT:185|187|201}
(-) BOOL
080350DD  84 C0                         test al, al
080350DF  0F 84 7B 00 00 00             je 08035160H

#663		
#664					(* THEN *)
#665		
#666		
#667						(* IF Avto_A *)
#668						LD		Avto_A	{LNXT:187|-1|-1}
(*) UNDEF
080350E5  33 C0                         xor eax, eax
080350E7  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+49

#669						JMPCN	$label52	{LNXT:187|188|191}
(-) BOOL
080350ED  84 C0                         test al, al
080350EF  90 74 33 90 90 90             je 08035125H

#670		
#671						(* THEN *)
#672		
#673							(* Motor_A := TRUE; *)
#674							MOVE		TRUE,Motor_A	{LNXT:188|189|-1}
(*) BOOL
080350F5  B8 01 00 00 00                mov eax, 01H
080350FA  84 C0                         test al, al
080350FC  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+0

#675		
#676							(* Rotationnumber := (Rotationnumber + 1) MOD 3; *)
#677							LD		Rotationnumber	{LNXT:189|201|-1}
(*) UNDEF
08035103  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+96

#678							ADD		1	{LNXT:189|201|-1}
(*) INT
0803510A  05 01 00 00 00                add eax, 1

#679							MOD		3	{LNXT:189|201|-1}
(*) INT
0803510F  99                            cdq
08035110  B9 03 00 00 00                mov ecx, 3
08035115  F7 F9                         idiv ecx
08035117  8B C2                         mov eax, edx

#680							ST		Rotationnumber	{LNXT:189|201|-1}
(*) INT
08035119  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+96

#681							JMP		$label53	{LNXT:187|188|191}
(-) INT
08035120  EB 3E 90 90 90                jmp 08035160H

#682		$label52:
#683		
#684						(* ELSIF Avto_B *)
#685						LD		Avto_B	{LNXT:191|-1|-1}
(*) UNDEF
08035125  33 C0                         xor eax, eax
08035127  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+46

#686						JMPCN	$label53	{LNXT:191|192|201}
(-) BOOL
0803512D  84 C0                         test al, al
0803512F  90 74 2E 90 90 90             je 08035160H

#687		
#688						(* THEN *)
#689		
#690							(* Motor_B := TRUE; *)
#691							MOVE		TRUE,Motor_B	{LNXT:192|193|-1}
(*) BOOL
08035135  B8 01 00 00 00                mov eax, 01H
0803513A  84 C0                         test al, al
0803513C  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+1

#692		
#693							(* Rotationnumber := (Rotationnumber - 1) MOD 3; *)
#694							LD		Rotationnumber	{LNXT:193|201|-1}
(*) UNDEF
08035143  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+96

#695							SUB		1	{LNXT:193|201|-1}
(*) INT
0803514A  2D 01 00 00 00                sub eax, 1

#696							MOD		3	{LNXT:193|201|-1}
(*) INT
0803514F  99                            cdq
08035150  B9 03 00 00 00                mov ecx, 3
08035155  F7 F9                         idiv ecx
08035157  8B C2                         mov eax, edx

#697							ST		Rotationnumber	{LNXT:193|201|-1}
(*) INT
08035159  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+96

#698		
#699		$label53:
#700						(* END_IF *)
#701		
#702		$label51:
#703					(* END_IF *)
#704		
#705		$label38:
#706		
#707				(* END_CASE *)
#708		
#709		$label37:
#710			(* END_IF *)
#711		
#712		
#713			(* IF Avto_A *)
#714			LD		Avto_A	{LNXT:201|-1|-1}
(*) UNDEF
08035160  33 C0                         xor eax, eax
08035162  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+49

#715			NOT	{LNXT:201|-1|-1}
(*) BOOL
08035168  84 C0                         test al, al
0803516A  0F 94 C0                      sete al

#716			JMPCN	$label54	{LNXT:201|202|204}
(-) BOOL
0803516D  84 C0                         test al, al
0803516F  90 74 11 90 90 90             je 08035183H

#717		
#718			(* THEN *)
#719		
#720				(* Motor_A := False; *)
#721				MOVE		False,Motor_A	{LNXT:202|204|-1}
(*) BOOL
08035175  B8 00 00 00 00                mov eax, 00H
0803517A  84 C0                         test al, al
0803517C  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+0

#722		
#723		$label54:
#724			(* END_IF *)
#725		
#726		
#727			(* IF Avto_B *)
#728			LD		Avto_B	{LNXT:204|-1|-1}
(*) UNDEF
08035183  33 C0                         xor eax, eax
08035185  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+46

#729			NOT	{LNXT:204|-1|-1}
(*) BOOL
0803518B  84 C0                         test al, al
0803518D  0F 94 C0                      sete al

#730			JMPCN	$label55	{LNXT:204|205|207}
(-) BOOL
08035190  84 C0                         test al, al
08035192  90 74 11 90 90 90             je 080351A6H

#731		
#732			(* THEN *)
#733		
#734				(* Motor_B := False; *)
#735				MOVE		False,Motor_B	{LNXT:205|207|-1}
(*) BOOL
08035198  B8 00 00 00 00                mov eax, 00H
0803519D  84 C0                         test al, al
0803519F  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+1

#736		
#737		$label55:
#738			(* END_IF *)
#739		
#740		
#741			(* IF Avto_C *)
#742			LD		Avto_C	{LNXT:207|-1|-1}
(*) UNDEF
080351A6  33 C0                         xor eax, eax
080351A8  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+48

#743			NOT	{LNXT:207|-1|-1}
(*) BOOL
080351AE  84 C0                         test al, al
080351B0  0F 94 C0                      sete al

#744			JMPCN	$label56	{LNXT:207|208|218}
(-) BOOL
080351B3  84 C0                         test al, al
080351B5  90 74 11 90 90 90             je 080351C9H

#745		
#746			(* THEN *)
#747		
#748				(* Motor_C := False; *)
#749				MOVE		False,Motor_C	{LNXT:208|218|-1}
(*) BOOL
080351BB  B8 00 00 00 00                mov eax, 00H
080351C0  84 C0                         test al, al
080351C2  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+2

#750		
#751		$label56:
#752			(* END_IF *)
#753		
#754		
#755			(* IF Tank_Level >= Level_1 AND NOT Rotation AND NOT FastRunMode *)
#756			LD		FastRunMode	{LNXT:218|-1|-1}
(*) UNDEF
080351C9  33 C0                         xor eax, eax
080351CB  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+94

#757			NOT	{LNXT:218|-1|-1}
(*) BOOL
080351D1  84 C0                         test al, al
080351D3  0F 94 C0                      sete al

#758			AND(		Rotation	{LNXT:218|-1|-1}
(*) BOOL
080351D6  50                            push eax
080351D7  33 C0                         xor eax, eax
080351D9  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %M110+16

#759			NOT	{LNXT:218|-1|-1}
(*) BOOL
080351DF  84 C0                         test al, al
080351E1  0F 94 C0                      sete al

#760			AND(		Tank_Level	{LNXT:218|-1|-1}
(*) BOOL
080351E4  50                            push eax
080351E5  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+18

#761			GE		Level_1	{LNXT:218|-1|-1}
(*) INT
080351EC  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; %M110+6
080351F3  3B C1                         cmp eax, ecx
080351F5  0F 9D C0                      setge al
080351F8  25 FF 00 00 00                and eax, 0FFh

#762			)	{LNXT:218|-1|-1}
(*) BOOL
080351FD  8B C8                         mov ecx, eax
080351FF  58                            pop eax
08035200  23 C1                         and eax, ecx

#763			)	{LNXT:218|-1|-1}
(*) BOOL
08035202  8B C8                         mov ecx, eax
08035204  58                            pop eax
08035205  23 C1                         and eax, ecx

#764			JMPCN	$label57	{LNXT:218|221|287}
(-) BOOL
08035207  84 C0                         test al, al
08035209  0F 84 B2 02 00 00             je 080354C1H

#765		
#766			(* THEN *)
#767		
#768		
#769				(* CASE Priority OF *)
#770		
#771				(* 0: *)
#772				LD		Priority	{LNXT:221|-1|-1}
(*) UNDEF
0803520F  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M110+12

#773				EQ		0	{LNXT:221|-1|-1}
(*) INT
08035216  3D 00 00 00 00                cmp eax, 0
0803521B  0F 94 C0                      sete al
0803521E  25 FF 00 00 00                and eax, 0FFh

#774				JMPC		$label59	{LNXT:221|222|242}
(-) BOOL
08035223  84 C0                         test al, al
08035225  90 75 40 90 90 90             jne 08035268H

#775		
#776				(* 1: *)
#777				LD		Priority	{LNXT:242|-1|-1}
(*) UNDEF
0803522B  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M110+12

#778				EQ		1	{LNXT:242|-1|-1}
(*) INT
08035232  3D 01 00 00 00                cmp eax, 1
08035237  0F 94 C0                      sete al
0803523A  25 FF 00 00 00                and eax, 0FFh

#779				JMPC		$label60	{LNXT:242|243|262}
(-) BOOL
0803523F  84 C0                         test al, al
08035241  0F 85 EB 00 00 00             jne 08035332H

#780		
#781				(* 2: *)
#782				LD		Priority	{LNXT:262|-1|-1}
(*) UNDEF
08035247  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M110+12

#783				EQ		2	{LNXT:262|-1|-1}
(*) INT
0803524E  3D 02 00 00 00                cmp eax, 2
08035253  0F 94 C0                      sete al
08035256  25 FF 00 00 00                and eax, 0FFh

#784				JMPC		$label61	{LNXT:262|263|287}
(-) BOOL
0803525B  84 C0                         test al, al
0803525D  0F 85 99 01 00 00             jne 080353FCH

#785				JMP		$label58	{LNXT:262|263|287}
(-) BOOL
08035263  E9 59 02 00 00                jmp 080354C1H

#786		
#787				(* Istruzioni di ciascun CASE: *)
#788		
#789		$label59:
#790		
#791					(* IF Motor_B AND NOT Motor_C *)
#792					LD		Motor_C	{LNXT:222|-1|-1}
(*) UNDEF
08035268  33 C0                         xor eax, eax
0803526A  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+2

#793					NOT	{LNXT:222|-1|-1}
(*) BOOL
08035270  84 C0                         test al, al
08035272  0F 94 C0                      sete al

#794					AND(		Motor_B	{LNXT:222|-1|-1}
(*) BOOL
08035275  50                            push eax
08035276  33 C0                         xor eax, eax
08035278  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+1

#795					NOT	{LNXT:222|-1|-1}
(*) BOOL
0803527E  84 C0                         test al, al
08035280  0F 94 C0                      sete al

#796					)	{LNXT:222|-1|-1}
(*) BOOL
08035283  8B C8                         mov ecx, eax
08035285  58                            pop eax
08035286  23 C1                         and eax, ecx

#797					JMPCN	$label62	{LNXT:222|223|287}
(-) BOOL
08035288  84 C0                         test al, al
0803528A  0F 84 9D 00 00 00             je 0803532DH

#798		
#799					(* THEN *)
#800		
#801		
#802						(* IF Avto_A *)
#803						LD		Avto_A	{LNXT:223|-1|-1}
(*) UNDEF
08035290  33 C0                         xor eax, eax
08035292  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+49

#804						JMPCN	$label63	{LNXT:223|224|228}
(-) BOOL
08035298  84 C0                         test al, al
0803529A  90 74 22 90 90 90             je 080352BFH

#805		
#806						(* THEN *)
#807		
#808							(* Priority := 0; *)
#809							MOVE		0,Priority	{LNXT:224|225|-1}
(*) BOOL
080352A0  B8 00 00 00 00                mov eax, 00H
080352A5  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+12

#810		
#811							(* Motor_A := TRUE; *)
#812							MOVE		TRUE,Motor_A	{LNXT:225|287|-1}
(*) INT
080352AC  B8 01 00 00 00                mov eax, 01H
080352B1  84 C0                         test al, al
080352B3  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+0

#813							JMP		$label64	{LNXT:223|224|228}
(-) BOOL
080352BA  EB 71 90 90 90                jmp 0803532DH

#814		$label63:
#815		
#816						(* ELSIF Avto_A *)
#817						LD		Avto_A	{LNXT:228|-1|-1}
(*) UNDEF
080352BF  33 C0                         xor eax, eax
080352C1  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+49

#818						NOT	{LNXT:228|-1|-1}
(*) BOOL
080352C7  84 C0                         test al, al
080352C9  0F 94 C0                      sete al

#819						JMPCN	$label64	{LNXT:228|230|287}
(-) BOOL
080352CC  84 C0                         test al, al
080352CE  90 74 5C 90 90 90             je 0803532DH

#820		
#821						(* THEN *)
#822		
#823		
#824							(* IF Avto_B *)
#825							LD		Avto_B	{LNXT:230|-1|-1}
(*) UNDEF
080352D4  33 C0                         xor eax, eax
080352D6  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+46

#826							JMPCN	$label65	{LNXT:230|231|234}
(-) BOOL
080352DC  84 C0                         test al, al
080352DE  90 74 22 90 90 90             je 08035303H

#827		
#828							(* THEN *)
#829		
#830								(* Priority := 1; *)
#831								MOVE		1,Priority	{LNXT:231|232|-1}
(*) BOOL
080352E4  B8 01 00 00 00                mov eax, 01H
080352E9  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+12

#832		
#833								(* Motor_B := TRUE; *)
#834								MOVE		TRUE,Motor_B	{LNXT:232|287|-1}
(*) INT
080352F0  B8 01 00 00 00                mov eax, 01H
080352F5  84 C0                         test al, al
080352F7  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+1

#835								JMP		$label66	{LNXT:230|231|234}
(-) BOOL
080352FE  EB 2D 90 90 90                jmp 0803532DH

#836		$label65:
#837		
#838							(* ELSIF Avto_C *)
#839							LD		Avto_C	{LNXT:234|-1|-1}
(*) UNDEF
08035303  33 C0                         xor eax, eax
08035305  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+48

#840							JMPCN	$label66	{LNXT:234|235|287}
(-) BOOL
0803530B  84 C0                         test al, al
0803530D  90 74 1D 90 90 90             je 0803532DH

#841		
#842							(* THEN *)
#843		
#844								(* Priority := 2; *)
#845								MOVE		2,Priority	{LNXT:235|236|-1}
(*) BOOL
08035313  B8 02 00 00 00                mov eax, 02H
08035318  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+12

#846		
#847								(* Motor_C := TRUE; *)
#848								MOVE		TRUE,Motor_C	{LNXT:236|287|-1}
(*) INT
0803531F  B8 01 00 00 00                mov eax, 01H
08035324  84 C0                         test al, al
08035326  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+2

#849		
#850		$label66:
#851							(* END_IF *)
#852		
#853		$label64:
#854						(* END_IF *)
#855		
#856		$label62:
#857					(* END_IF *)
#858					JMP		$label58	{LNXT:1|287|-1}
(-) BOOL
0803532D  E9 8F 01 00 00                jmp 080354C1H

#859		
#860		$label60:
#861		
#862					(* IF Motor_A AND NOT Motor_C *)
#863					LD		Motor_C	{LNXT:243|-1|-1}
(*) UNDEF
08035332  33 C0                         xor eax, eax
08035334  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+2

#864					NOT	{LNXT:243|-1|-1}
(*) BOOL
0803533A  84 C0                         test al, al
0803533C  0F 94 C0                      sete al

#865					AND(		Motor_A	{LNXT:243|-1|-1}
(*) BOOL
0803533F  50                            push eax
08035340  33 C0                         xor eax, eax
08035342  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+0

#866					NOT	{LNXT:243|-1|-1}
(*) BOOL
08035348  84 C0                         test al, al
0803534A  0F 94 C0                      sete al

#867					)	{LNXT:243|-1|-1}
(*) BOOL
0803534D  8B C8                         mov ecx, eax
0803534F  58                            pop eax
08035350  23 C1                         and eax, ecx

#868					JMPCN	$label67	{LNXT:243|244|287}
(-) BOOL
08035352  84 C0                         test al, al
08035354  0F 84 9D 00 00 00             je 080353F7H

#869		
#870					(* THEN *)
#871		
#872		
#873						(* IF Avto_B *)
#874						LD		Avto_B	{LNXT:244|-1|-1}
(*) UNDEF
0803535A  33 C0                         xor eax, eax
0803535C  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+46

#875						JMPCN	$label68	{LNXT:244|245|248}
(-) BOOL
08035362  84 C0                         test al, al
08035364  90 74 22 90 90 90             je 08035389H

#876		
#877						(* THEN *)
#878		
#879							(* Priority := 1; *)
#880							MOVE		1,Priority	{LNXT:245|246|-1}
(*) BOOL
0803536A  B8 01 00 00 00                mov eax, 01H
0803536F  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+12

#881		
#882							(* Motor_B := TRUE; *)
#883							MOVE		TRUE,Motor_B	{LNXT:246|287|-1}
(*) INT
08035376  B8 01 00 00 00                mov eax, 01H
0803537B  84 C0                         test al, al
0803537D  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+1

#884							JMP		$label69	{LNXT:244|245|248}
(-) BOOL
08035384  EB 71 90 90 90                jmp 080353F7H

#885		$label68:
#886		
#887						(* ELSIF Avto_B *)
#888						LD		Avto_B	{LNXT:248|-1|-1}
(*) UNDEF
08035389  33 C0                         xor eax, eax
0803538B  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+46

#889						NOT	{LNXT:248|-1|-1}
(*) BOOL
08035391  84 C0                         test al, al
08035393  0F 94 C0                      sete al

#890						JMPCN	$label69	{LNXT:248|250|287}
(-) BOOL
08035396  84 C0                         test al, al
08035398  90 74 5C 90 90 90             je 080353F7H

#891		
#892						(* THEN *)
#893		
#894		
#895							(* IF Avto_A *)
#896							LD		Avto_A	{LNXT:250|-1|-1}
(*) UNDEF
0803539E  33 C0                         xor eax, eax
080353A0  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+49

#897							JMPCN	$label70	{LNXT:250|251|254}
(-) BOOL
080353A6  84 C0                         test al, al
080353A8  90 74 22 90 90 90             je 080353CDH

#898		
#899							(* THEN *)
#900		
#901								(* Priority := 0; *)
#902								MOVE		0,Priority	{LNXT:251|252|-1}
(*) BOOL
080353AE  B8 00 00 00 00                mov eax, 00H
080353B3  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+12

#903		
#904								(* Motor_A := TRUE; *)
#905								MOVE		TRUE,Motor_A	{LNXT:252|287|-1}
(*) INT
080353BA  B8 01 00 00 00                mov eax, 01H
080353BF  84 C0                         test al, al
080353C1  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+0

#906								JMP		$label71	{LNXT:250|251|254}
(-) BOOL
080353C8  EB 2D 90 90 90                jmp 080353F7H

#907		$label70:
#908		
#909							(* ELSE *)
#910		
#911		
#912								(* IF Avto_C *)
#913								LD		Avto_C	{LNXT:254|-1|-1}
(*) UNDEF
080353CD  33 C0                         xor eax, eax
080353CF  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+48

#914								JMPCN	$label72	{LNXT:254|255|287}
(-) BOOL
080353D5  84 C0                         test al, al
080353D7  90 74 1D 90 90 90             je 080353F7H

#915		
#916								(* THEN *)
#917		
#918									(* Priority := 2; *)
#919									MOVE		2,Priority	{LNXT:255|256|-1}
(*) BOOL
080353DD  B8 02 00 00 00                mov eax, 02H
080353E2  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+12

#920		
#921									(* Motor_C := TRUE; *)
#922									MOVE		TRUE,Motor_C	{LNXT:256|287|-1}
(*) INT
080353E9  B8 01 00 00 00                mov eax, 01H
080353EE  84 C0                         test al, al
080353F0  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+2

#923		
#924		$label72:
#925								(* END_IF *)
#926		
#927		$label71:
#928							(* END_IF *)
#929		
#930		$label69:
#931						(* END_IF *)
#932		
#933		$label67:
#934					(* END_IF *)
#935					JMP		$label58	{LNXT:1|287|-1}
(-) BOOL
080353F7  E9 C5 00 00 00                jmp 080354C1H

#936		
#937		$label61:
#938		
#939					(* IF Motor_A AND NOT Motor_B *)
#940					LD		Motor_B	{LNXT:263|-1|-1}
(*) UNDEF
080353FC  33 C0                         xor eax, eax
080353FE  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+1

#941					NOT	{LNXT:263|-1|-1}
(*) BOOL
08035404  84 C0                         test al, al
08035406  0F 94 C0                      sete al

#942					AND(		Motor_A	{LNXT:263|-1|-1}
(*) BOOL
08035409  50                            push eax
0803540A  33 C0                         xor eax, eax
0803540C  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+0

#943					NOT	{LNXT:263|-1|-1}
(*) BOOL
08035412  84 C0                         test al, al
08035414  0F 94 C0                      sete al

#944					)	{LNXT:263|-1|-1}
(*) BOOL
08035417  8B C8                         mov ecx, eax
08035419  58                            pop eax
0803541A  23 C1                         and eax, ecx

#945					JMPCN	$label73	{LNXT:263|264|287}
(-) BOOL
0803541C  84 C0                         test al, al
0803541E  0F 84 9D 00 00 00             je 080354C1H

#946		
#947					(* THEN *)
#948		
#949		
#950						(* IF Avto_C *)
#951						LD		Avto_C	{LNXT:264|-1|-1}
(*) UNDEF
08035424  33 C0                         xor eax, eax
08035426  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+48

#952						JMPCN	$label74	{LNXT:264|265|268}
(-) BOOL
0803542C  84 C0                         test al, al
0803542E  90 74 22 90 90 90             je 08035453H

#953		
#954						(* THEN *)
#955		
#956							(* Priority := 2; *)
#957							MOVE		2,Priority	{LNXT:265|266|-1}
(*) BOOL
08035434  B8 02 00 00 00                mov eax, 02H
08035439  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+12

#958		
#959							(* Motor_C := TRUE; *)
#960							MOVE		TRUE,Motor_C	{LNXT:266|287|-1}
(*) INT
08035440  B8 01 00 00 00                mov eax, 01H
08035445  84 C0                         test al, al
08035447  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+2

#961							JMP		$label75	{LNXT:264|265|268}
(-) BOOL
0803544E  EB 71 90 90 90                jmp 080354C1H

#962		$label74:
#963		
#964						(* ELSIF Avto_C *)
#965						LD		Avto_C	{LNXT:268|-1|-1}
(*) UNDEF
08035453  33 C0                         xor eax, eax
08035455  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+48

#966						NOT	{LNXT:268|-1|-1}
(*) BOOL
0803545B  84 C0                         test al, al
0803545D  0F 94 C0                      sete al

#967						JMPCN	$label75	{LNXT:268|270|287}
(-) BOOL
08035460  84 C0                         test al, al
08035462  90 74 5C 90 90 90             je 080354C1H

#968		
#969						(* THEN *)
#970		
#971		
#972							(* IF Avto_A *)
#973							LD		Avto_A	{LNXT:270|-1|-1}
(*) UNDEF
08035468  33 C0                         xor eax, eax
0803546A  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+49

#974							JMPCN	$label76	{LNXT:270|271|274}
(-) BOOL
08035470  84 C0                         test al, al
08035472  90 74 22 90 90 90             je 08035497H

#975		
#976							(* THEN *)
#977		
#978								(* Priority := 0; *)
#979								MOVE		0,Priority	{LNXT:271|272|-1}
(*) BOOL
08035478  B8 00 00 00 00                mov eax, 00H
0803547D  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+12

#980		
#981								(* Motor_A := TRUE; *)
#982								MOVE		TRUE,Motor_A	{LNXT:272|287|-1}
(*) INT
08035484  B8 01 00 00 00                mov eax, 01H
08035489  84 C0                         test al, al
0803548B  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+0

#983								JMP		$label77	{LNXT:270|271|274}
(-) BOOL
08035492  EB 2D 90 90 90                jmp 080354C1H

#984		$label76:
#985		
#986							(* ELSIF Avto_B *)
#987							LD		Avto_B	{LNXT:274|-1|-1}
(*) UNDEF
08035497  33 C0                         xor eax, eax
08035499  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+46

#988							JMPCN	$label77	{LNXT:274|275|287}
(-) BOOL
0803549F  84 C0                         test al, al
080354A1  90 74 1D 90 90 90             je 080354C1H

#989		
#990							(* THEN *)
#991		
#992								(* Priority := 1; *)
#993								MOVE		1,Priority	{LNXT:275|276|-1}
(*) BOOL
080354A7  B8 01 00 00 00                mov eax, 01H
080354AC  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+12

#994		
#995								(* Motor_B := TRUE; *)
#996								MOVE		TRUE,Motor_B	{LNXT:276|287|-1}
(*) INT
080354B3  B8 01 00 00 00                mov eax, 01H
080354B8  84 C0                         test al, al
080354BA  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+1

#997		
#998		$label77:
#999							(* END_IF *)
#1000		
#1001		$label75:
#1002						(* END_IF *)
#1003		
#1004		$label73:
#1005					(* END_IF *)
#1006		
#1007		$label58:
#1008		
#1009				(* END_CASE *)
#1010		
#1011		$label57:
#1012			(* END_IF *)
#1013		
#1014		
#1015			(* IF Rotation AND FastRunMode *)
#1016			LD		Rotation	{LNXT:287|-1|-1}
(*) UNDEF
080354C1  33 C0                         xor eax, eax
080354C3  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %M110+16

#1017			NOT	{LNXT:287|-1|-1}
(*) BOOL
080354C9  84 C0                         test al, al
080354CB  0F 94 C0                      sete al

#1018			AND		FastRunMode	{LNXT:287|-1|-1}
(*) BOOL
080354CE  33 C9                         xor ecx, ecx
080354D0  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+94
080354D6  23 C1                         and eax, ecx

#1019			JMPCN	$label78	{LNXT:287|290|398}
(-) BOOL
080354D8  84 C0                         test al, al
080354DA  0F 84 B7 06 00 00             je 08035B97H

#1020		
#1021			(* THEN *)
#1022		
#1023		
#1024				(* CASE CurrentPump OF *)
#1025		
#1026				(* 1: *)
#1027				LD		CurrentPump	{LNXT:291|-1|-1}
(*) UNDEF
080354E0  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+98

#1028				EQ		1	{LNXT:291|-1|-1}
(*) INT
080354E7  3D 01 00 00 00                cmp eax, 1
080354EC  0F 94 C0                      sete al
080354EF  25 FF 00 00 00                and eax, 0FFh

#1029				JMPC		$label80	{LNXT:291|294|326}
(-) BOOL
080354F4  84 C0                         test al, al
080354F6  90 75 40 90 90 90             jne 08035539H

#1030		
#1031				(* 2: *)
#1032				LD		CurrentPump	{LNXT:326|-1|-1}
(*) UNDEF
080354FC  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+98

#1033				EQ		2	{LNXT:326|-1|-1}
(*) INT
08035503  3D 02 00 00 00                cmp eax, 2
08035508  0F 94 C0                      sete al
0803550B  25 FF 00 00 00                and eax, 0FFh

#1034				JMPC		$label81	{LNXT:326|327|357}
(-) BOOL
08035510  84 C0                         test al, al
08035512  0F 85 42 02 00 00             jne 0803575AH

#1035		
#1036				(* 3: *)
#1037				LD		CurrentPump	{LNXT:357|-1|-1}
(*) UNDEF
08035518  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+98

#1038				EQ		3	{LNXT:357|-1|-1}
(*) INT
0803551F  3D 03 00 00 00                cmp eax, 3
08035524  0F 94 C0                      sete al
08035527  25 FF 00 00 00                and eax, 0FFh

#1039				JMPC		$label82	{LNXT:357|358|398}
(-) BOOL
0803552C  84 C0                         test al, al
0803552E  0F 85 47 04 00 00             jne 0803597BH

#1040				JMP		$label79	{LNXT:357|358|398}
(-) BOOL
08035534  E9 5E 06 00 00                jmp 08035B97H

#1041		
#1042				(* Istruzioni di ciascun CASE: *)
#1043		
#1044		$label80:
#1045		
#1046					(* IF Tank_Level >= Level_1 AND Priority = 0 *)
#1047					LD		Priority	{LNXT:294|-1|-1}
(*) UNDEF
08035539  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M110+12

#1048					EQ		0	{LNXT:294|-1|-1}
(*) INT
08035540  3D 00 00 00 00                cmp eax, 0
08035545  0F 94 C0                      sete al
08035548  25 FF 00 00 00                and eax, 0FFh

#1049					AND(		Tank_Level	{LNXT:294|-1|-1}
(*) BOOL
0803554D  50                            push eax
0803554E  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+18

#1050					GE		Level_1	{LNXT:294|-1|-1}
(*) INT
08035555  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; %M110+6
0803555C  3B C1                         cmp eax, ecx
0803555E  0F 9D C0                      setge al
08035561  25 FF 00 00 00                and eax, 0FFh

#1051					)	{LNXT:294|-1|-1}
(*) BOOL
08035566  8B C8                         mov ecx, eax
08035568  58                            pop eax
08035569  23 C1                         and eax, ecx

#1052					JMPCN	$label83	{LNXT:294|295|298}
(-) BOOL
0803556B  84 C0                         test al, al
0803556D  90 74 33 90 90 90             je 080355A3H

#1053		
#1054					(* THEN *)
#1055		
#1056						(* CurrentPump := ((CurrentPump) MOD 3) + 1; *)
#1057						LD		CurrentPump	{LNXT:295|296|-1}
(*) UNDEF
08035573  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+98

#1058						MOD		3	{LNXT:295|296|-1}
(*) INT
0803557A  99                            cdq
0803557B  B9 03 00 00 00                mov ecx, 3
08035580  F7 F9                         idiv ecx
08035582  8B C2                         mov eax, edx

#1059						ADD		1	{LNXT:295|296|-1}
(*) INT
08035584  05 01 00 00 00                add eax, 1

#1060						ST		CurrentPump	{LNXT:295|296|-1}
(*) INT
08035589  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+98

#1061		
#1062						(* Motor_A := TRUE; *)
#1063						MOVE		TRUE,Motor_A	{LNXT:296|307|-1}
(*) INT
08035590  B8 01 00 00 00                mov eax, 01H
08035595  84 C0                         test al, al
08035597  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+0

#1064						JMP		$label84	{LNXT:294|295|298}
(-) BOOL
0803559E  E9 85 00 00 00                jmp 08035628H

#1065		$label83:
#1066		
#1067					(* ELSE *)
#1068		
#1069		
#1070						(* IF TestRunActive_1 AND NOT TestRunRunning_1 *)
#1071						LD		TestRunRunning_1	{LNXT:298|-1|-1}
(*) UNDEF
080355A3  33 C0                         xor eax, eax
080355A5  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+95

#1072						NOT	{LNXT:298|-1|-1}
(*) BOOL
080355AB  84 C0                         test al, al
080355AD  0F 94 C0                      sete al

#1073						AND(		TestRunActive_1	{LNXT:298|-1|-1}
(*) BOOL
080355B0  50                            push eax
080355B1  33 C0                         xor eax, eax
080355B3  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+100

#1074						NOT	{LNXT:298|-1|-1}
(*) BOOL
080355B9  84 C0                         test al, al
080355BB  0F 94 C0                      sete al

#1075						)	{LNXT:298|-1|-1}
(*) BOOL
080355BE  8B C8                         mov ecx, eax
080355C0  58                            pop eax
080355C1  23 C1                         and eax, ecx

#1076						JMPCN	$label85	{LNXT:298|299|307}
(-) BOOL
080355C3  84 C0                         test al, al
080355C5  90 74 60 90 90 90             je 08035628H

#1077		
#1078						(* THEN *)
#1079		
#1080							(* PumpIntervalTimer_1 *)
#1081							MOVE		TRUE,PumpIntervalTimer_1.IN	{LNXT:299|-1|-1}
(*) BOOL
080355CB  B8 01 00 00 00                mov eax, 01H
080355D0  84 C0                         test al, al
080355D2  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+106

#1082							MOVE		5000,PumpIntervalTimer_1.PT	{LNXT:299|-1|-1}
(*) BOOL
080355D9  B8 88 13 00 00                mov eax, 1388H
080355DE  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+107

#1083							CAL		PumpIntervalTimer_1	{LNXT:299|300|-1}
(*) UDINT
080355E4  50                            push eax
080355E5  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+102
080355EA  E8 4A EF FF FF                call 08034539H ; $$CODE$$+17721
080355EF  58                            pop eax

#1084		
#1085		
#1086							(* IF PumpIntervalTimer_1.Q *)
#1087							LD		PumpIntervalTimer_1.Q	{LNXT:300|-1|-1}
(*) UNDEF
080355F0  33 C0                         xor eax, eax
080355F2  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+111

#1088							JMPCN	$label86	{LNXT:300|301|307}
(-) BOOL
080355F8  84 C0                         test al, al
080355FA  90 74 2B 90 90 90             je 08035628H

#1089		
#1090							(* THEN *)
#1091		
#1092								(* TestRunActive_1 := TRUE; *)
#1093								MOVE		TRUE,TestRunActive_1	{LNXT:301|302|-1}
(*) BOOL
08035600  B8 01 00 00 00                mov eax, 01H
08035605  84 C0                         test al, al
08035607  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+100

#1094		
#1095								(* PumpIntervalTimer_1 *)
#1096								MOVE		FALSE,PumpIntervalTimer_1.IN	{LNXT:302|-1|-1}
(*) BOOL
0803560E  B8 00 00 00 00                mov eax, 00H
08035613  84 C0                         test al, al
08035615  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+106

#1097								CAL		PumpIntervalTimer_1	{LNXT:302|307|-1}
(*) BOOL
0803561C  50                            push eax
0803561D  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+102
08035622  E8 12 EF FF FF                call 08034539H ; $$CODE$$+17721
08035627  58                            pop eax

#1098		
#1099		$label86:
#1100							(* END_IF *)
#1101		
#1102		$label85:
#1103						(* END_IF *)
#1104		
#1105		$label84:
#1106					(* END_IF *)
#1107		
#1108		
#1109					(* IF TestRunActive_1 *)
#1110					LD		TestRunActive_1	{LNXT:307|-1|-1}
(*) UNDEF
08035628  33 C0                         xor eax, eax
0803562A  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+100

#1111					JMPCN	$label87	{LNXT:307|308|398}
(-) BOOL
08035630  84 C0                         test al, al
08035632  0F 84 1D 01 00 00             je 08035755H

#1112		
#1113					(* THEN *)
#1114		
#1115		
#1116						(* IF TestRunRunning_1 *)
#1117						LD		TestRunRunning_1	{LNXT:308|-1|-1}
(*) UNDEF
08035638  33 C0                         xor eax, eax
0803563A  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+95

#1118						NOT	{LNXT:308|-1|-1}
(*) BOOL
08035640  84 C0                         test al, al
08035642  0F 94 C0                      sete al

#1119						JMPCN	$label88	{LNXT:308|309|312}
(-) BOOL
08035645  84 C0                         test al, al
08035647  90 74 11 90 90 90             je 0803565BH

#1120		
#1121						(* THEN *)
#1122		
#1123							(* TestRunRunning_1 := TRUE; *)
#1124							MOVE		TRUE,TestRunRunning_1	{LNXT:309|312|-1}
(*) BOOL
0803564D  B8 01 00 00 00                mov eax, 01H
08035652  84 C0                         test al, al
08035654  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+95

#1125		
#1126		$label88:
#1127						(* END_IF *)
#1128		
#1129		
#1130						(* IF TestRunRunning_1 AND Tank_Level < Level_2 And  Avto_A *)
#1131						LD		Tank_Level	{LNXT:312|-1|-1}
(*) UNDEF
0803565B  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+18

#1132						LT		Level_2	{LNXT:312|-1|-1}
(*) INT
08035662  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; %M110+8
08035669  3B C1                         cmp eax, ecx
0803566B  0F 9C C0                      setl al
0803566E  25 FF 00 00 00                and eax, 0FFh

#1133						AND		TestRunRunning_1	{LNXT:312|-1|-1}
(*) BOOL
08035673  33 C9                         xor ecx, ecx
08035675  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+95
0803567B  23 C1                         and eax, ecx

#1134						AND		Avto_A	{LNXT:312|-1|-1}
(*) BOOL
0803567D  33 C9                         xor ecx, ecx
0803567F  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+49
08035685  23 C1                         and eax, ecx

#1135						JMPCN	$label89	{LNXT:312|313|398}
(-) BOOL
08035687  84 C0                         test al, al
08035689  0F 84 C6 00 00 00             je 08035755H

#1136		
#1137						(* THEN *)
#1138		
#1139							(* PumpRunTimer_1 *)
#1140							LD		TestRunActive_1	{LNXT:313|-1|-1}
(*) UNDEF
0803568F  33 C0                         xor eax, eax
08035691  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+100

#1141							AND		TestRunRunning_1	{LNXT:313|-1|-1}
(*) BOOL
08035697  33 C9                         xor ecx, ecx
08035699  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+95
0803569F  23 C1                         and eax, ecx

#1142							ST		PumpRunTimer_1.IN	{LNXT:313|-1|-1}
(*) BOOL
080356A1  84 C0                         test al, al
080356A3  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+128

#1143							MOVE		5000,PumpRunTimer_1.PT	{LNXT:313|-1|-1}
(*) BOOL
080356AA  B8 88 13 00 00                mov eax, 1388H
080356AF  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+129

#1144							CAL		PumpRunTimer_1	{LNXT:313|314|-1}
(*) UDINT
080356B5  50                            push eax
080356B6  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+124
080356BB  E8 79 EE FF FF                call 08034539H ; $$CODE$$+17721
080356C0  58                            pop eax

#1145		
#1146		
#1147							(* IF PumpRunTimer_1.Q *)
#1148							LD		PumpRunTimer_1.Q	{LNXT:314|-1|-1}
(*) UNDEF
080356C1  33 C0                         xor eax, eax
080356C3  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+133

#1149							NOT	{LNXT:314|-1|-1}
(*) BOOL
080356C9  84 C0                         test al, al
080356CB  0F 94 C0                      sete al

#1150							JMPCN	$label90	{LNXT:314|315|317}
(-) BOOL
080356CE  84 C0                         test al, al
080356D0  90 74 16 90 90 90             je 080356E9H

#1151		
#1152							(* THEN *)
#1153		
#1154								(* Motor_A := TRUE; *)
#1155								MOVE		TRUE,Motor_A	{LNXT:315|398|-1}
(*) BOOL
080356D6  B8 01 00 00 00                mov eax, 01H
080356DB  84 C0                         test al, al
080356DD  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+0

#1156								JMP		$label91	{LNXT:314|315|317}
(-) BOOL
080356E4  EB 6F 90 90 90                jmp 08035755H

#1157		$label90:
#1158		
#1159							(* ELSE *)
#1160		
#1161								(* Motor_A := FALSE; *)
#1162								MOVE		FALSE,Motor_A	{LNXT:317|318|-1}
(*) BOOL
080356E9  B8 00 00 00 00                mov eax, 00H
080356EE  84 C0                         test al, al
080356F0  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+0

#1163		
#1164								(* TestRunRunning_1 := FALSE; *)
#1165								MOVE		FALSE,TestRunRunning_1	{LNXT:318|319|-1}
(*) BOOL
080356F7  B8 00 00 00 00                mov eax, 00H
080356FC  84 C0                         test al, al
080356FE  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+95

#1166		
#1167								(* TestRunActive_1 := FALSE; *)
#1168								MOVE		FALSE,TestRunActive_1	{LNXT:319|320|-1}
(*) BOOL
08035705  B8 00 00 00 00                mov eax, 00H
0803570A  84 C0                         test al, al
0803570C  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+100

#1169		
#1170								(* PumpRunTimer_1 *)
#1171								MOVE		FALSE,PumpRunTimer_1.IN	{LNXT:320|-1|-1}
(*) BOOL
08035713  B8 00 00 00 00                mov eax, 00H
08035718  84 C0                         test al, al
0803571A  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+128

#1172								MOVE		5000,PumpRunTimer_1.PT	{LNXT:320|-1|-1}
(*) BOOL
08035721  B8 88 13 00 00                mov eax, 1388H
08035726  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+129

#1173								CAL		PumpRunTimer_1	{LNXT:320|321|-1}
(*) UDINT
0803572C  50                            push eax
0803572D  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+124
08035732  E8 02 EE FF FF                call 08034539H ; $$CODE$$+17721
08035737  58                            pop eax

#1174		
#1175								(* CurrentPump := ((CurrentPump) MOD 3) + 1; *)
#1176								LD		CurrentPump	{LNXT:321|398|-1}
(*) UNDEF
08035738  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+98

#1177								MOD		3	{LNXT:321|398|-1}
(*) INT
0803573F  99                            cdq
08035740  B9 03 00 00 00                mov ecx, 3
08035745  F7 F9                         idiv ecx
08035747  8B C2                         mov eax, edx

#1178								ADD		1	{LNXT:321|398|-1}
(*) INT
08035749  05 01 00 00 00                add eax, 1

#1179								ST		CurrentPump	{LNXT:321|398|-1}
(*) INT
0803574E  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+98

#1180		
#1181		$label91:
#1182							(* END_IF *)
#1183		
#1184		$label89:
#1185						(* END_IF *)
#1186		
#1187		$label87:
#1188					(* END_IF *)
#1189					JMP		$label79	{LNXT:1|398|-1}
(-) INT
08035755  E9 3D 04 00 00                jmp 08035B97H

#1190		
#1191		$label81:
#1192		
#1193					(* IF Tank_Level >= Level_1 AND Priority = 1 *)
#1194					LD		Priority	{LNXT:327|-1|-1}
(*) UNDEF
0803575A  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M110+12

#1195					EQ		1	{LNXT:327|-1|-1}
(*) INT
08035761  3D 01 00 00 00                cmp eax, 1
08035766  0F 94 C0                      sete al
08035769  25 FF 00 00 00                and eax, 0FFh

#1196					AND(		Tank_Level	{LNXT:327|-1|-1}
(*) BOOL
0803576E  50                            push eax
0803576F  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+18

#1197					GE		Level_1	{LNXT:327|-1|-1}
(*) INT
08035776  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; %M110+6
0803577D  3B C1                         cmp eax, ecx
0803577F  0F 9D C0                      setge al
08035782  25 FF 00 00 00                and eax, 0FFh

#1198					)	{LNXT:327|-1|-1}
(*) BOOL
08035787  8B C8                         mov ecx, eax
08035789  58                            pop eax
0803578A  23 C1                         and eax, ecx

#1199					JMPCN	$label92	{LNXT:327|328|331}
(-) BOOL
0803578C  84 C0                         test al, al
0803578E  90 74 33 90 90 90             je 080357C4H

#1200		
#1201					(* THEN *)
#1202		
#1203						(* CurrentPump := ((CurrentPump) MOD 3) + 1; *)
#1204						LD		CurrentPump	{LNXT:328|329|-1}
(*) UNDEF
08035794  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+98

#1205						MOD		3	{LNXT:328|329|-1}
(*) INT
0803579B  99                            cdq
0803579C  B9 03 00 00 00                mov ecx, 3
080357A1  F7 F9                         idiv ecx
080357A3  8B C2                         mov eax, edx

#1206						ADD		1	{LNXT:328|329|-1}
(*) INT
080357A5  05 01 00 00 00                add eax, 1

#1207						ST		CurrentPump	{LNXT:328|329|-1}
(*) INT
080357AA  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+98

#1208		
#1209						(* Motor_B := TRUE; *)
#1210						MOVE		TRUE,Motor_B	{LNXT:329|339|-1}
(*) INT
080357B1  B8 01 00 00 00                mov eax, 01H
080357B6  84 C0                         test al, al
080357B8  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+1

#1211						JMP		$label93	{LNXT:327|328|331}
(-) BOOL
080357BF  E9 85 00 00 00                jmp 08035849H

#1212		$label92:
#1213		
#1214					(* ELSE *)
#1215		
#1216		
#1217						(* IF TestRunActive_2 AND NOT TestRunRunning_2 *)
#1218						LD		TestRunRunning_2	{LNXT:331|-1|-1}
(*) UNDEF
080357C4  33 C0                         xor eax, eax
080357C6  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+101

#1219						NOT	{LNXT:331|-1|-1}
(*) BOOL
080357CC  84 C0                         test al, al
080357CE  0F 94 C0                      sete al

#1220						AND(		TestRunActive_2	{LNXT:331|-1|-1}
(*) BOOL
080357D1  50                            push eax
080357D2  33 C0                         xor eax, eax
080357D4  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+146

#1221						NOT	{LNXT:331|-1|-1}
(*) BOOL
080357DA  84 C0                         test al, al
080357DC  0F 94 C0                      sete al

#1222						)	{LNXT:331|-1|-1}
(*) BOOL
080357DF  8B C8                         mov ecx, eax
080357E1  58                            pop eax
080357E2  23 C1                         and eax, ecx

#1223						JMPCN	$label94	{LNXT:331|332|339}
(-) BOOL
080357E4  84 C0                         test al, al
080357E6  90 74 60 90 90 90             je 08035849H

#1224		
#1225						(* THEN *)
#1226		
#1227							(* PumpIntervalTimer_2 *)
#1228							MOVE		TRUE,PumpIntervalTimer_2.IN	{LNXT:332|-1|-1}
(*) BOOL
080357EC  B8 01 00 00 00                mov eax, 01H
080357F1  84 C0                         test al, al
080357F3  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+152

#1229							MOVE		6000,PumpIntervalTimer_2.PT	{LNXT:332|-1|-1}
(*) BOOL
080357FA  B8 70 17 00 00                mov eax, 1770H
080357FF  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+153

#1230							CAL		PumpIntervalTimer_2	{LNXT:332|333|-1}
(*) UDINT
08035805  50                            push eax
08035806  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+148
0803580B  E8 29 ED FF FF                call 08034539H ; $$CODE$$+17721
08035810  58                            pop eax

#1231		
#1232		
#1233							(* IF PumpIntervalTimer_2.Q *)
#1234							LD		PumpIntervalTimer_2.Q	{LNXT:333|-1|-1}
(*) UNDEF
08035811  33 C0                         xor eax, eax
08035813  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+157

#1235							JMPCN	$label95	{LNXT:333|334|339}
(-) BOOL
08035819  84 C0                         test al, al
0803581B  90 74 2B 90 90 90             je 08035849H

#1236		
#1237							(* THEN *)
#1238		
#1239								(* TestRunActive_2 := TRUE; *)
#1240								MOVE		TRUE,TestRunActive_2	{LNXT:334|335|-1}
(*) BOOL
08035821  B8 01 00 00 00                mov eax, 01H
08035826  84 C0                         test al, al
08035828  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+146

#1241		
#1242								(* PumpIntervalTimer_2 *)
#1243								MOVE		FALSE,PumpIntervalTimer_2.IN	{LNXT:335|-1|-1}
(*) BOOL
0803582F  B8 00 00 00 00                mov eax, 00H
08035834  84 C0                         test al, al
08035836  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+152

#1244								CAL		PumpIntervalTimer_2	{LNXT:335|339|-1}
(*) BOOL
0803583D  50                            push eax
0803583E  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+148
08035843  E8 F1 EC FF FF                call 08034539H ; $$CODE$$+17721
08035848  58                            pop eax

#1245		
#1246		$label95:
#1247							(* END_IF *)
#1248		
#1249		$label94:
#1250						(* END_IF *)
#1251		
#1252		$label93:
#1253					(* END_IF *)
#1254		
#1255		
#1256					(* IF TestRunActive_2 *)
#1257					LD		TestRunActive_2	{LNXT:339|-1|-1}
(*) UNDEF
08035849  33 C0                         xor eax, eax
0803584B  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+146

#1258					JMPCN	$label96	{LNXT:339|340|398}
(-) BOOL
08035851  84 C0                         test al, al
08035853  0F 84 1D 01 00 00             je 08035976H

#1259		
#1260					(* THEN *)
#1261		
#1262		
#1263						(* IF TestRunRunning_2 *)
#1264						LD		TestRunRunning_2	{LNXT:340|-1|-1}
(*) UNDEF
08035859  33 C0                         xor eax, eax
0803585B  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+101

#1265						NOT	{LNXT:340|-1|-1}
(*) BOOL
08035861  84 C0                         test al, al
08035863  0F 94 C0                      sete al

#1266						JMPCN	$label97	{LNXT:340|341|343}
(-) BOOL
08035866  84 C0                         test al, al
08035868  90 74 11 90 90 90             je 0803587CH

#1267		
#1268						(* THEN *)
#1269		
#1270							(* TestRunRunning_2 := TRUE; *)
#1271							MOVE		TRUE,TestRunRunning_2	{LNXT:341|343|-1}
(*) BOOL
0803586E  B8 01 00 00 00                mov eax, 01H
08035873  84 C0                         test al, al
08035875  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+101

#1272		
#1273		$label97:
#1274						(* END_IF *)
#1275		
#1276		
#1277						(* IF TestRunRunning_2 AND Tank_Level < Level_2 And  Avto_B *)
#1278						LD		Tank_Level	{LNXT:343|-1|-1}
(*) UNDEF
0803587C  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+18

#1279						LT		Level_2	{LNXT:343|-1|-1}
(*) INT
08035883  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; %M110+8
0803588A  3B C1                         cmp eax, ecx
0803588C  0F 9C C0                      setl al
0803588F  25 FF 00 00 00                and eax, 0FFh

#1280						AND		TestRunRunning_2	{LNXT:343|-1|-1}
(*) BOOL
08035894  33 C9                         xor ecx, ecx
08035896  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+101
0803589C  23 C1                         and eax, ecx

#1281						AND		Avto_B	{LNXT:343|-1|-1}
(*) BOOL
0803589E  33 C9                         xor ecx, ecx
080358A0  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+46
080358A6  23 C1                         and eax, ecx

#1282						JMPCN	$label98	{LNXT:343|344|398}
(-) BOOL
080358A8  84 C0                         test al, al
080358AA  0F 84 C6 00 00 00             je 08035976H

#1283		
#1284						(* THEN *)
#1285		
#1286							(* PumpRunTimer_2 *)
#1287							LD		TestRunActive_2	{LNXT:344|-1|-1}
(*) UNDEF
080358B0  33 C0                         xor eax, eax
080358B2  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+146

#1288							AND		TestRunRunning_2	{LNXT:344|-1|-1}
(*) BOOL
080358B8  33 C9                         xor ecx, ecx
080358BA  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+101
080358C0  23 C1                         and eax, ecx

#1289							ST		PumpRunTimer_2.IN	{LNXT:344|-1|-1}
(*) BOOL
080358C2  84 C0                         test al, al
080358C4  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+174

#1290							MOVE		6000,PumpRunTimer_2.PT	{LNXT:344|-1|-1}
(*) BOOL
080358CB  B8 70 17 00 00                mov eax, 1770H
080358D0  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+175

#1291							CAL		PumpRunTimer_2	{LNXT:344|345|-1}
(*) UDINT
080358D6  50                            push eax
080358D7  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+170
080358DC  E8 58 EC FF FF                call 08034539H ; $$CODE$$+17721
080358E1  58                            pop eax

#1292		
#1293		
#1294							(* IF PumpRunTimer_2.Q *)
#1295							LD		PumpRunTimer_2.Q	{LNXT:345|-1|-1}
(*) UNDEF
080358E2  33 C0                         xor eax, eax
080358E4  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+179

#1296							NOT	{LNXT:345|-1|-1}
(*) BOOL
080358EA  84 C0                         test al, al
080358EC  0F 94 C0                      sete al

#1297							JMPCN	$label99	{LNXT:345|346|348}
(-) BOOL
080358EF  84 C0                         test al, al
080358F1  90 74 16 90 90 90             je 0803590AH

#1298		
#1299							(* THEN *)
#1300		
#1301								(* Motor_B := TRUE; *)
#1302								MOVE		TRUE,Motor_B	{LNXT:346|398|-1}
(*) BOOL
080358F7  B8 01 00 00 00                mov eax, 01H
080358FC  84 C0                         test al, al
080358FE  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+1

#1303								JMP		$label100	{LNXT:345|346|348}
(-) BOOL
08035905  EB 6F 90 90 90                jmp 08035976H

#1304		$label99:
#1305		
#1306							(* ELSE *)
#1307		
#1308								(* Motor_B := FALSE; *)
#1309								MOVE		FALSE,Motor_B	{LNXT:348|349|-1}
(*) BOOL
0803590A  B8 00 00 00 00                mov eax, 00H
0803590F  84 C0                         test al, al
08035911  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+1

#1310		
#1311								(* TestRunRunning_2 := FALSE; *)
#1312								MOVE		FALSE,TestRunRunning_2	{LNXT:349|350|-1}
(*) BOOL
08035918  B8 00 00 00 00                mov eax, 00H
0803591D  84 C0                         test al, al
0803591F  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+101

#1313		
#1314								(* TestRunActive_2 := FALSE; *)
#1315								MOVE		FALSE,TestRunActive_2	{LNXT:350|351|-1}
(*) BOOL
08035926  B8 00 00 00 00                mov eax, 00H
0803592B  84 C0                         test al, al
0803592D  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+146

#1316		
#1317								(* PumpRunTimer_2 *)
#1318								MOVE		FALSE,PumpRunTimer_2.IN	{LNXT:351|-1|-1}
(*) BOOL
08035934  B8 00 00 00 00                mov eax, 00H
08035939  84 C0                         test al, al
0803593B  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+174

#1319								MOVE		6000,PumpRunTimer_2.PT	{LNXT:351|-1|-1}
(*) BOOL
08035942  B8 70 17 00 00                mov eax, 1770H
08035947  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+175

#1320								CAL		PumpRunTimer_2	{LNXT:351|352|-1}
(*) UDINT
0803594D  50                            push eax
0803594E  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+170
08035953  E8 E1 EB FF FF                call 08034539H ; $$CODE$$+17721
08035958  58                            pop eax

#1321		
#1322								(* CurrentPump := ((CurrentPump) MOD 3) + 1; *)
#1323								LD		CurrentPump	{LNXT:352|398|-1}
(*) UNDEF
08035959  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+98

#1324								MOD		3	{LNXT:352|398|-1}
(*) INT
08035960  99                            cdq
08035961  B9 03 00 00 00                mov ecx, 3
08035966  F7 F9                         idiv ecx
08035968  8B C2                         mov eax, edx

#1325								ADD		1	{LNXT:352|398|-1}
(*) INT
0803596A  05 01 00 00 00                add eax, 1

#1326								ST		CurrentPump	{LNXT:352|398|-1}
(*) INT
0803596F  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+98

#1327		
#1328		$label100:
#1329							(* END_IF *)
#1330		
#1331		$label98:
#1332						(* END_IF *)
#1333		
#1334		$label96:
#1335					(* END_IF *)
#1336					JMP		$label79	{LNXT:1|398|-1}
(-) INT
08035976  E9 1C 02 00 00                jmp 08035B97H

#1337		
#1338		$label82:
#1339		
#1340					(* IF Tank_Level >= Level_1 AND Priority = 2 *)
#1341					LD		Priority	{LNXT:358|-1|-1}
(*) UNDEF
0803597B  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M110+12

#1342					EQ		2	{LNXT:358|-1|-1}
(*) INT
08035982  3D 02 00 00 00                cmp eax, 2
08035987  0F 94 C0                      sete al
0803598A  25 FF 00 00 00                and eax, 0FFh

#1343					AND(		Tank_Level	{LNXT:358|-1|-1}
(*) BOOL
0803598F  50                            push eax
08035990  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+18

#1344					GE		Level_1	{LNXT:358|-1|-1}
(*) INT
08035997  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; %M110+6
0803599E  3B C1                         cmp eax, ecx
080359A0  0F 9D C0                      setge al
080359A3  25 FF 00 00 00                and eax, 0FFh

#1345					)	{LNXT:358|-1|-1}
(*) BOOL
080359A8  8B C8                         mov ecx, eax
080359AA  58                            pop eax
080359AB  23 C1                         and eax, ecx

#1346					JMPCN	$label101	{LNXT:358|359|362}
(-) BOOL
080359AD  84 C0                         test al, al
080359AF  90 74 33 90 90 90             je 080359E5H

#1347		
#1348					(* THEN *)
#1349		
#1350						(* CurrentPump := ((CurrentPump) MOD 3) + 1; *)
#1351						LD		CurrentPump	{LNXT:359|360|-1}
(*) UNDEF
080359B5  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+98

#1352						MOD		3	{LNXT:359|360|-1}
(*) INT
080359BC  99                            cdq
080359BD  B9 03 00 00 00                mov ecx, 3
080359C2  F7 F9                         idiv ecx
080359C4  8B C2                         mov eax, edx

#1353						ADD		1	{LNXT:359|360|-1}
(*) INT
080359C6  05 01 00 00 00                add eax, 1

#1354						ST		CurrentPump	{LNXT:359|360|-1}
(*) INT
080359CB  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+98

#1355		
#1356						(* Motor_C := TRUE; *)
#1357						MOVE		TRUE,Motor_C	{LNXT:360|370|-1}
(*) INT
080359D2  B8 01 00 00 00                mov eax, 01H
080359D7  84 C0                         test al, al
080359D9  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+2

#1358						JMP		$label102	{LNXT:358|359|362}
(-) BOOL
080359E0  E9 85 00 00 00                jmp 08035A6AH

#1359		$label101:
#1360		
#1361					(* ELSE *)
#1362		
#1363		
#1364						(* IF TestRunActive_3 AND NOT TestRunRunning_3 *)
#1365						LD		TestRunRunning_3	{LNXT:362|-1|-1}
(*) UNDEF
080359E5  33 C0                         xor eax, eax
080359E7  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+147

#1366						NOT	{LNXT:362|-1|-1}
(*) BOOL
080359ED  84 C0                         test al, al
080359EF  0F 94 C0                      sete al

#1367						AND(		TestRunActive_3	{LNXT:362|-1|-1}
(*) BOOL
080359F2  50                            push eax
080359F3  33 C0                         xor eax, eax
080359F5  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+192

#1368						NOT	{LNXT:362|-1|-1}
(*) BOOL
080359FB  84 C0                         test al, al
080359FD  0F 94 C0                      sete al

#1369						)	{LNXT:362|-1|-1}
(*) BOOL
08035A00  8B C8                         mov ecx, eax
08035A02  58                            pop eax
08035A03  23 C1                         and eax, ecx

#1370						JMPCN	$label103	{LNXT:362|363|370}
(-) BOOL
08035A05  84 C0                         test al, al
08035A07  90 74 60 90 90 90             je 08035A6AH

#1371		
#1372						(* THEN *)
#1373		
#1374							(* PumpIntervalTimer_3 *)
#1375							MOVE		TRUE,PumpIntervalTimer_3.IN	{LNXT:363|-1|-1}
(*) BOOL
08035A0D  B8 01 00 00 00                mov eax, 01H
08035A12  84 C0                         test al, al
08035A14  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+198

#1376							MOVE		7000,PumpIntervalTimer_3.PT	{LNXT:363|-1|-1}
(*) BOOL
08035A1B  B8 58 1B 00 00                mov eax, 1B58H
08035A20  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+199

#1377							CAL		PumpIntervalTimer_3	{LNXT:363|364|-1}
(*) UDINT
08035A26  50                            push eax
08035A27  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+194
08035A2C  E8 08 EB FF FF                call 08034539H ; $$CODE$$+17721
08035A31  58                            pop eax

#1378		
#1379		
#1380							(* IF PumpIntervalTimer_3.Q *)
#1381							LD		PumpIntervalTimer_3.Q	{LNXT:364|-1|-1}
(*) UNDEF
08035A32  33 C0                         xor eax, eax
08035A34  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+203

#1382							JMPCN	$label104	{LNXT:364|365|370}
(-) BOOL
08035A3A  84 C0                         test al, al
08035A3C  90 74 2B 90 90 90             je 08035A6AH

#1383		
#1384							(* THEN *)
#1385		
#1386								(* TestRunActive_3 := TRUE; *)
#1387								MOVE		TRUE,TestRunActive_3	{LNXT:365|366|-1}
(*) BOOL
08035A42  B8 01 00 00 00                mov eax, 01H
08035A47  84 C0                         test al, al
08035A49  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+192

#1388		
#1389								(* PumpIntervalTimer_3 *)
#1390								MOVE		FALSE,PumpIntervalTimer_3.IN	{LNXT:366|-1|-1}
(*) BOOL
08035A50  B8 00 00 00 00                mov eax, 00H
08035A55  84 C0                         test al, al
08035A57  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+198

#1391								CAL		PumpIntervalTimer_3	{LNXT:366|370|-1}
(*) BOOL
08035A5E  50                            push eax
08035A5F  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+194
08035A64  E8 D0 EA FF FF                call 08034539H ; $$CODE$$+17721
08035A69  58                            pop eax

#1392		
#1393		$label104:
#1394							(* END_IF *)
#1395		
#1396		$label103:
#1397						(* END_IF *)
#1398		
#1399		$label102:
#1400					(* END_IF *)
#1401		
#1402		
#1403					(* IF TestRunActive_3 *)
#1404					LD		TestRunActive_3	{LNXT:370|-1|-1}
(*) UNDEF
08035A6A  33 C0                         xor eax, eax
08035A6C  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+192

#1405					JMPCN	$label105	{LNXT:370|371|398}
(-) BOOL
08035A72  84 C0                         test al, al
08035A74  0F 84 1D 01 00 00             je 08035B97H

#1406		
#1407					(* THEN *)
#1408		
#1409		
#1410						(* IF TestRunRunning_3 *)
#1411						LD		TestRunRunning_3	{LNXT:371|-1|-1}
(*) UNDEF
08035A7A  33 C0                         xor eax, eax
08035A7C  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+147

#1412						NOT	{LNXT:371|-1|-1}
(*) BOOL
08035A82  84 C0                         test al, al
08035A84  0F 94 C0                      sete al

#1413						JMPCN	$label106	{LNXT:371|372|374}
(-) BOOL
08035A87  84 C0                         test al, al
08035A89  90 74 11 90 90 90             je 08035A9DH

#1414		
#1415						(* THEN *)
#1416		
#1417							(* TestRunRunning_3 := TRUE; *)
#1418							MOVE		TRUE,TestRunRunning_3	{LNXT:372|374|-1}
(*) BOOL
08035A8F  B8 01 00 00 00                mov eax, 01H
08035A94  84 C0                         test al, al
08035A96  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+147

#1419		
#1420		$label106:
#1421						(* END_IF *)
#1422		
#1423		
#1424						(* IF TestRunRunning_3 AND Tank_Level < Level_2 And Avto_C *)
#1425						LD		Tank_Level	{LNXT:374|-1|-1}
(*) UNDEF
08035A9D  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+18

#1426						LT		Level_2	{LNXT:374|-1|-1}
(*) INT
08035AA4  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; %M110+8
08035AAB  3B C1                         cmp eax, ecx
08035AAD  0F 9C C0                      setl al
08035AB0  25 FF 00 00 00                and eax, 0FFh

#1427						AND		TestRunRunning_3	{LNXT:374|-1|-1}
(*) BOOL
08035AB5  33 C9                         xor ecx, ecx
08035AB7  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+147
08035ABD  23 C1                         and eax, ecx

#1428						AND		Avto_C	{LNXT:374|-1|-1}
(*) BOOL
08035ABF  33 C9                         xor ecx, ecx
08035AC1  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+48
08035AC7  23 C1                         and eax, ecx

#1429						JMPCN	$label107	{LNXT:374|375|398}
(-) BOOL
08035AC9  84 C0                         test al, al
08035ACB  0F 84 C6 00 00 00             je 08035B97H

#1430		
#1431						(* THEN *)
#1432		
#1433							(* PumpRunTimer_3 *)
#1434							LD		TestRunActive_3	{LNXT:375|-1|-1}
(*) UNDEF
08035AD1  33 C0                         xor eax, eax
08035AD3  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+192

#1435							AND		TestRunRunning_3	{LNXT:375|-1|-1}
(*) BOOL
08035AD9  33 C9                         xor ecx, ecx
08035ADB  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+147
08035AE1  23 C1                         and eax, ecx

#1436							ST		PumpRunTimer_3.IN	{LNXT:375|-1|-1}
(*) BOOL
08035AE3  84 C0                         test al, al
08035AE5  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+220

#1437							MOVE		7000,PumpRunTimer_3.PT	{LNXT:375|-1|-1}
(*) BOOL
08035AEC  B8 58 1B 00 00                mov eax, 1B58H
08035AF1  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+221

#1438							CAL		PumpRunTimer_3	{LNXT:375|376|-1}
(*) UDINT
08035AF7  50                            push eax
08035AF8  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+216
08035AFD  E8 37 EA FF FF                call 08034539H ; $$CODE$$+17721
08035B02  58                            pop eax

#1439		
#1440		
#1441							(* IF PumpRunTimer_3.Q *)
#1442							LD		PumpRunTimer_3.Q	{LNXT:376|-1|-1}
(*) UNDEF
08035B03  33 C0                         xor eax, eax
08035B05  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+225

#1443							NOT	{LNXT:376|-1|-1}
(*) BOOL
08035B0B  84 C0                         test al, al
08035B0D  0F 94 C0                      sete al

#1444							JMPCN	$label108	{LNXT:376|377|379}
(-) BOOL
08035B10  84 C0                         test al, al
08035B12  90 74 16 90 90 90             je 08035B2BH

#1445		
#1446							(* THEN *)
#1447		
#1448								(* Motor_C := TRUE; *)
#1449								MOVE		TRUE,Motor_C	{LNXT:377|398|-1}
(*) BOOL
08035B18  B8 01 00 00 00                mov eax, 01H
08035B1D  84 C0                         test al, al
08035B1F  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+2

#1450								JMP		$label109	{LNXT:376|377|379}
(-) BOOL
08035B26  EB 6F 90 90 90                jmp 08035B97H

#1451		$label108:
#1452		
#1453							(* ELSE *)
#1454		
#1455								(* Motor_C := FALSE; *)
#1456								MOVE		FALSE,Motor_C	{LNXT:379|380|-1}
(*) BOOL
08035B2B  B8 00 00 00 00                mov eax, 00H
08035B30  84 C0                         test al, al
08035B32  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+2

#1457		
#1458								(* TestRunRunning_3 := FALSE; *)
#1459								MOVE		FALSE,TestRunRunning_3	{LNXT:380|381|-1}
(*) BOOL
08035B39  B8 00 00 00 00                mov eax, 00H
08035B3E  84 C0                         test al, al
08035B40  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+147

#1460		
#1461								(* TestRunActive_3 := FALSE; *)
#1462								MOVE		FALSE,TestRunActive_3	{LNXT:381|382|-1}
(*) BOOL
08035B47  B8 00 00 00 00                mov eax, 00H
08035B4C  84 C0                         test al, al
08035B4E  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+192

#1463		
#1464								(* PumpRunTimer_3 *)
#1465								MOVE		FALSE,PumpRunTimer_3.IN	{LNXT:382|-1|-1}
(*) BOOL
08035B55  B8 00 00 00 00                mov eax, 00H
08035B5A  84 C0                         test al, al
08035B5C  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+220

#1466								MOVE		7000,PumpRunTimer_3.PT	{LNXT:382|-1|-1}
(*) BOOL
08035B63  B8 58 1B 00 00                mov eax, 1B58H
08035B68  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+221

#1467								CAL		PumpRunTimer_3	{LNXT:382|383|-1}
(*) UDINT
08035B6E  50                            push eax
08035B6F  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+216
08035B74  E8 C0 E9 FF FF                call 08034539H ; $$CODE$$+17721
08035B79  58                            pop eax

#1468		
#1469								(* CurrentPump := ((CurrentPump) MOD 3) + 1; *)
#1470								LD		CurrentPump	{LNXT:383|398|-1}
(*) UNDEF
08035B7A  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+98

#1471								MOD		3	{LNXT:383|398|-1}
(*) INT
08035B81  99                            cdq
08035B82  B9 03 00 00 00                mov ecx, 3
08035B87  F7 F9                         idiv ecx
08035B89  8B C2                         mov eax, edx

#1472								ADD		1	{LNXT:383|398|-1}
(*) INT
08035B8B  05 01 00 00 00                add eax, 1

#1473								ST		CurrentPump	{LNXT:383|398|-1}
(*) INT
08035B90  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; $$DATA$$+98

#1474		
#1475		$label109:
#1476							(* END_IF *)
#1477		
#1478		$label107:
#1479						(* END_IF *)
#1480		
#1481		$label105:
#1482					(* END_IF *)
#1483		
#1484		$label79:
#1485		
#1486				(* END_CASE *)
#1487		
#1488		$label78:
#1489			(* END_IF *)
#1490		
#1491		
#1492			(* IF Tank_Level >= Level_2 AND Tank_Level < Level_3 *)
#1493			LD		Tank_Level	{LNXT:398|-1|-1}
(*) UNDEF
08035B97  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+18

#1494			LT		Level_3	{LNXT:398|-1|-1}
(*) INT
08035B9E  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; %M110+10
08035BA5  3B C1                         cmp eax, ecx
08035BA7  0F 9C C0                      setl al
08035BAA  25 FF 00 00 00                and eax, 0FFh

#1495			AND(		Tank_Level	{LNXT:398|-1|-1}
(*) BOOL
08035BAF  50                            push eax
08035BB0  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+18

#1496			GE		Level_2	{LNXT:398|-1|-1}
(*) INT
08035BB7  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; %M110+8
08035BBE  3B C1                         cmp eax, ecx
08035BC0  0F 9D C0                      setge al
08035BC3  25 FF 00 00 00                and eax, 0FFh

#1497			)	{LNXT:398|-1|-1}
(*) BOOL
08035BC8  8B C8                         mov ecx, eax
08035BCA  58                            pop eax
08035BCB  23 C1                         and eax, ecx

#1498			JMPCN	$label110	{LNXT:398|401|436}
(-) BOOL
08035BCD  84 C0                         test al, al
08035BCF  0F 84 6D 01 00 00             je 08035D42H

#1499		
#1500			(* THEN *)
#1501		
#1502		
#1503				(* IF MOTOR_A AND NOT MOTOR_B AND NOT MOTOR_C *)
#1504				LD		MOTOR_C	{LNXT:401|-1|-1}
(*) UNDEF
08035BD5  33 C0                         xor eax, eax
08035BD7  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+2

#1505				NOT	{LNXT:401|-1|-1}
(*) BOOL
08035BDD  84 C0                         test al, al
08035BDF  0F 94 C0                      sete al

#1506				AND(		MOTOR_B	{LNXT:401|-1|-1}
(*) BOOL
08035BE2  50                            push eax
08035BE3  33 C0                         xor eax, eax
08035BE5  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+1

#1507				NOT	{LNXT:401|-1|-1}
(*) BOOL
08035BEB  84 C0                         test al, al
08035BED  0F 94 C0                      sete al

#1508				AND		MOTOR_A	{LNXT:401|-1|-1}
(*) BOOL
08035BF0  33 C9                         xor ecx, ecx
08035BF2  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %Q1+0
08035BF8  23 C1                         and eax, ecx

#1509				)	{LNXT:401|-1|-1}
(*) BOOL
08035BFA  8B C8                         mov ecx, eax
08035BFC  58                            pop eax
08035BFD  23 C1                         and eax, ecx

#1510				JMPCN	$label111	{LNXT:401|404|414}
(-) BOOL
08035BFF  84 C0                         test al, al
08035C01  90 74 44 90 90 90             je 08035C48H

#1511		
#1512				(* THEN *)
#1513		
#1514		
#1515					(* IF Avto_B *)
#1516					LD		Avto_B	{LNXT:404|-1|-1}
(*) UNDEF
08035C07  33 C0                         xor eax, eax
08035C09  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+46

#1517					JMPCN	$label112	{LNXT:404|405|407}
(-) BOOL
08035C0F  84 C0                         test al, al
08035C11  90 74 16 90 90 90             je 08035C2AH

#1518		
#1519					(* THEN *)
#1520		
#1521						(* Motor_B:= TRUE; *)
#1522						MOVE		TRUE,Motor_B	{LNXT:405|414|-1}
(*) BOOL
08035C17  B8 01 00 00 00                mov eax, 01H
08035C1C  84 C0                         test al, al
08035C1E  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+1

#1523						JMP		$label113	{LNXT:404|405|407}
(-) BOOL
08035C25  EB 21 90 90 90                jmp 08035C48H

#1524		$label112:
#1525		
#1526					(* ELSIF Avto_C *)
#1527					LD		Avto_C	{LNXT:407|-1|-1}
(*) UNDEF
08035C2A  33 C0                         xor eax, eax
08035C2C  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+48

#1528					JMPCN	$label113	{LNXT:407|408|414}
(-) BOOL
08035C32  84 C0                         test al, al
08035C34  90 74 11 90 90 90             je 08035C48H

#1529		
#1530					(* THEN *)
#1531		
#1532						(* Motor_C:= TRUE; *)
#1533						MOVE		TRUE,Motor_C	{LNXT:408|414|-1}
(*) BOOL
08035C3A  B8 01 00 00 00                mov eax, 01H
08035C3F  84 C0                         test al, al
08035C41  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+2

#1534		
#1535		$label113:
#1536					(* END_IF *)
#1537		
#1538		$label111:
#1539				(* END_IF *)
#1540		
#1541		
#1542				(* IF MOTOR_B AND NOT MOTOR_A AND NOT MOTOR_C *)
#1543				LD		MOTOR_C	{LNXT:414|-1|-1}
(*) UNDEF
08035C48  33 C0                         xor eax, eax
08035C4A  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+2

#1544				NOT	{LNXT:414|-1|-1}
(*) BOOL
08035C50  84 C0                         test al, al
08035C52  0F 94 C0                      sete al

#1545				AND(		MOTOR_A	{LNXT:414|-1|-1}
(*) BOOL
08035C55  50                            push eax
08035C56  33 C0                         xor eax, eax
08035C58  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+0

#1546				NOT	{LNXT:414|-1|-1}
(*) BOOL
08035C5E  84 C0                         test al, al
08035C60  0F 94 C0                      sete al

#1547				AND		MOTOR_B	{LNXT:414|-1|-1}
(*) BOOL
08035C63  33 C9                         xor ecx, ecx
08035C65  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %Q1+1
08035C6B  23 C1                         and eax, ecx

#1548				)	{LNXT:414|-1|-1}
(*) BOOL
08035C6D  8B C8                         mov ecx, eax
08035C6F  58                            pop eax
08035C70  23 C1                         and eax, ecx

#1549				JMPCN	$label114	{LNXT:414|415|423}
(-) BOOL
08035C72  84 C0                         test al, al
08035C74  90 74 4E 90 90 90             je 08035CC5H

#1550		
#1551				(* THEN *)
#1552		
#1553		
#1554					(* IF Avto_B *)
#1555					LD		Avto_B	{LNXT:415|-1|-1}
(*) UNDEF
08035C7A  33 C0                         xor eax, eax
08035C7C  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+46

#1556					JMPCN	$label115	{LNXT:415|416|418}
(-) BOOL
08035C82  84 C0                         test al, al
08035C84  90 74 11 90 90 90             je 08035C98H

#1557		
#1558					(* THEN *)
#1559		
#1560						(* Motor_C:= TRUE; *)
#1561						MOVE		TRUE,Motor_C	{LNXT:416|418|-1}
(*) BOOL
08035C8A  B8 01 00 00 00                mov eax, 01H
08035C8F  84 C0                         test al, al
08035C91  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+2

#1562		
#1563		$label115:
#1564					(* END_IF *)
#1565		
#1566		
#1567					(* IF Avto_A AND NOT MOTOR_C *)
#1568					LD		MOTOR_C	{LNXT:418|-1|-1}
(*) UNDEF
08035C98  33 C0                         xor eax, eax
08035C9A  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+2

#1569					NOT	{LNXT:418|-1|-1}
(*) BOOL
08035CA0  84 C0                         test al, al
08035CA2  0F 94 C0                      sete al

#1570					AND		Avto_A	{LNXT:418|-1|-1}
(*) BOOL
08035CA5  33 C9                         xor ecx, ecx
08035CA7  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+49
08035CAD  23 C1                         and eax, ecx

#1571					JMPCN	$label116	{LNXT:418|419|423}
(-) BOOL
08035CAF  84 C0                         test al, al
08035CB1  90 74 11 90 90 90             je 08035CC5H

#1572		
#1573					(* THEN *)
#1574		
#1575						(* Motor_A:= TRUE; *)
#1576						MOVE		TRUE,Motor_A	{LNXT:419|423|-1}
(*) BOOL
08035CB7  B8 01 00 00 00                mov eax, 01H
08035CBC  84 C0                         test al, al
08035CBE  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+0

#1577		
#1578		$label116:
#1579					(* END_IF *)
#1580		
#1581		$label114:
#1582				(* END_IF *)
#1583		
#1584		
#1585				(* IF MOTOR_C AND NOT MOTOR_A AND NOT MOTOR_B *)
#1586				LD		MOTOR_B	{LNXT:423|-1|-1}
(*) UNDEF
08035CC5  33 C0                         xor eax, eax
08035CC7  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+1

#1587				NOT	{LNXT:423|-1|-1}
(*) BOOL
08035CCD  84 C0                         test al, al
08035CCF  0F 94 C0                      sete al

#1588				AND(		MOTOR_A	{LNXT:423|-1|-1}
(*) BOOL
08035CD2  50                            push eax
08035CD3  33 C0                         xor eax, eax
08035CD5  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+0

#1589				NOT	{LNXT:423|-1|-1}
(*) BOOL
08035CDB  84 C0                         test al, al
08035CDD  0F 94 C0                      sete al

#1590				AND		MOTOR_C	{LNXT:423|-1|-1}
(*) BOOL
08035CE0  33 C9                         xor ecx, ecx
08035CE2  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %Q1+2
08035CE8  23 C1                         and eax, ecx

#1591				)	{LNXT:423|-1|-1}
(*) BOOL
08035CEA  8B C8                         mov ecx, eax
08035CEC  58                            pop eax
08035CED  23 C1                         and eax, ecx

#1592				JMPCN	$label117	{LNXT:423|424|436}
(-) BOOL
08035CEF  84 C0                         test al, al
08035CF1  90 74 4E 90 90 90             je 08035D42H

#1593		
#1594				(* THEN *)
#1595		
#1596		
#1597					(* IF Avto_C *)
#1598					LD		Avto_C	{LNXT:424|-1|-1}
(*) UNDEF
08035CF7  33 C0                         xor eax, eax
08035CF9  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+48

#1599					JMPCN	$label118	{LNXT:424|425|427}
(-) BOOL
08035CFF  84 C0                         test al, al
08035D01  90 74 11 90 90 90             je 08035D15H

#1600		
#1601					(* THEN *)
#1602		
#1603						(* Motor_A:= TRUE; *)
#1604						MOVE		TRUE,Motor_A	{LNXT:425|427|-1}
(*) BOOL
08035D07  B8 01 00 00 00                mov eax, 01H
08035D0C  84 C0                         test al, al
08035D0E  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+0

#1605		
#1606		$label118:
#1607					(* END_IF *)
#1608		
#1609		
#1610					(* IF Avto_B AND NOT MOTOR_A *)
#1611					LD		MOTOR_A	{LNXT:427|-1|-1}
(*) UNDEF
08035D15  33 C0                         xor eax, eax
08035D17  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+0

#1612					NOT	{LNXT:427|-1|-1}
(*) BOOL
08035D1D  84 C0                         test al, al
08035D1F  0F 94 C0                      sete al

#1613					AND		Avto_B	{LNXT:427|-1|-1}
(*) BOOL
08035D22  33 C9                         xor ecx, ecx
08035D24  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+46
08035D2A  23 C1                         and eax, ecx

#1614					JMPCN	$label119	{LNXT:427|428|436}
(-) BOOL
08035D2C  84 C0                         test al, al
08035D2E  90 74 11 90 90 90             je 08035D42H

#1615		
#1616					(* THEN *)
#1617		
#1618						(* Motor_B:= TRUE; *)
#1619						MOVE		TRUE,Motor_B	{LNXT:428|436|-1}
(*) BOOL
08035D34  B8 01 00 00 00                mov eax, 01H
08035D39  84 C0                         test al, al
08035D3B  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+1

#1620		
#1621		$label119:
#1622					(* END_IF *)
#1623		
#1624		$label117:
#1625				(* END_IF *)
#1626		
#1627		$label110:
#1628			(* END_IF *)
#1629		
#1630		
#1631			(* IF Tank_Level <= Level_1 and Motor_A and Motor_B and Motor_C *)
#1632			LD		Tank_Level	{LNXT:436|-1|-1}
(*) UNDEF
08035D42  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+18

#1633			LE		Level_1	{LNXT:436|-1|-1}
(*) INT
08035D49  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; %M110+6
08035D50  3B C1                         cmp eax, ecx
08035D52  0F 9E C0                      setle al
08035D55  25 FF 00 00 00                and eax, 0FFh

#1634			AND		Motor_A	{LNXT:436|-1|-1}
(*) BOOL
08035D5A  33 C9                         xor ecx, ecx
08035D5C  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %Q1+0
08035D62  23 C1                         and eax, ecx

#1635			AND		Motor_B	{LNXT:436|-1|-1}
(*) BOOL
08035D64  33 C9                         xor ecx, ecx
08035D66  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %Q1+1
08035D6C  23 C1                         and eax, ecx

#1636			AND		Motor_C	{LNXT:436|-1|-1}
(*) BOOL
08035D6E  33 C9                         xor ecx, ecx
08035D70  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %Q1+2
08035D76  23 C1                         and eax, ecx

#1637			JMPCN	$label120	{LNXT:436|437|443}
(-) BOOL
08035D78  84 C0                         test al, al
08035D7A  90 74 11 90 90 90             je 08035D8EH

#1638		
#1639			(* THEN *)
#1640		
#1641				(* Motor_A := False; *)
#1642				MOVE		False,Motor_A	{LNXT:437|443|-1}
(*) BOOL
08035D80  B8 00 00 00 00                mov eax, 00H
08035D85  84 C0                         test al, al
08035D87  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+0

#1643		
#1644		$label120:
#1645			(* END_IF *)
#1646		
#1647		
#1648			(* IF Tank_Level > Level_3 *)
#1649			LD		Tank_Level	{LNXT:443|-1|-1}
(*) UNDEF
08035D8E  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+18

#1650			GT		Level_3	{LNXT:443|-1|-1}
(*) INT
08035D95  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; %M110+10
08035D9C  3B C1                         cmp eax, ecx
08035D9E  0F 9F C0                      setg al
08035DA1  25 FF 00 00 00                and eax, 0FFh

#1651			JMPCN	$label121	{LNXT:443|444|462}
(-) BOOL
08035DA6  84 C0                         test al, al
08035DA8  90 74 5D 90 90 90             je 08035E08H

#1652		
#1653			(* THEN *)
#1654		
#1655		
#1656				(* IF Avto_A *)
#1657				LD		Avto_A	{LNXT:444|-1|-1}
(*) UNDEF
08035DAE  33 C0                         xor eax, eax
08035DB0  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+49

#1658				JMPCN	$label122	{LNXT:444|445|448}
(-) BOOL
08035DB6  84 C0                         test al, al
08035DB8  90 74 11 90 90 90             je 08035DCCH

#1659		
#1660				(* THEN *)
#1661		
#1662					(* Motor_A := TRUE; *)
#1663					MOVE		TRUE,Motor_A	{LNXT:445|448|-1}
(*) BOOL
08035DBE  B8 01 00 00 00                mov eax, 01H
08035DC3  84 C0                         test al, al
08035DC5  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+0

#1664		
#1665		$label122:
#1666				(* END_IF *)
#1667		
#1668		
#1669				(* IF Avto_B *)
#1670				LD		Avto_B	{LNXT:448|-1|-1}
(*) UNDEF
08035DCC  33 C0                         xor eax, eax
08035DCE  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+46

#1671				JMPCN	$label123	{LNXT:448|449|452}
(-) BOOL
08035DD4  84 C0                         test al, al
08035DD6  90 74 11 90 90 90             je 08035DEAH

#1672		
#1673				(* THEN *)
#1674		
#1675					(* Motor_B := TRUE; *)
#1676					MOVE		TRUE,Motor_B	{LNXT:449|452|-1}
(*) BOOL
08035DDC  B8 01 00 00 00                mov eax, 01H
08035DE1  84 C0                         test al, al
08035DE3  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+1

#1677		
#1678		$label123:
#1679				(* END_IF *)
#1680		
#1681		
#1682				(* IF Avto_C *)
#1683				LD		Avto_C	{LNXT:452|-1|-1}
(*) UNDEF
08035DEA  33 C0                         xor eax, eax
08035DEC  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+48

#1684				JMPCN	$label124	{LNXT:452|453|462}
(-) BOOL
08035DF2  84 C0                         test al, al
08035DF4  90 74 11 90 90 90             je 08035E08H

#1685		
#1686				(* THEN *)
#1687		
#1688					(* Motor_C := TRUE; *)
#1689					MOVE		TRUE,Motor_C	{LNXT:453|462|-1}
(*) BOOL
08035DFA  B8 01 00 00 00                mov eax, 01H
08035DFF  84 C0                         test al, al
08035E01  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+2

#1690		
#1691		$label124:
#1692				(* END_IF *)
#1693		
#1694		$label121:
#1695			(* END_IF *)
#1696		
#1697		
#1698			(* IF Tank_Level <= level_min *)
#1699			LD		Tank_Level	{LNXT:462|-1|-1}
(*) UNDEF
08035E08  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+18

#1700			LE		level_min	{LNXT:462|-1|-1}
(*) INT
08035E0F  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; %M110+4
08035E16  3B C1                         cmp eax, ecx
08035E18  0F 9E C0                      setle al
08035E1B  25 FF 00 00 00                and eax, 0FFh

#1701			JMPCN	$label125	{LNXT:462|463|5}
(-) BOOL
08035E20  84 C0                         test al, al
08035E22  90 74 2D 90 90 90             je 08035E52H

#1702		
#1703			(* THEN *)
#1704		
#1705				(* Motor_A := False; *)
#1706				MOVE		False,Motor_A	{LNXT:463|464|-1}
(*) BOOL
08035E28  B8 00 00 00 00                mov eax, 00H
08035E2D  84 C0                         test al, al
08035E2F  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+0

#1707		
#1708				(* Motor_B := False; *)
#1709				MOVE		False,Motor_B	{LNXT:464|465|-1}
(*) BOOL
08035E36  B8 00 00 00 00                mov eax, 00H
08035E3B  84 C0                         test al, al
08035E3D  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+1

#1710		
#1711				(* Motor_C := False; *)
#1712				MOVE		False,Motor_C	{LNXT:465|5|-1}
(*) BOOL
08035E44  B8 00 00 00 00                mov eax, 00H
08035E49  84 C0                         test al, al
08035E4B  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+2

END_PROGRAM
**************************************************
	List program: Register
**************************************************

PROGRAM Register

END_PROGRAM

#0		{SRC:Register}
#1		(*$WAITSWITCH$*)
#2		
#3			(* level_tank := Tank_Level; *)
#4			MOVE		Tank_Level,level_tank	{LNXT:3|6|-1}
(*) UDINT
08035E52  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+18
08035E59  66 89 05 CC CC CC CC          mov [CCCCCCCCH], ax ; %M110+2

#5		
#6		
#7			(* IF Alarms >0 *)
#8			LD		Alarms	{LNXT:6|-1|-1}
(*) UNDEF
08035E60  33 C0                         xor eax, eax
08035E62  66 8B 05 CC CC CC CC          mov ax, [CCCCCCCCH] ; %M110+14

#9			GT		0	{LNXT:6|-1|-1}
(*) WORD
08035E69  3D 00 00 00 00                cmp eax, 0
08035E6E  0F 9F C0                      setg al
08035E71  25 FF 00 00 00                and eax, 0FFh

#10			JMPCN	$label0	{LNXT:6|7|9}
(-) BOOL
08035E76  84 C0                         test al, al
08035E78  90 74 16 90 90 90             je 08035E91H

#11		
#12			(* THEN *)
#13		
#14				(* general_alarm := true; *)
#15				MOVE		true,general_alarm	{LNXT:7|14|-1}
(*) BOOL
08035E7E  B8 01 00 00 00                mov eax, 01H
08035E83  84 C0                         test al, al
08035E85  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+3

#16				JMP		$label1	{LNXT:6|7|9}
(-) BOOL
08035E8C  EB 11 90 90 90                jmp 08035E9FH

#17		$label0:
#18		
#19			(* ELSE *)
#20		
#21				(* general_alarm := false; *)
#22				MOVE		false,general_alarm	{LNXT:9|14|-1}
(*) BOOL
08035E91  B8 00 00 00 00                mov eax, 00H
08035E96  84 C0                         test al, al
08035E98  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; %Q1+3

#23		
#24		$label1:
#25			(* END_IF *)
#26		
#27			(* Alarms.0 := di_sensor_Min; *)
#28			MOVE		di_sensor_Min,Alarms.0	{LNXT:14|15|-1}
(*) BOOL
08035E9F  33 C0                         xor eax, eax
08035EA1  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+193
08035EA7  84 C0                         test al, al
08035EA9  90 75 11 90 90 90             jne 00000014H@
08035EAF  66 0F BA 35 CC CC CC CC 00    btr word ptr [CCCCCCCCH], 0 ; %M110+14
08035EB8  EB 0C 90 90 90                jmp 0000000EH@
08035EBD  66 0F BA 2D CC CC CC CC 00    bts word ptr [CCCCCCCCH], 0 ; %M110+14

#29		
#30			(* Alarms.1 := di_sensor_Max; *)
#31			MOVE		di_sensor_Max,Alarms.1	{LNXT:15|16|-1}
(*) BOOL
08035EC6  33 C0                         xor eax, eax
08035EC8  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+248
08035ECE  84 C0                         test al, al
08035ED0  90 75 11 90 90 90             jne 00000014H@
08035ED6  66 0F BA 35 CC CC CC CC 01    btr word ptr [CCCCCCCCH], 1 ; %M110+14
08035EDF  EB 0C 90 90 90                jmp 0000000EH@
08035EE4  66 0F BA 2D CC CC CC CC 01    bts word ptr [CCCCCCCCH], 1 ; %M110+14

#32		
#33			(* Alarms.2 := di_flooding; *)
#34			MOVE		di_flooding,Alarms.2	{LNXT:16|17|-1}
(*) BOOL
08035EED  33 C0                         xor eax, eax
08035EEF  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+17
08035EF5  84 C0                         test al, al
08035EF7  90 75 11 90 90 90             jne 00000014H@
08035EFD  66 0F BA 35 CC CC CC CC 02    btr word ptr [CCCCCCCCH], 2 ; %M110+14
08035F06  EB 0C 90 90 90                jmp 0000000EH@
08035F0B  66 0F BA 2D CC CC CC CC 02    bts word ptr [CCCCCCCCH], 2 ; %M110+14

#35		
#36			(* Alarms.4 := di_rnpp; *)
#37			MOVE		di_rnpp,Alarms.4	{LNXT:17|33|-1}
(*) BOOL
08035F14  33 C0                         xor eax, eax
08035F16  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+249
08035F1C  84 C0                         test al, al
08035F1E  90 75 11 90 90 90             jne 00000014H@
08035F24  66 0F BA 35 CC CC CC CC 04    btr word ptr [CCCCCCCCH], 4 ; %M110+14
08035F2D  EB 0C 90 90 90                jmp 0000000EH@
08035F32  66 0F BA 2D CC CC CC CC 04    bts word ptr [CCCCCCCCH], 4 ; %M110+14

#38		
#39		
#40			(* IF Tank_Level < -32000 *)
#41			LD		Tank_Level	{LNXT:33|-1|-1}
(*) UNDEF
08035F3B  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; $$DATA$$+18

#42			LT		-32000	{LNXT:33|-1|-1}
(*) INT
08035F42  3D 00 83 FF FF                cmp eax, -32000
08035F47  0F 9C C0                      setl al
08035F4A  25 FF 00 00 00                and eax, 0FFh

#43			JMPCN	$label2	{LNXT:33|34|36}
(-) BOOL
08035F4F  84 C0                         test al, al
08035F51  90 74 2C 90 90 90             je 08035F80H

#44		
#45			(* THEN *)
#46		
#47				(* Alarms.11 := True; *)
#48				MOVE		True,Alarms.11	{LNXT:34|3|-1}
(*) BOOL
08035F57  B8 01 00 00 00                mov eax, 01H
08035F5C  84 C0                         test al, al
08035F5E  90 75 11 90 90 90             jne 00000014H@
08035F64  66 0F BA 35 CC CC CC CC 0B    btr word ptr [CCCCCCCCH], 11 ; %M110+14
08035F6D  EB 0C 90 90 90                jmp 0000000EH@
08035F72  66 0F BA 2D CC CC CC CC 0B    bts word ptr [CCCCCCCCH], 11 ; %M110+14

#49				JMP		$label3	{LNXT:33|34|36}
(-) WORD
08035F7B  EB 27 90 90 90                jmp 08035FA4H

#50		$label2:
#51		
#52			(* ELSE *)
#53		
#54				(* Alarms.11 := false; *)
#55				MOVE		false,Alarms.11	{LNXT:36|3|-1}
(*) WORD
08035F80  B8 00 00 00 00                mov eax, 00H
08035F85  84 C0                         test al, al
08035F87  90 75 11 90 90 90             jne 00000014H@
08035F8D  66 0F BA 35 CC CC CC CC 0B    btr word ptr [CCCCCCCCH], 11 ; %M110+14
08035F96  EB 0C 90 90 90                jmp 0000000EH@
08035F9B  66 0F BA 2D CC CC CC CC 0B    bts word ptr [CCCCCCCCH], 11 ; %M110+14

END_PROGRAM
**************************************************
	List program: MotoHour
**************************************************

PROGRAM MotoHour

        VAR
MotoHour_Mode_1 : REAL := 0.0;	{ DE:"Час, напрацювання мс насос А" }
MotoHour_Mode_2 : REAL := 0.0;	{ DE:"Час, напрацювання мс насос В" }
MotoHour_Mode_3 : REAL := 0.0;	{ DE:"Час, напрацювання мс насос С" }
	END_VAR

END_PROGRAM

#0		{SRC:MotoHour}
#1		(*$WAITSWITCH$*)
#2		
#3		
#4			(* IF Motor_A *)
#5			LD		Motor_A	{LNXT:3|-1|-1}
(*) UNDEF
08035FA4  33 C0                         xor eax, eax
08035FA6  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+0

#6			JMPCN	$label0	{LNXT:3|4|6}
(-) BOOL
08035FAC  84 C0                         test al, al
08035FAE  90 74 1D 90 90 90             je 08035FCEH

#7		
#8			(* THEN *)
#9		
#10				(* MotoHour_Mode_1 := MotoHour_Mode_1 + 1; *)
#11				LD		MotoHour_Mode_1	{LNXT:4|6|-1}
(*) UNDEF
08035FB4  D9 05 CC CC CC CC             fld dword ptr [CCCCCCCCH] ; $$DATA$$+240

#12				ADD		1	{LNXT:4|6|-1}
(*) REAL
08035FBA  68 01 00 00 00                push 1
08035FBF  DA 04 24                      fiadd dword ptr [esp]
08035FC2  81 C4 04 00 00 00             add esp, 4

#13				ST		MotoHour_Mode_1	{LNXT:4|6|-1}
(*) REAL
08035FC8  D9 15 CC CC CC CC             fst dword ptr [CCCCCCCCH] ; $$DATA$$+240

#14		
#15		$label0:
#16			(* END_IF *)
#17		
#18		
#19			(* IF Motor_A *)
#20			LD		Motor_A	{LNXT:6|-1|-1}
(*) UNDEF
08035FCE  DD C0                         ffree
08035FD0  D9 F7                         fincstp
08035FD2  33 C0                         xor eax, eax
08035FD4  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+0

#21			NOT	{LNXT:6|-1|-1}
(*) BOOL
08035FDA  84 C0                         test al, al
08035FDC  0F 94 C0                      sete al

#22			JMPCN	$label1	{LNXT:6|7|11}
(-) BOOL
08035FDF  84 C0                         test al, al
08035FE1  90 74 2D 90 90 90             je 08036011H

#23		
#24			(* THEN *)
#25		
#26				(* MotoHour_Mode_1 := MotoHour_Mode_1; *)
#27				MOVE		MotoHour_Mode_1,MotoHour_Mode_1	{LNXT:7|8|-1}
(*) BOOL
08035FE7  D9 05 CC CC CC CC             fld dword ptr [CCCCCCCCH] ; $$DATA$$+240
08035FED  D9 15 CC CC CC CC             fst dword ptr [CCCCCCCCH] ; $$DATA$$+240

#28		
#29				(* MotoHour_1 := MotoHour_Mode_1 / 3600; *)
#30				LD		MotoHour_Mode_1	{LNXT:8|11|-1}
(*) UNDEF
08035FF3  DD C0                         ffree
08035FF5  D9 F7                         fincstp
08035FF7  D9 05 CC CC CC CC             fld dword ptr [CCCCCCCCH] ; $$DATA$$+240

#31				DIV		3600	{LNXT:8|11|-1}
(*) REAL
08035FFD  68 10 0E 00 00                push 3600
08036002  DA 34 24                      fidiv [esp]
08036005  81 C4 04 00 00 00             add esp, 4

#32				ST		MotoHour_1	{LNXT:8|11|-1}
(*) REAL
0803600B  D9 15 CC CC CC CC             fst dword ptr [CCCCCCCCH] ; %M110+20

#33		
#34		$label1:
#35			(* END_IF *)
#36		
#37		
#38			(* IF Motor_B *)
#39			LD		Motor_B	{LNXT:11|-1|-1}
(*) UNDEF
08036011  DD C0                         ffree
08036013  D9 F7                         fincstp
08036015  33 C0                         xor eax, eax
08036017  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+1

#40			JMPCN	$label2	{LNXT:11|12|14}
(-) BOOL
0803601D  84 C0                         test al, al
0803601F  90 74 1D 90 90 90             je 0803603FH

#41		
#42			(* THEN *)
#43		
#44				(* MotoHour_Mode_2 := MotoHour_Mode_2 + 1; *)
#45				LD		MotoHour_Mode_2	{LNXT:12|14|-1}
(*) UNDEF
08036025  D9 05 CC CC CC CC             fld dword ptr [CCCCCCCCH] ; $$DATA$$+244

#46				ADD		1	{LNXT:12|14|-1}
(*) REAL
0803602B  68 01 00 00 00                push 1
08036030  DA 04 24                      fiadd dword ptr [esp]
08036033  81 C4 04 00 00 00             add esp, 4

#47				ST		MotoHour_Mode_2	{LNXT:12|14|-1}
(*) REAL
08036039  D9 15 CC CC CC CC             fst dword ptr [CCCCCCCCH] ; $$DATA$$+244

#48		
#49		$label2:
#50			(* END_IF *)
#51		
#52		
#53			(* IF Motor_B *)
#54			LD		Motor_B	{LNXT:14|-1|-1}
(*) UNDEF
0803603F  DD C0                         ffree
08036041  D9 F7                         fincstp
08036043  33 C0                         xor eax, eax
08036045  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+1

#55			NOT	{LNXT:14|-1|-1}
(*) BOOL
0803604B  84 C0                         test al, al
0803604D  0F 94 C0                      sete al

#56			JMPCN	$label3	{LNXT:14|15|19}
(-) BOOL
08036050  84 C0                         test al, al
08036052  90 74 2D 90 90 90             je 08036082H

#57		
#58			(* THEN *)
#59		
#60				(* MotoHour_Mode_2 := MotoHour_Mode_2; *)
#61				MOVE		MotoHour_Mode_2,MotoHour_Mode_2	{LNXT:15|16|-1}
(*) BOOL
08036058  D9 05 CC CC CC CC             fld dword ptr [CCCCCCCCH] ; $$DATA$$+244
0803605E  D9 15 CC CC CC CC             fst dword ptr [CCCCCCCCH] ; $$DATA$$+244

#62		
#63				(* MotoHour_2 := MotoHour_Mode_2 / 3600; *)
#64				LD		MotoHour_Mode_2	{LNXT:16|19|-1}
(*) UNDEF
08036064  DD C0                         ffree
08036066  D9 F7                         fincstp
08036068  D9 05 CC CC CC CC             fld dword ptr [CCCCCCCCH] ; $$DATA$$+244

#65				DIV		3600	{LNXT:16|19|-1}
(*) REAL
0803606E  68 10 0E 00 00                push 3600
08036073  DA 34 24                      fidiv [esp]
08036076  81 C4 04 00 00 00             add esp, 4

#66				ST		MotoHour_2	{LNXT:16|19|-1}
(*) REAL
0803607C  D9 15 CC CC CC CC             fst dword ptr [CCCCCCCCH] ; %M110+24

#67		
#68		$label3:
#69			(* END_IF *)
#70		
#71		
#72			(* IF Motor_C *)
#73			LD		Motor_C	{LNXT:19|-1|-1}
(*) UNDEF
08036082  DD C0                         ffree
08036084  D9 F7                         fincstp
08036086  33 C0                         xor eax, eax
08036088  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+2

#74			JMPCN	$label4	{LNXT:19|20|22}
(-) BOOL
0803608E  84 C0                         test al, al
08036090  90 74 1D 90 90 90             je 080360B0H

#75		
#76			(* THEN *)
#77		
#78				(* MotoHour_Mode_2 := MotoHour_Mode_2 + 1; *)
#79				LD		MotoHour_Mode_2	{LNXT:20|22|-1}
(*) UNDEF
08036096  D9 05 CC CC CC CC             fld dword ptr [CCCCCCCCH] ; $$DATA$$+244

#80				ADD		1	{LNXT:20|22|-1}
(*) REAL
0803609C  68 01 00 00 00                push 1
080360A1  DA 04 24                      fiadd dword ptr [esp]
080360A4  81 C4 04 00 00 00             add esp, 4

#81				ST		MotoHour_Mode_2	{LNXT:20|22|-1}
(*) REAL
080360AA  D9 15 CC CC CC CC             fst dword ptr [CCCCCCCCH] ; $$DATA$$+244

#82		
#83		$label4:
#84			(* END_IF *)
#85		
#86		
#87			(* IF Motor_C *)
#88			LD		Motor_C	{LNXT:22|-1|-1}
(*) UNDEF
080360B0  DD C0                         ffree
080360B2  D9 F7                         fincstp
080360B4  33 C0                         xor eax, eax
080360B6  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %Q1+2

#89			NOT	{LNXT:22|-1|-1}
(*) BOOL
080360BC  84 C0                         test al, al
080360BE  0F 94 C0                      sete al

#90			JMPCN	$label5	{LNXT:22|23|3}
(-) BOOL
080360C1  84 C0                         test al, al
080360C3  90 74 31 90 90 90             je 080360F7H

#91		
#92			(* THEN *)
#93		
#94				(* MotoHour_Mode_2 := MotoHour_Mode_2; *)
#95				MOVE		MotoHour_Mode_2,MotoHour_Mode_2	{LNXT:23|24|-1}
(*) BOOL
080360C9  D9 05 CC CC CC CC             fld dword ptr [CCCCCCCCH] ; $$DATA$$+244
080360CF  D9 15 CC CC CC CC             fst dword ptr [CCCCCCCCH] ; $$DATA$$+244

#96		
#97				(* MotoHour_2 := MotoHour_Mode_2 / 3600; *)
#98				LD		MotoHour_Mode_2	{LNXT:24|3|-1}
(*) UNDEF
080360D5  DD C0                         ffree
080360D7  D9 F7                         fincstp
080360D9  D9 05 CC CC CC CC             fld dword ptr [CCCCCCCCH] ; $$DATA$$+244

#99				DIV		3600	{LNXT:24|3|-1}
(*) REAL
080360DF  68 10 0E 00 00                push 3600
080360E4  DA 34 24                      fidiv [esp]
080360E7  81 C4 04 00 00 00             add esp, 4

#100				ST		MotoHour_2	{LNXT:24|3|-1}
(*) REAL
080360ED  D9 15 CC CC CC CC             fst dword ptr [CCCCCCCCH] ; %M110+24
080360F3  DD C0                         ffree
080360F5  D9 F7                         fincstp

END_PROGRAM
**************************************************
	List program: SaveData
**************************************************

PROGRAM SaveData

        VAR
power_err : R_TRIG;
ton_start_up : TON;
res_lvl_min : BOOL;
res_lvl_1 : BOOL;
res_lvl_2 : BOOL;
res_lvl_3 : BOOL;
res_rotation : BOOL;
	END_VAR

END_PROGRAM

#0		{SRC:SaveData}
#1		(*$WAITSWITCH$*)
#2		
#3			(* ton_start_up *)
#4			MOVE		true,ton_start_up.IN	{LNXT:1|-1|-1}
(*) UDINT
080360F7  B8 01 00 00 00                mov eax, 01H
080360FC  84 C0                         test al, al
080360FE  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+254

#5			MOVE		5000,ton_start_up.PT	{LNXT:1|-1|-1}
(*) BOOL
08036105  B8 88 13 00 00                mov eax, 1388H
0803610A  89 05 CC CC CC CC             mov [CCCCCCCCH], eax ; $$DATA$$+255

#6			CAL		ton_start_up	{LNXT:1|2|-1}
(*) UDINT
08036110  50                            push eax
08036111  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+250
08036116  E8 1E E4 FF FF                call 08034539H ; $$CODE$$+17721
0803611B  58                            pop eax

#7		
#8			(* power_err *)
#9			LD		ton_start_up.Q	{LNXT:2|-1|-1}
(*) UNDEF
0803611C  33 C0                         xor eax, eax
0803611E  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+259

#10			AND		di_rnpp	{LNXT:2|-1|-1}
(*) BOOL
08036124  33 C9                         xor ecx, ecx
08036126  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; $$DATA$$+249
0803612C  23 C1                         and eax, ecx

#11			ST		power_err.clk	{LNXT:2|-1|-1}
(*) BOOL
0803612E  84 C0                         test al, al
08036130  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+273

#12			CAL		power_err	{LNXT:2|3|-1}
(*) BOOL
08036137  50                            push eax
08036138  BB CC CC CC CC                mov ebx, CCCCCCCCH ; $$DATA$$+272
0803613D  E8 CE E3 FF FF                call 08034510H ; $$CODE$$+17680
08036142  58                            pop eax

#13		
#14		
#15			(* IF power_err.q *)
#16			LD		power_err.q	{LNXT:3|-1|-1}
(*) UNDEF
08036143  33 C0                         xor eax, eax
08036145  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; $$DATA$$+274

#17			JMPCN	$label0	{LNXT:3|4|1}
(-) BOOL
0803614B  84 C0                         test al, al
0803614D  0F 84 58 01 00 00             je 080362ABH

#18		
#19			(* THEN *)
#20		
#21		
#22				(* IF ep_level_min <> level_min *)
#23				LD		ep_level_min	{LNXT:4|-1|-1}
(*) UNDEF
08036153  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M101+6

#24				NE		level_min	{LNXT:4|-1|-1}
(*) INT
0803615A  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; %M110+4
08036161  3B C1                         cmp eax, ecx
08036163  0F 95 C0                      setne al
08036166  25 FF 00 00 00                and eax, 0FFh

#25				JMPCN	$label1	{LNXT:4|4|5}
(-) BOOL
0803616B  84 C0                         test al, al
0803616D  90 74 29 90 90 90             je 08036199H

#26		
#27				(* THEN *)
#28		
#29					(* res_lvl_min := sysWriteParINT(ADR(ep_level_min), level_min); *)
#30					ADR		ep_level_min	{LNXT:4|5|-1}
(*) BOOL
08036173  B8 CC CC CC CC                mov eax, CCCCCCCCH ; %M101+6

#31					sysWriteParINT		level_min	{LNXT:4|5|-1}
(*) @INT
08036178  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; %M110+4
0803617F  51                            push ecx
08036180  8B C8                         mov ecx, eax
08036182  51                            push ecx
08036183  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; sysWriteParINT
08036188  FF D1                         call ecx
0803618A  81 C4 08 00 00 00             add esp, 8

#32					ST		res_lvl_min	{LNXT:4|5|-1}
(*) BOOL
08036190  84 C0                         test al, al
08036192  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+283

#33		
#34		$label1:
#35				(* END_IF *)
#36		
#37		
#38				(* IF ep_level_1 <> Level_1 *)
#39				LD		ep_level_1	{LNXT:5|-1|-1}
(*) UNDEF
08036199  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M101+0

#40				NE		Level_1	{LNXT:5|-1|-1}
(*) INT
080361A0  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; %M110+6
080361A7  3B C1                         cmp eax, ecx
080361A9  0F 95 C0                      setne al
080361AC  25 FF 00 00 00                and eax, 0FFh

#41				JMPCN	$label2	{LNXT:5|5|6}
(-) BOOL
080361B1  84 C0                         test al, al
080361B3  90 74 29 90 90 90             je 080361DFH

#42		
#43				(* THEN *)
#44		
#45					(* res_lvl_1 := sysWriteParINT(ADR(ep_level_1), Level_1); *)
#46					ADR		ep_level_1	{LNXT:5|6|-1}
(*) BOOL
080361B9  B8 CC CC CC CC                mov eax, CCCCCCCCH ; %M101+0

#47					sysWriteParINT		Level_1	{LNXT:5|6|-1}
(*) @INT
080361BE  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; %M110+6
080361C5  51                            push ecx
080361C6  8B C8                         mov ecx, eax
080361C8  51                            push ecx
080361C9  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; sysWriteParINT
080361CE  FF D1                         call ecx
080361D0  81 C4 08 00 00 00             add esp, 8

#48					ST		res_lvl_1	{LNXT:5|6|-1}
(*) BOOL
080361D6  84 C0                         test al, al
080361D8  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+284

#49		
#50		$label2:
#51				(* END_IF *)
#52		
#53		
#54				(* IF ep_level_2 <> Level_2 *)
#55				LD		ep_level_2	{LNXT:6|-1|-1}
(*) UNDEF
080361DF  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M101+2

#56				NE		Level_2	{LNXT:6|-1|-1}
(*) INT
080361E6  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; %M110+8
080361ED  3B C1                         cmp eax, ecx
080361EF  0F 95 C0                      setne al
080361F2  25 FF 00 00 00                and eax, 0FFh

#57				JMPCN	$label3	{LNXT:6|6|8}
(-) BOOL
080361F7  84 C0                         test al, al
080361F9  90 74 29 90 90 90             je 08036225H

#58		
#59				(* THEN *)
#60		
#61					(* res_lvl_2 := sysWriteParINT(ADR(ep_level_2), Level_2); *)
#62					ADR		ep_level_2	{LNXT:6|8|-1}
(*) BOOL
080361FF  B8 CC CC CC CC                mov eax, CCCCCCCCH ; %M101+2

#63					sysWriteParINT		Level_2	{LNXT:6|8|-1}
(*) @INT
08036204  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; %M110+8
0803620B  51                            push ecx
0803620C  8B C8                         mov ecx, eax
0803620E  51                            push ecx
0803620F  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; sysWriteParINT
08036214  FF D1                         call ecx
08036216  81 C4 08 00 00 00             add esp, 8

#64					ST		res_lvl_2	{LNXT:6|8|-1}
(*) BOOL
0803621C  84 C0                         test al, al
0803621E  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+285

#65		
#66		$label3:
#67				(* END_IF *)
#68		
#69		
#70				(* IF ep_level_3 <> Level_3 *)
#71				LD		ep_level_3	{LNXT:8|-1|-1}
(*) UNDEF
08036225  0F BF 05 CC CC CC CC          movsx eax, word ptr [CCCCCCCCH] ; %M101+4

#72				NE		Level_3	{LNXT:8|-1|-1}
(*) INT
0803622C  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; %M110+10
08036233  3B C1                         cmp eax, ecx
08036235  0F 95 C0                      setne al
08036238  25 FF 00 00 00                and eax, 0FFh

#73				JMPCN	$label4	{LNXT:8|8|9}
(-) BOOL
0803623D  84 C0                         test al, al
0803623F  90 74 29 90 90 90             je 0803626BH

#74		
#75				(* THEN *)
#76		
#77					(* res_lvl_3 := sysWriteParINT(ADR(ep_level_3), Level_3); *)
#78					ADR		ep_level_3	{LNXT:8|9|-1}
(*) BOOL
08036245  B8 CC CC CC CC                mov eax, CCCCCCCCH ; %M101+4

#79					sysWriteParINT		Level_3	{LNXT:8|9|-1}
(*) @INT
0803624A  0F BF 0D CC CC CC CC          movsx ecx, word ptr [CCCCCCCCH] ; %M110+10
08036251  51                            push ecx
08036252  8B C8                         mov ecx, eax
08036254  51                            push ecx
08036255  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; sysWriteParINT
0803625A  FF D1                         call ecx
0803625C  81 C4 08 00 00 00             add esp, 8

#80					ST		res_lvl_3	{LNXT:8|9|-1}
(*) BOOL
08036262  84 C0                         test al, al
08036264  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+286

#81		
#82		$label4:
#83				(* END_IF *)
#84		
#85		
#86				(* IF ep_rotation <> Rotation *)
#87				LD		ep_rotation	{LNXT:9|-1|-1}
(*) UNDEF
0803626B  33 C0                         xor eax, eax
0803626D  8A 05 CC CC CC CC             mov al, [CCCCCCCCH] ; %M101+8

#88				NE		Rotation	{LNXT:9|-1|-1}
(*) BOOL
08036273  33 C9                         xor ecx, ecx
08036275  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %M110+16
0803627B  33 C1                         xor eax, ecx

#89				JMPCN	$label5	{LNXT:9|9|1}
(-) BOOL
0803627D  84 C0                         test al, al
0803627F  90 74 29 90 90 90             je 080362ABH

#90		
#91				(* THEN *)
#92		
#93					(* res_rotation := sysWriteParBOOL(ADR(ep_rotation), Rotation); *)
#94					ADR		ep_rotation	{LNXT:9|1|-1}
(*) BOOL
08036285  B8 CC CC CC CC                mov eax, CCCCCCCCH ; %M101+8

#95					sysWriteParBOOL		Rotation	{LNXT:9|1|-1}
(*) @BOOL
0803628A  0F B6 0D CC CC CC CC          movzx ecx, byte ptr [CCCCCCCCH] ; %M110+16
08036291  51                            push ecx
08036292  8B C8                         mov ecx, eax
08036294  51                            push ecx
08036295  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; sysWriteParBOOL
0803629A  FF D1                         call ecx
0803629C  81 C4 08 00 00 00             add esp, 8

#96					ST		res_rotation	{LNXT:9|1|-1}
(*) BOOL
080362A2  84 C0                         test al, al
080362A4  0F 95 05 CC CC CC CC          setne [CCCCCCCCH] ; $$DATA$$+287

080362AB  61                            popad
080362AC  5D                            pop ebp

080362AD  C3                            ret

END_PROGRAM


**************************************************
	Target variable image generation
**************************************************


*** INPUT:
080362AE  55                            push ebp
080362AF  8B EC                         mov ebp, esp

080362B1  66 8B 0D CC CC CC CC          mov cx, [CCCCCCCCH] ; %I1+0
080362B8  66 89 0D CC CC CC CC          mov [CCCCCCCCH], cx ; $$DATA$$+18

080362BF  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %I0+6
080362C5  88 0D CC CC CC CC             mov [CCCCCCCCH], cl ; $$DATA$$+17

080362CB  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %I0+3
080362D1  88 0D CC CC CC CC             mov [CCCCCCCCH], cl ; $$DATA$$+44

080362D7  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %I0+4
080362DD  88 0D CC CC CC CC             mov [CCCCCCCCH], cl ; $$DATA$$+45

080362E3  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %I0+1
080362E9  88 0D CC CC CC CC             mov [CCCCCCCCH], cl ; $$DATA$$+46

080362EF  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %I0+5
080362F5  88 0D CC CC CC CC             mov [CCCCCCCCH], cl ; $$DATA$$+47

080362FB  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %I0+2
08036301  88 0D CC CC CC CC             mov [CCCCCCCCH], cl ; $$DATA$$+48

08036307  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %I0+0
0803630D  88 0D CC CC CC CC             mov [CCCCCCCCH], cl ; $$DATA$$+49

08036313  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %I0+8
08036319  88 0D CC CC CC CC             mov [CCCCCCCCH], cl ; $$DATA$$+193

0803631F  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %I0+7
08036325  88 0D CC CC CC CC             mov [CCCCCCCCH], cl ; $$DATA$$+248

0803632B  8A 0D CC CC CC CC             mov cl, [CCCCCCCCH] ; %I0+10
08036331  88 0D CC CC CC CC             mov [CCCCCCCCH], cl ; $$DATA$$+249

08036337  8B E5                         mov esp, ebp
08036339  5D                            pop ebp

0803633A  C3                            ret


*** OUTPUT:
0803633B  55                            push ebp
0803633C  8B EC                         mov ebp, esp

0803633E  8B E5                         mov esp, ebp
08036340  5D                            pop ebp

08036341  C3                            ret



**************************************************
	Task Timed init code
**************************************************

08036342  55                            push ebp
08036343  8B EC                         mov ebp, esp

Var init: V::LVL.TM_WAIT_START = 5000
08036345  66 C7 05 CC CC CC CC 88 13    mov word ptr [CCCCCCCCH], 1388H ; $$DATA$$+42

Var init: V::LVL.ROTATIONNUMBER = 1
0803634E  66 C7 05 CC CC CC CC 01 00    mov word ptr [CCCCCCCCH], 0001H ; $$DATA$$+96

Var init: V::LVL.CURRENTPUMP = 1
08036357  66 C7 05 CC CC CC CC 01 00    mov word ptr [CCCCCCCCH], 0001H ; $$DATA$$+98

08036360  8B E5                         mov esp, ebp
08036362  5D                            pop ebp

08036363  C3                            ret



**************************************************
	Global init code
**************************************************

08036370  55                            push ebp
08036371  8B EC                         mov ebp, esp

Var init: V:CONFIGURATION_VARIABLES:ROTATION_STATE = '0'
08036373  C6 05 CC CC CC CC 30          mov [CCCCCCCCH], 30H ; %M110+186

Var init: V:CONFIGURATION_VARIABLES:FLOODING_STATE = '0'
0803637A  C6 05 CC CC CC CC 30          mov [CCCCCCCCH], 30H ; %M110+164

Var init: V:CONFIGURATION_VARIABLES:STATE_MOTOR_1 = '0'
08036381  C6 05 CC CC CC CC 30          mov [CCCCCCCCH], 30H ; %M110+32

Var init: V:CONFIGURATION_VARIABLES:STATE_MOTOR_2 = '0'
08036388  C6 05 CC CC CC CC 30          mov [CCCCCCCCH], 30H ; %M110+64

Var init: V:CONFIGURATION_VARIABLES:STATE_MOTOR_3 = '0'
0803638F  C6 05 CC CC CC CC 30          mov [CCCCCCCCH], 30H ; %M110+96

Var init: V:CONFIGURATION_VARIABLES:AUTO_STATE_1 = '0'
08036396  C6 05 CC CC CC CC 30          mov [CCCCCCCCH], 30H ; %M110+128

Var init: V:CONFIGURATION_VARIABLES:AUTO_STATE_2 = '0'
0803639D  C6 05 CC CC CC CC 30          mov [CCCCCCCCH], 30H ; %M110+140

Var init: V:CONFIGURATION_VARIABLES:AUTO_STATE_3 = '0'
080363A4  C6 05 CC CC CC CC 30          mov [CCCCCCCCH], 30H ; %M110+152

Var init: V:EMBEDDEDELEMENTS:$$POUCBARRAY$$BACKGROUND = [?main.$$POUCB$$, 0]
080363AB  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; $$DATA$$+332
080363B0  89 0D CC CC CC CC             mov [CCCCCCCCH], ecx ; $$DATA$$+288

Var init: V:EMBEDDEDELEMENTS:$$POUCBARRAY$$BOOT = [?DownloadData.$$POUCB$$, 0]
080363B6  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; $$DATA$$+338
080363BB  89 0D CC CC CC CC             mov [CCCCCCCCH], ecx ; $$DATA$$+296

Var init: V:EMBEDDEDELEMENTS:$$POUCBARRAY$$SERV = [?InitParDB.$$POUCB$$, 0]
080363C1  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; $$DATA$$+344
080363C6  89 0D CC CC CC CC             mov [CCCCCCCCH], ecx ; $$DATA$$+304

Var init: V:EMBEDDEDELEMENTS:$$POUCBARRAY$$TIMED = [?LVL.$$POUCB$$, ?Register.$$POUCB$$, ?MotoHour.$$POUCB$$, ?SaveData.$$POUCB$$, 0]
080363CC  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; $$DATA$$+350
080363D1  89 0D CC CC CC CC             mov [CCCCCCCCH], ecx ; $$DATA$$+312
080363D7  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; $$DATA$$+356
080363DC  89 0D CC CC CC CC             mov [CCCCCCCCH], ecx ; $$DATA$$+316
080363E2  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; $$DATA$$+362
080363E7  89 0D CC CC CC CC             mov [CCCCCCCCH], ecx ; $$DATA$$+320
080363ED  B9 CC CC CC CC                mov ecx, CCCCCCCCH ; $$DATA$$+368
080363F2  89 0D CC CC CC CC             mov [CCCCCCCCH], ecx ; $$DATA$$+324

080363F8  8B E5                         mov esp, ebp
080363FA  5D                            pop ebp

080363FB  C3                            ret



**************************************************
	Global RETAIN init code
**************************************************

080363FC  55                            push ebp
080363FD  8B EC                         mov ebp, esp

080363FF  8B E5                         mov esp, ebp
08036401  5D                            pop ebp

08036402  C3                            ret



**************************************************
	Task $$VirtualTables init code
**************************************************

08036403  55                            push ebp
08036404  8B EC                         mov ebp, esp

08036406  8B E5                         mov esp, ebp
08036408  5D                            pop ebp

08036409  C3                            ret



********************************************
MEMORY MAP
********************************************

Code area type:          		       main code
Start code area:          		0000000008030000h
End code area:            		00000000080372A0h
Code size:                		000072A0h

Start local data area:    		0000000007FB0000h
End local data area:      		0000000007FB0176h
Local data size:          		00000176h

Start retentive data area:		0000000000000000h
End retentive data area:  		0000000000000000h
Retentive data size:      		00000000h

Start bit data area:      		0000000000000000h
End bit data area:        		0000000000000000h
Bit data size:            		00000000h



********************************************
CODE ID:                                07D0E02B
DEBUG MEMO ID:                          000034F7
FULL MEMO ID:                           0000A305
RELOCATION ADDR:                        0000000008030000
********************************************
